import { Observable, ReplaySubject } from 'rxjs';
import { Net } from '../data/net';
import { LogLevel } from '../diagnostics/log-level';
import { Logging } from '../diagnostics/logging';
import { RpcInboundCommands } from '../rpc/rpc-base';
import { ClientNotificationType } from './client-notification';
import { Notification, NotificationChangeEvent } from './notification';
import { NotificationState } from './notification-state';
/**
 * Notification manager class.
 */
var NotificationManager = /** @class */ (function () {
    /**
     * Initializes a new instance of the NotificationManager class.
     *
     * @param rpc the RPC object.
     */
    function NotificationManager(rpc) {
        this.rpc = rpc;
        this.changedEventSubject = new ReplaySubject(1);
        this.initialize();
    }
    Object.defineProperty(NotificationManager.prototype, "items", {
        /**
         * Gets the items from current notification collection including dismissed.
         */
        get: function () {
            var items = [];
            for (var item in this.collection) {
                if (this.collection.hasOwnProperty(item)) {
                    items.push(this.collection[item]);
                }
            }
            return items;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NotificationManager.prototype, "changed", {
        /**
         * Gets the subject of notification changed event.
         */
        get: function () {
            return this.changedEventSubject;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Initializes the rpc notification call.
     */
    NotificationManager.prototype.initialize = function () {
        var _this = this;
        this.collection = {};
        // notification request from rpc...
        this.rpcNotifySubscription = this.rpc.moduleSubjects(RpcInboundCommands.Notification)
            .subscribe(function (item) {
            _this.notify(item.data).toPromise().then(item.deferred.resolve, item.deferred.reject);
        }, function (error) {
            var message = MsftSme.resourcesStrings().MsftSmeShell.Core.Error.NotificationRpcInitialization.message;
            Logging.log({
                source: 'Notification',
                level: LogLevel.Error,
                message: message.format(Net.getErrorMessage(error))
            });
        });
        this.rpcQuerySubscription = this.rpc.moduleSubjects(RpcInboundCommands.WorkItemFind)
            .subscribe(function (item) {
            item.deferred.resolve(_this.workItemFind(item.data));
        }, function (error) {
            var message = MsftSme.resourcesStrings().MsftSmeShell.Core.Error.NotificationRpcInitialization.message;
            Logging.log({
                source: 'Notification',
                level: LogLevel.Error,
                message: message.format(Net.getErrorMessage(error))
            });
        });
        this.addEvent(NotificationChangeEvent.Initialized);
    };
    /**
     * Stop the notification manager.
     */
    NotificationManager.prototype.uninitialize = function () {
        if (this.rpcNotifySubscription) {
            this.rpcNotifySubscription.unsubscribe();
            this.rpcNotifySubscription = null;
        }
        if (this.rpcQuerySubscription) {
            this.rpcQuerySubscription.unsubscribe();
            this.rpcQuerySubscription = null;
        }
    };
    /**
     * Find a notification.
     *
     * @param id the notification id.
     */
    NotificationManager.prototype.find = function (id) {
        return this.collection[id];
    };
    /**
     * Remove a notification.
     * There is no dismiss API on the gateway, this just remove from the list.
     * Don't remove active notification. Use dismiss api instead, so it doesn't displays to .items property.
     *
     * @param id the session id (notification id).
     * @return boolean true if removed.
     */
    NotificationManager.prototype.remove = function (id) {
        var notification = this.find(id);
        if (notification) {
            delete this.collection[id];
            this.addEvent(NotificationChangeEvent.Remove, notification);
            return true;
        }
        return false;
    };
    /**
     * Dismiss a notification to mark dismiss property.
     *
     * @param id the session id (notification id).
     * @return boolean true if dismissed.
     */
    NotificationManager.prototype.dismiss = function (id) {
        var notification = this.find(id);
        if (notification) {
            notification.dismissed = true;
            this.addEvent(NotificationChangeEvent.Remove, notification);
            return true;
        }
        return false;
    };
    /**
     * Add notification from WorkItem.
     *
     * @param id the notification ID.
     * @param workItem the RPC work item.
     * @param state the initial state.
     * @param object the object from query result.
     * @return notification the notification object.
     */
    NotificationManager.prototype.addFromWorkItem = function (id, workItem, state, object) {
        var notification = Notification.createFromWorkItem(id, workItem, state, object);
        this.collection[id] = notification;
        this.addEvent(NotificationChangeEvent.Add, notification);
    };
    /**
     * Add notification from Recover.
     *
     * @param id the notification ID.
     * @param workItem the RPC work item.
     * @param state the initial state.
     * @param object the object from query result.
     * @return notification the notification object.
     */
    NotificationManager.prototype.addFromRecover = function (recover) {
        var notification = Notification.createFromRecover(recover);
        this.collection[recover.id] = notification;
        this.addEvent(NotificationChangeEvent.Add, notification);
    };
    /**
     * Update notification from socket message.
     *
     * @param id the notification ID.
     * @param message the socket message.
     */
    NotificationManager.prototype.updateFromMessage = function (id, message) {
        var notification = this.find(id);
        if (notification) {
            if (notification.updateFromMessage(message)) {
                this.addEvent(NotificationChangeEvent.Change, notification);
            }
            return true;
        }
        return false;
    };
    /**
     * Add or update client notification.
     *
     * @param clientNotification the client notification object.
     * @param Observable the observable of void.
     */
    NotificationManager.prototype.notify = function (clientNotification) {
        var notification;
        if (clientNotification.type === ClientNotificationType.AlertBar) {
            notification = Notification.createFromClient(clientNotification);
            this.addEvent(NotificationChangeEvent.Instant, notification);
            return Observable.empty();
        }
        notification = this.find(clientNotification.id);
        if (notification) {
            if (notification.updateFromClient(clientNotification)) {
                this.addEvent(NotificationChangeEvent.Change, notification);
            }
            return Observable.empty();
        }
        notification = Notification.createFromClient(clientNotification);
        this.collection[clientNotification.id] = notification;
        this.addEvent(NotificationChangeEvent.Add, notification);
        return Observable.empty();
    };
    /**
     * Find current work item by the typeId/sourceName/nodeName.
     *
     * @param workItemFind the query notification object.
     * @param RpcWorkItemFindResult the result of query.
     */
    NotificationManager.prototype.workItemFind = function (workItemFind) {
        var _this = this;
        var keys = Object.keys(this.collection);
        var results = keys
            .map(function (key) { return ({ key: key, notification: _this.collection[key] }); })
            .filter(function (data) { return data.notification.moduleName === workItemFind.moduleName
            && data.notification.nodeName === workItemFind.nodeName
            && data.notification.typeId === workItemFind.typeId; })
            .map(function (data) { return ({
            id: data.key,
            state: data.notification.state,
            percent: data.notification.percent,
            error: data.notification.error,
            object: data.notification.object
        }); });
        var notificationResult = {
            results: results,
            typeId: workItemFind.typeId,
            moduleName: workItemFind.moduleName,
            nodeName: workItemFind.nodeName
        };
        return notificationResult;
    };
    /**
     * Add an event to report the change of notification data or collection.
     *
     * @param changeEvent the changed event.
     * @param notification the notification object. (optional)
     */
    NotificationManager.prototype.addEvent = function (changeEvent, notification) {
        this.changedEventSubject.next({ notification: notification, changeEvent: changeEvent });
        // no localization.
        Logging.log({
            source: 'Notification',
            level: LogLevel.Verbose,
            message: notification ?
                'addEvent: {0}/{1}\n{2}\n{3}\n{4}'.format(NotificationChangeEvent[changeEvent], NotificationState[notification.state], notification.title, notification.message, notification.link)
                : 'addEvent: {0}'.format(NotificationChangeEvent[changeEvent])
        });
    };
    return NotificationManager;
}());
export { NotificationManager };
//# sourceMappingURL=data:application/json;base64,
import { LogLevel } from '../diagnostics/log-level';
import { Logging } from '../diagnostics/logging';
import { NotificationState } from './notification-state';
import { PowerShellNotification } from './powershell-notification';
/**
 * Notification changed event type.
 */
export var NotificationChangeEvent;
(function (NotificationChangeEvent) {
    NotificationChangeEvent[NotificationChangeEvent["Initialized"] = 0] = "Initialized";
    NotificationChangeEvent[NotificationChangeEvent["InitializationFailed"] = 1] = "InitializationFailed";
    NotificationChangeEvent[NotificationChangeEvent["Add"] = 2] = "Add";
    NotificationChangeEvent[NotificationChangeEvent["Remove"] = 3] = "Remove";
    NotificationChangeEvent[NotificationChangeEvent["Change"] = 4] = "Change";
    NotificationChangeEvent[NotificationChangeEvent["Instant"] = 5] = "Instant";
})(NotificationChangeEvent || (NotificationChangeEvent = {}));
/**
 * Notification object.
 */
var Notification = /** @class */ (function () {
    /**
     * Initializes a new instance of the Notification class.
     *
     * @param id the notification ID.
     */
    function Notification(id) {
        this.id = id;
        /**
         * Marked it's no longer display to include list of notifications.
         */
        this.dismissed = false;
    }
    /**
     * Create notification from WorkItem.
     *
     * @param id the notification ID.
     * @param workItem the RPC work item.
     * @param state the initial state.
     * @param object the object from query result.
     * @return notification the notification object.
     */
    Notification.createFromWorkItem = function (id, workItem, state, object) {
        var notification = new Notification(id);
        notification.workItem = workItem;
        notification.state = state;
        notification.object = object;
        notification.initializeFromWorkItem(workItem);
        return notification;
    };
    /**
     * Create notification from recovered work item.
     *
     * @param recoveredWorkItem the recovered work item.
     * @return notification the notification object.
     */
    Notification.createFromRecover = function (recoveredWorkItem) {
        var notification = new Notification(recoveredWorkItem.id);
        notification.workItem = recoveredWorkItem.metadata;
        if (recoveredWorkItem.failed) {
            notification.state = NotificationState.Error;
            notification.object = {
                errorType: 'WorkItemRecover',
                message: recoveredWorkItem.errorMessage
            };
        }
        else {
            notification.state = NotificationState.InProgress;
            notification.object = {};
        }
        notification.initializeFromWorkItem(recoveredWorkItem.metadata);
        return notification;
    };
    /**
     * Create notification from instant request.
     *
     * @param client the RPC notication request.
     * @return notification the notification object.
     */
    Notification.createFromClient = function (client) {
        var notification = new Notification(client.id);
        notification.locationPathname = window.location.pathname;
        notification.locationSearch = window.location.search;
        notification.initializeFromInstant(client);
        return notification;
    };
    /**
     * Update the notification by socket message from the gateway.
     *
     * @param item the socket message.
     * @return boolean the changed status.
     */
    Notification.prototype.updateFromMessage = function (item) {
        var changed = false;
        if (PowerShellNotification.hasError(item)) {
            Logging.log({
                source: 'Notification',
                level: LogLevel.Debug,
                message: '{0}/Error/{1}'.format(this.id, JSON.stringify(item.message.errors))
            });
            if (this.updateState(NotificationState.Error)) {
                this.changedTimestamp = this.endTimestamp = Date.now();
            }
            this.object = item.message.errors && MsftSme.first(item.message.errors);
            changed = true;
            this.updateMessageAndLink(this.workItem);
            return changed;
        }
        if (PowerShellNotification.hasException(item)) {
            Logging.log({
                source: 'Notification',
                level: LogLevel.Debug,
                message: '{0}/Exception/{1}'.format(this.id, item.message.exception)
            });
            if (this.updateState(NotificationState.Error)) {
                this.changedTimestamp = this.endTimestamp = Date.now();
            }
            this.object = { message: item.message.exception };
            changed = true;
            this.updateMessageAndLink(this.workItem);
            return changed;
        }
        if (PowerShellNotification.hasProgress(item)) {
            Logging.log({
                source: 'Notification',
                level: LogLevel.Debug,
                message: '{0}/Progress/{1}'.format(this.id, JSON.stringify(item.message.progress))
            });
            if (this.updateState(NotificationState.InProgress)) {
                this.changedTimestamp = Date.now();
            }
            this.object = item.message.progress && MsftSme.last(item.message.progress);
            if (this.object && this.object.hasOwnProperty('percent')) {
                this.progressPercent = this.object && this.object.percent;
            }
            if ((this.progressPercent == null || this.progressPercent < 0)
                && this.workItem.progressMessage && this.workItem.progressMessage.indexOf('{{percent}}') >= 0) {
                return false;
            }
            changed = true;
        }
        if (PowerShellNotification.hasData(item)) {
            Logging.log({
                source: 'Notification',
                level: LogLevel.Debug,
                message: '{0}/Data/{1}'.format(this.id, JSON.stringify(item.message.results))
            });
            this.object = item.message.results && MsftSme.last(item.message.results);
            changed = true;
        }
        if (PowerShellNotification.hasCompleted(item)) {
            Logging.log({
                source: 'Notification',
                level: LogLevel.Debug,
                message: '{0}/Completed'.format(this.id)
            });
            if (this.updateState(NotificationState.Success)) {
                this.changedTimestamp = this.endTimestamp = Date.now();
            }
            changed = true;
        }
        this.updateMessageAndLink(this.workItem);
        return changed;
    };
    /**
     * Update the notification by instant notification message from the client.
     *
     * @param client the instant notification object.
     * @param boolean the changed status.
     */
    Notification.prototype.updateFromClient = function (client) {
        var changed = false;
        if (this.title !== client.title) {
            changed = true;
            this.title = client.title;
        }
        if (this.description !== client.description) {
            changed = true;
            this.description = client.description;
        }
        if (this.updateState(client.state)) {
            this.changedTimestamp = Date.now();
            changed = true;
            if (this.state !== NotificationState.InProgress) {
                this.endTimestamp = this.changedTimestamp;
            }
        }
        var link = this.formatLink(client.link);
        if (this.link !== link) {
            changed = true;
            this.link = link;
        }
        if (this.message !== client.message) {
            changed = true;
            this.message = client.message;
        }
        return changed;
    };
    /**
     * Gets the module display name.
     */
    Notification.prototype.getModuleDisplayName = function (moduleName) {
        var global = window;
        var module = MsftSme.find(global.MsftSme.Environment.modules, function (value, index, array) { return value.name === moduleName; });
        if (module) {
            return module.displayName;
        }
        return moduleName;
    };
    /**
     * Update the state.
     *
     * @param state the new state.
     * @return boolean the changed state.
     */
    Notification.prototype.updateState = function (state) {
        if (this.state !== state) {
            this.state = state;
            return true;
        }
        return false;
    };
    Notification.prototype.initializeFromWorkItem = function (item) {
        this.nodeName = item.nodeName;
        this.moduleName = item.sourceName;
        this.moduleDisplayName = this.getModuleDisplayName(this.moduleName);
        this.startTimestamp = item.timestamp;
        this.changedTimestamp = item.timestamp;
        this.title = item.title;
        this.description = item.description;
        this.typeId = item.typeId;
        this.updateMessageAndLink(item);
    };
    Notification.prototype.updateMessageAndLink = function (item) {
        var template;
        switch (this.state) {
            case NotificationState.Started:
                template = item.startedMessage;
                this.link = this.formatLink(null);
                break;
            case NotificationState.Error:
                this.endTimestamp = item.timestamp;
                template = item.errorMessage;
                this.link = this.formatLink(item.errorLink);
                break;
            case NotificationState.InProgress:
                template = item.progressMessage;
                this.link = this.formatLink(null);
                break;
            case NotificationState.Success:
                this.endTimestamp = item.timestamp;
                template = item.successMessage;
                this.link = this.formatLink(item.successLink);
                break;
            default:
                var message = MsftSme.resourcesStrings().MsftSmeShell.Core.Error.NotificationUnsupportedState.message;
                throw new Error(message);
        }
        this.message = this.formatMessage(template);
    };
    Notification.prototype.initializeFromInstant = function (client) {
        this.nodeName = client.nodeName;
        this.moduleName = client.sourceName;
        this.moduleDisplayName = this.getModuleDisplayName(this.moduleName);
        this.startTimestamp = client.timestamp;
        this.changedTimestamp = client.timestamp;
        this.title = client.title;
        this.description = client.description;
        this.state = client.state;
        this.link = this.formatLink(client.link);
        this.message = client.message;
        if (this.state !== NotificationState.Started && this.state !== NotificationState.InProgress) {
            this.endTimestamp = client.timestamp;
        }
    };
    Notification.prototype.formatLink = function (relative) {
        // tslint:disable-next-line:max-line-length
        // href example:
        //  "http://localhost:4400/apps/msft.sme.server-manager!servers/tools/msft.sme.module-seed!main?connection=sme-full1.redmond.corp.microsoft.com"
        var pathname = this.locationPathname || this.workItem && this.workItem.locationPathname;
        var search = this.locationSearch || this.workItem && this.workItem.locationSearch || '';
        if (relative && pathname) {
            return MsftSme.trimEnd(pathname, '/') + '/' + MsftSme.trimStart(relative, '/') + search;
        }
        return pathname + search;
    };
    Notification.prototype.formatMessage = function (template) {
        var parameters = this.findParameters(template);
        var message = this.replaceParameters(template, parameters);
        return message;
    };
    Notification.prototype.findParameters = function (template) {
        var results = [];
        if (!template) {
            return results;
        }
        var segments = template.split('{{');
        for (var _i = 0, segments_1 = segments; _i < segments_1.length; _i++) {
            var seg = segments_1[_i];
            var index = seg.indexOf('}}');
            if (index > 0) {
                results.push(seg.substr(0, index));
            }
        }
        return results;
    };
    Notification.prototype.replaceParameters = function (message, parameters) {
        for (var _i = 0, parameters_1 = parameters; _i < parameters_1.length; _i++) {
            var param = parameters_1[_i];
            if (param === 'percent') {
                if (typeof this.progressPercent === 'number') {
                    message = message.replaceAll('{{percent}}', '' + this.progressPercent);
                }
            }
            else if (param === 'objectName') {
                if (this.workItem && this.workItem.objectName) {
                    message = message.replaceAll('{{objectName}}', this.workItem.objectName);
                }
            }
            else {
                if (this.object) {
                    var segments = param.split('.');
                    var target = this.object;
                    for (var _a = 0, segments_2 = segments; _a < segments_2.length; _a++) {
                        var seg = segments_2[_a];
                        if (target[seg]) {
                            target = target[seg];
                        }
                        else {
                            target = null;
                            break;
                        }
                    }
                    if (target) {
                        message = message.replaceAll('{{' + param + '}}', '' + target);
                    }
                }
            }
        }
        return message;
    };
    return Notification;
}());
export { Notification };
//# sourceMappingURL=data:application/json;base64,
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
import { Observable, Subject } from 'rxjs';
import { Net } from '../data/net';
import { LogLevel } from '../diagnostics/log-level';
import { Logging } from '../diagnostics/logging';
import { NotificationState } from './notification-state';
import { SocketMessageFlags, SocketSignalR } from './socket-signalr';
/**
 * The PowerShell script based notification class.
 */
var PowerShellNotification = /** @class */ (function (_super) {
    __extends(PowerShellNotification, _super);
    /* tslint:enable:no-bitwise */
    /**
     * Initializes a new instance of the GatewaySocket class.
     */
    function PowerShellNotification(gatewayUrl) {
        return _super.call(this, gatewayUrl, PowerShellNotification.connectionUrl, PowerShellNotification.proxyName) || this;
    }
    /* tslint:disable:no-bitwise */
    PowerShellNotification.hasConnectionError = function (item) {
        return (item.type & SocketMessageFlags.ConnectionError) === SocketMessageFlags.ConnectionError;
    };
    PowerShellNotification.hasError = function (item) {
        return (item.type & SocketMessageFlags.Error) === SocketMessageFlags.Error;
    };
    PowerShellNotification.hasException = function (item) {
        return (item.type & SocketMessageFlags.Exception) === SocketMessageFlags.Exception;
    };
    PowerShellNotification.hasCompleted = function (item) {
        return (item.type & SocketMessageFlags.Completed) === SocketMessageFlags.Completed;
    };
    PowerShellNotification.hasData = function (item) {
        return (item.type & SocketMessageFlags.Data) === SocketMessageFlags.Data;
    };
    PowerShellNotification.hasProgress = function (item) {
        return (item.type & SocketMessageFlags.Progress) === SocketMessageFlags.Progress;
    };
    Object.defineProperty(PowerShellNotification.prototype, "subject", {
        /**
         * Gets the subject observable to get notifications.
         */
        get: function () {
            return this.subjectInternal;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Submit PowerShell command as a work item.
     *
     * @param nodeConnection The node connection.
     * @param command The PowerShell command.
     * @param metadata The meta data.
     * @param nodeRequestOptions The node request options.
     * @param create The callback to create new notification.
     * @return Observable the observable of initial powershell query result.
     */
    PowerShellNotification.prototype.submit = function (nodeConnection, nodeName, command, metadata, nodeRequestOptions, create) {
        var _this = this;
        // For a non-powershell long running task (eg: azure site recovery setup): 
        // The 'command' parameter is null.
        // The metadata.id is the workitem id generated by a gateway api. 
        if (!command && metadata.id) {
            var result = {
                id: metadata.id,
                completed: false,
                error: null,
                state: NotificationState.Started
            };
            if (create) {
                create(result);
            }
            this.subscribeSession(metadata.id);
            return Observable.of({ id: metadata.id, state: NotificationState.Started, error: null });
        }
        var data = Net.createPropertiesJSONString(__assign({}, command, { metadata: metadata }));
        return nodeConnection.post(nodeName, Net.powerShellApiInvokeCommand, data, nodeRequestOptions)
            .catch(function (error, obj) {
            var result = {
                id: MsftSme.newGuid(),
                completed: true,
                error: { message: Net.getErrorMessage(error) },
                state: NotificationState.Error
            };
            if (create) {
                create(result);
            }
            return Observable.of({ id: result.id, state: result.state, error: result.error });
        })
            .map(function (response) {
            if (response.id) {
                // sending back the client for the error.
                return response;
            }
            var completed = response.completed === 'True';
            var error = null;
            if (response.errors && response.errors.length > 0) {
                var errorObj = MsftSme.first(response.errors);
                error = { message: errorObj.message };
            }
            var result = {
                id: response.sessionId,
                completed: completed,
                error: error,
                state: completed ?
                    (response.errors ? NotificationState.Error : NotificationState.Success)
                    : NotificationState.Started
            };
            if (create) {
                create(result);
            }
            if (!result.completed) {
                _this.subscribeSession(response.sessionId);
            }
            _this.processData(response);
            // sending back the client.
            return { id: result.id, state: result.state, error: error };
        });
    };
    /**
     * Initialize to subscribe the web socket connection.
     */
    PowerShellNotification.prototype.initialize = function () {
        if (this.subjectInternal) {
            this.subjectInternal.complete();
        }
        this.subjectInternal = new Subject();
        this.subscribe(PowerShellNotification.notify);
        return this.start();
    };
    /**
     * Uninitialize to subscribe the web socket connection.
     */
    PowerShellNotification.prototype.uninitialize = function () {
        if (this.subjectInternal) {
            this.subjectInternal.complete();
            this.subjectInternal = null;
        }
        this.unsubscribe(PowerShellNotification.notify);
        this.stop();
    };
    /**
     * Invoke subscribe method to a  session.
     *
     * @param id the session ID of work item.
     * @return Promise the promise object.
     */
    PowerShellNotification.prototype.subscribeSession = function (id) {
        return this.invoke(PowerShellNotification.subscribe, id);
    };
    /**
     * The client handler to process message.
     *
     * @param notification the message notification.
     */
    PowerShellNotification.prototype.clientHandler = function (notification) {
        this.subjectInternal.next(notification);
    };
    /**
     * Process the message.
     *
     * @param messages the messages.
     */
    PowerShellNotification.prototype.processMessage = function (message) {
        if (!message) {
            var message2 = MsftSme.resourcesStrings().MsftSmeShell.Core.Error.NotificationEmptyMessage.message;
            Logging.log({ source: 'socket', level: LogLevel.Warning, message: message2 });
            return;
        }
        var data = JSON.parse(message);
        this.processData(data);
    };
    PowerShellNotification.prototype.processData = function (data) {
        /* tslint:disable:no-bitwise */
        var type = SocketMessageFlags.None;
        if (data.results && data.results.length > 0) {
            type |= SocketMessageFlags.Data;
        }
        if (data.progress && data.progress.length > 0) {
            type |= SocketMessageFlags.Progress;
        }
        if (data.errors && data.errors.length > 0) {
            type |= SocketMessageFlags.Error;
        }
        if (data.exception) {
            type |= SocketMessageFlags.Exception;
        }
        if (data.completed === 'True') {
            type |= SocketMessageFlags.Completed;
        }
        /* tslint:enable:no-bitwise */
        this.clientHandler({ type: type, message: data });
    };
    PowerShellNotification.connectionUrl = '/api/notifications';
    PowerShellNotification.proxyName = 'notificationHub';
    PowerShellNotification.notify = 'notify';
    PowerShellNotification.subscribe = 'Subscribe';
    return PowerShellNotification;
}(SocketSignalR));
export { PowerShellNotification };
//# sourceMappingURL=data:application/json;base64,
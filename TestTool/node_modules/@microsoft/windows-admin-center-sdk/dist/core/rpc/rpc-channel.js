var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
import { NativeDeferred } from '../data/native-q';
import { Net } from '../data/net';
import { LogLevel } from '../diagnostics/log-level';
import { Logging } from '../diagnostics/logging';
import { EnvironmentModule } from '../manifest/environment-modules';
import { RpcBase, RpcInboundCommands, RpcMessagePacketType, RpcOutboundCommands, RpcSeekMode, RpcType } from './rpc-base';
import { RpcOutbound } from './rpc-outbound';
/**
 * RpcChannel class.
 * - Both Shell and Module creates one instance to present itself.
 */
var RpcChannel = /** @class */ (function (_super) {
    __extends(RpcChannel, _super);
    /**
     * Initiates a new instance of the RpcChannel class.
     *
     * @param name the public name of itself.
     * @param origin the origin url of itself.
     * @param signature the signature of the gateway running instance.
     */
    function RpcChannel(name, origin, signature) {
        var _this = _super.call(this, null, name, origin, RpcType.Channel) || this;
        // RpcShell/RpcModule collection.
        _this.rpcCollection = new Map();
        _this.sequence = 0;
        _this.deferredQueue = new Map();
        _this.global = window;
        _this.signature = signature;
        _this.rpcMode = name === EnvironmentModule.nameOfShell ? 0 /* Shell */ : 1 /* Module */;
        if (_this.rpcMode === 0 /* Shell */) {
            _this.depth = 0;
        }
        else {
            _this.depth = null;
        }
        return _this;
    }
    Object.defineProperty(RpcChannel.prototype, "rpcInboundHandlers", {
        /**
         * Sets the rpc inbound handlers to use when creating for seek command.
         */
        set: function (handlers) {
            this.inboundHandlers = handlers;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Register Inbound/Outbound.
     *
     * @param rpcObject the RpcInbound/RpcOutbound class instance.
     * @param type the type of rpc object.
     */
    RpcChannel.prototype.registerRpc = function (rpcObject, type) {
        if (rpcObject.type !== type) {
            var message = MsftSme.resourcesStrings().MsftSmeShell.Core.Error.RpcTypeNoMatch.message;
            throw new Error(message.format('registerRpc'));
        }
        this.addToCollection(rpcObject);
    };
    /**
     * Unregister module with subNams
     *
     * @param name the name of module.
     * @param subName the subName.
     * @return RpcBase the rpc object.
     */
    RpcChannel.prototype.unregisterRpc = function (name, subName, type) {
        // unregister it by both origin and name.
        var rpcObject = this.getFromCollection(name, subName, true);
        if (rpcObject.type !== type) {
            var message = MsftSme.resourcesStrings().MsftSmeShell.Core.Error.RpcTypeNoMatch.message;
            throw new Error(message.format('unregisterRpc'));
        }
        if (rpcObject) {
            this.removeFromCollection(rpcObject);
            return rpcObject;
        }
        else {
            var message = MsftSme.resourcesStrings().MsftSmeShell.Core.Error.RpcNotFoundModule.message;
            throw new Error(message.format(name, subName));
        }
    };
    /**
     * Get Rpc object by module with subName for Inbound.
     *
     * @param name the name of module.
     * @param subName the subName.
     * @param type the type of rpc object.
     * @return RpcBase the rpc object.
     */
    RpcChannel.prototype.getRpc = function (name, subName, type) {
        var rpcObject = this.getFromCollection(name, subName, true);
        if (rpcObject && rpcObject.type !== type) {
            var message = MsftSme.resourcesStrings().MsftSmeShell.Core.Error.RpcTypeNoMatch.message;
            throw new Error(message.format('getRpc'));
        }
        // return null if it cannot find.
        return rpcObject;
    };
    /**
     * Get all Rpc objects for the specified type.
     */
    RpcChannel.prototype.getAllRpc = function (type) {
        var results = [];
        this.rpcCollection.forEach(function (subCollection, key, map) {
            subCollection.forEach(function (rpc, index, array) {
                if (rpc.type === type) {
                    results.push(rpc);
                }
            });
        });
        return results;
    };
    /**
     * Get RpcInbound/RpcOutbound object for module name and module sub name.
     * If it doesn't configure subName yet, it returns it so the channel set it up.
     *
     * @param name the module name.
     * @param subName the sub name of the iframe object.
     * @return RpcBase the matched Rpc object.
     */
    RpcChannel.prototype.getFromCollection = function (name, subName, exact) {
        var subCollection = this.rpcCollection.get(name);
        if (subCollection == null) {
            return null;
        }
        return subCollection.find(function (value) { return (!exact && value.subName == null) || value.subName === subName; });
    };
    RpcChannel.prototype.removeFromCollection = function (rpcObject) {
        var subCollection = this.rpcCollection.get(rpcObject.name);
        if (subCollection == null) {
            return null;
        }
        var results = MsftSme.remove(subCollection, rpcObject);
        if (subCollection.length === 0) {
            // remove the entry if it's empty.
            this.rpcCollection.delete(rpcObject.name);
        }
        if (results && results.length === 1) {
            return results[0];
        }
        return null;
    };
    RpcChannel.prototype.addToCollection = function (rpcObject) {
        var subCollection = this.rpcCollection.get(rpcObject.name);
        if (subCollection == null) {
            subCollection = [rpcObject];
            this.rpcCollection.set(rpcObject.name, subCollection);
        }
        else {
            subCollection.push(rpcObject);
        }
    };
    /**
     * Start the message listener.
     */
    RpcChannel.prototype.start = function () {
        var _this = this;
        this.listnerFunction = function (ev) { return _this.listener(ev); };
        this.global.addEventListener('message', this.listnerFunction);
    };
    /**
     * Stop the message listener.
     */
    RpcChannel.prototype.stop = function () {
        this.global.removeEventListener('message', this.listnerFunction);
    };
    /**
     * Post the message with retry delay.
     *
     * @param target the RpcToModule or RpcToShell object.
     * @param message the message packet.
     * @param count the retry count.
     * @param delay the interval milliseconds.
     * @return Promise<T> the promise object.
     */
    RpcChannel.prototype.retryPost = function (target, message, count, delay) {
        var _this = this;
        if (target == null || target.window == null) {
            var message2 = MsftSme.resourcesStrings().MsftSmeShell.Core.Error.RpcTargetWindowNotConfigured.message;
            throw new Error(message2);
        }
        var deferred = new NativeDeferred();
        var lastSequence = this.sequence;
        this.deferredQueue[this.sequence] = deferred;
        message.srcName = this.name;
        message.srcSubName = this.subName;
        message.srcDepth = this.depth;
        message.destName = target.name;
        message.destSubName = target.subName;
        message.signature = this.signature;
        message.sequence = this.sequence;
        message.type = RpcMessagePacketType.Request; // post
        this.sequence++;
        var header = "Retry " + RpcMessagePacketType[message.type] + " \"" + message.command + "\" to " + message.destName + "!" + message.destSubName;
        this.debugLogRpcMessage(message, header);
        target.window.postMessage(message, target.origin);
        var timer = setInterval(function () {
            if (deferred.isPending) {
                if (--count < 0) {
                    var message2 = MsftSme.resourcesStrings().MsftSmeShell.Core.Error.RpcExpiredRetry.message;
                    clearInterval(timer);
                    deferred.reject(message2.format(message.command));
                    if (_this.deferredQueue[lastSequence]) {
                        delete _this.deferredQueue[lastSequence];
                    }
                    return;
                }
                target.window.postMessage(message, target.origin);
                return;
            }
            clearInterval(timer);
        }, delay);
        return deferred.promise;
    };
    /**
     * Post the request message.
     *
     * @param target the RpcToModule or RpcToShell object.
     * @param message the message packet.
     * @param timeout the timeout. (10 seconds at default)
     * @return Promise<TResult> the promise object.
     */
    RpcChannel.prototype.post = function (target, message, timeout) {
        var _this = this;
        var ignoreTimeout = false;
        if (timeout === -1) {
            ignoreTimeout = true;
            timeout = null;
        }
        timeout = timeout || 10 * 1000; // 10 seconds
        if (target == null || target.window == null) {
            var message2 = MsftSme.resourcesStrings().MsftSmeShell.Core.Error.RpcTargetWindowNotConfigured.message;
            throw new Error(message2);
        }
        var deferred = new NativeDeferred();
        var lastSequence = this.sequence;
        this.deferredQueue[this.sequence] = deferred;
        message.srcName = this.name;
        message.srcSubName = this.subName;
        message.srcDepth = this.depth;
        message.destName = target.name;
        message.destSubName = target.subName;
        message.signature = this.signature;
        message.sequence = this.sequence;
        message.type = RpcMessagePacketType.Request; // post
        this.sequence++;
        var header = RpcMessagePacketType[message.type] + "  \"" + message.command + "\" to " + message.destName + "!" + message.destSubName;
        this.debugLogRpcMessage(message, header);
        target.window.postMessage(message, target.origin);
        setTimeout(function () {
            if (deferred.isPending) {
                if (ignoreTimeout) {
                    deferred.resolve();
                }
                else {
                    var message2 = MsftSme.resourcesStrings().MsftSmeShell.Core.Error.RpcExpired.message;
                    deferred.reject(message2.format(_this.name, _this.subName, target.name, target.subName, message.command, message.type));
                }
            }
            if (_this.deferredQueue[lastSequence]) {
                delete _this.deferredQueue[lastSequence];
            }
        }, timeout);
        return deferred.promise;
    };
    /**
     * Validate the target window if exist by sending null packet.
     *
     * @param target the target Rpc object.
     * @return boolean if false, it remove the target from the list.
     */
    RpcChannel.prototype.validate = function (target) {
        try {
            target.window.postMessage({ validate: 'validate' }, target.origin);
            return true;
        }
        catch (error) {
            this.removeFromCollection(target);
            return false;
        }
    };
    /**
     * Log the debug message.
     * @param message the message object.
     * @param header the header string (used for the log group header).
     */
    RpcChannel.prototype.debugLog = function (message, header) {
        Logging.log({ source: 'rpc', message: message, level: LogLevel.Debug, consoleGroupHeader: header });
    };
    /**
     * Process and log and rpc message.
     * @param message the rpc message packet
     * @param header the header string (used for the log group header).
     */
    RpcChannel.prototype.debugLogRpcMessage = function (message, header) {
        var logMessage = __assign({}, message);
        if (message.command === RpcOutboundCommands[RpcOutboundCommands.Init]) {
            // Why is this hidden?
            logMessage.data = '(hidden...)';
        }
        this.debugLog(logMessage, header);
    };
    /**
     * The listen handler.
     *
     * @param messageEvent the Rpc message event.
     */
    RpcChannel.prototype.listener = function (messageEvent) {
        var _this = this;
        if (!messageEvent.data || !messageEvent.data.command) {
            // ignore null event.
            this.debugLog('listener: {0}'.format(messageEvent));
            return;
        }
        var message = messageEvent.data;
        var header = RpcMessagePacketType[message.type] + " \"" + message.command + "\" from " + message.srcName + "!" + message.srcSubName;
        this.debugLogRpcMessage(message, header);
        if (message.signature !== this.signature) {
            var message2 = MsftSme.resourcesStrings().MsftSmeShell.Core.Error.RpcSignatureError.message;
            throw new Error(message2);
        }
        // accept shell seek query
        if (message.destName !== this.name) {
            var message2 = MsftSme.resourcesStrings().MsftSmeShell.Core.Error.RpcUnexpectedDestination.message;
            throw new Error(message2.format(message.destName));
        }
        var target = this.getFromCollection(message.srcName, message.srcSubName, false);
        if (!target) {
            // unknown request was received.
            if (message.type === RpcMessagePacketType.Request
                && message.command === RpcOutboundCommands[RpcOutboundCommands.Ping]) {
                target = this.getFromCollection('*', '*', true);
                if (target) {
                    // keep remote window object to respond.
                    // current channel is child, and target is parent.
                    // target could be shell or a parent module.
                    // remove the rpcInbound object once and re-register back again with new name.
                    this.removeFromCollection(target);
                    target.name = message.srcName;
                    target.subName = message.srcSubName;
                    target.window = messageEvent.source;
                    target.origin = messageEvent.origin;
                    target.depth = message.srcDepth;
                    this.subName = message.destSubName;
                    this.depth = message.srcDepth + 1;
                    this.registerRpc(target, RpcType.Inbound);
                }
            }
        }
        // Seek to create or delete RpcInbound on the shell to access a child call.
        if (message.command === RpcInboundCommands[RpcInboundCommands.Seek]
            && this.name === EnvironmentModule.nameOfShell
            && message.type === RpcMessagePacketType.Request) {
            var seekData = message.data;
            if (seekData.mode === RpcSeekMode.Create) {
                if (target) {
                    // update window object.
                    target.subName = message.srcSubName;
                    target.window = messageEvent.source;
                    target.depth = message.srcDepth;
                }
                else {
                    target = new RpcOutbound(this, message.srcName, messageEvent.origin);
                    target.subName = message.srcSubName;
                    target.window = messageEvent.source;
                    target.depth = message.srcDepth;
                    target.registerAll(this.inboundHandlers);
                    this.registerRpc(target, RpcType.Outbound);
                }
            }
            else if (seekData.mode === RpcSeekMode.Delete && target) {
                this.removeFromCollection(target);
            }
        }
        if (!target) {
            // ignore older/unknown response packet. current channel no longer watching it for response, but treat new request as an error.
            if (message.type === RpcMessagePacketType.Request) {
                var message2 = MsftSme.resourcesStrings().MsftSmeShell.Core.Error.RpcUnexpectedEvent.message;
                throw new Error(message2.format(message.srcName, message.srcSubName));
            }
            return;
        }
        var deferred;
        switch (message.type) {
            case RpcMessagePacketType.Request:// post: processing response/error.
                target.handle(message.command, message.srcName, message.srcSubName, message.data).then(function (data) {
                    message.data = data;
                    return _this.response(target, message);
                }, function (error) {
                    var logMessage = '';
                    var logStack = '';
                    if (typeof error === 'string') {
                        message.data = error;
                        logMessage = error;
                    }
                    else {
                        message.data = {};
                        if (error && error.xhr) {
                            var netError = Net.getErrorMessage(error);
                            message.data.message = netError;
                            logMessage = netError;
                        }
                        else if (error.message) {
                            message.data.message = error.message;
                            logMessage = error.message;
                        }
                        if (error.stack) {
                            message.data.stack = error.stack;
                            logStack = error.stack;
                        }
                    }
                    Logging.log({
                        source: 'RpcChannel',
                        level: LogLevel.Error,
                        message: logMessage,
                        stack: logStack
                    });
                    // telemetry with predefined view/action name.
                    Logging.trace({
                        view: 'sme-generic-error',
                        instance: 'rpc-channel',
                        action: 'exceptionLog',
                        data: { stack: '' }
                    });
                    return _this.error(target, message);
                });
                break;
            case RpcMessagePacketType.Response:// response: received result with success.
                deferred = this.deferredQueue[message.sequence];
                if (!deferred) {
                    if (message.command === RpcOutboundCommands[RpcOutboundCommands.Ping]) {
                        // ping can be sent multiple times and deferred could be settled already.
                        break;
                    }
                    var message2 = MsftSme.resourcesStrings().MsftSmeShell.Core.Error.RpcUnexpectedSequence.message;
                    throw new Error(message2);
                }
                delete this.deferredQueue[message.sequence];
                deferred.resolve(message.data);
                break;
            case RpcMessagePacketType.Error:// error: received result with error.
                deferred = this.deferredQueue[message.sequence];
                if (!deferred) {
                    var message2 = MsftSme.resourcesStrings().MsftSmeShell.Core.Error.RpcUnexpectedErrorSequence.message;
                    throw new Error(message2);
                }
                delete this.deferredQueue[message.sequence];
                deferred.reject(message.data);
                break;
        }
    };
    /**
     * Sending response message.
     *
     * @param target the RpcToModule or RpcToShell object.
     * @param message the Rpc message packet.
     */
    RpcChannel.prototype.response = function (target, message) {
        if (target == null || target.window == null) {
            var message2 = MsftSme.resourcesStrings().MsftSmeShell.Core.Error.RpcTargetWindowNotConfigured.message;
            throw new Error(message2);
        }
        message.srcName = this.name;
        message.srcSubName = this.subName;
        message.srcDepth = this.depth;
        message.destName = target.name;
        message.destSubName = target.subName;
        message.signature = this.signature;
        message.type = RpcMessagePacketType.Response; // response
        target.window.postMessage(message, target.origin);
    };
    /**
     * Sending error message.
     *
     * @param target the RpcToModule or RpcToShell object.
     * @param message the Rpc message packet.
     */
    RpcChannel.prototype.error = function (target, message) {
        if (target == null || target.window == null) {
            var message2 = MsftSme.resourcesStrings().MsftSmeShell.Core.Error.RpcTargetWindowNotConfigured.message;
            throw new Error(message2);
        }
        message.srcName = this.name;
        message.srcSubName = this.subName;
        message.srcDepth = this.depth;
        message.destName = target.name;
        message.destSubName = target.subName;
        message.signature = this.signature;
        message.type = RpcMessagePacketType.Error; // error
        target.window.postMessage(message, target.origin);
    };
    return RpcChannel;
}(RpcBase));
export { RpcChannel };
//# sourceMappingURL=data:application/json;base64,
import { EnvironmentModule } from '../manifest/environment-modules';
import { RpcBase, RpcInboundCommands, RpcOutboundCommands, RpcType } from './rpc-base';
import { RpcChannel } from './rpc-channel';
import { RpcInbound } from './rpc-inbound';
import { RpcOutbound } from './rpc-outbound';
/**
 * The status of RPC remote that sent the message
 */
export var RpcRemoteState;
(function (RpcRemoteState) {
    RpcRemoteState[RpcRemoteState["Active"] = 0] = "Active";
    RpcRemoteState[RpcRemoteState["Inactive"] = 1] = "Inactive";
})(RpcRemoteState || (RpcRemoteState = {}));
/**
 * RpcManager class.
 */
var RpcManager = /** @class */ (function () {
    /**
     * Initializes a new instance of the RpcManager class.
     */
    function RpcManager() {
        var inboundHandlers = {};
        var outboundHandlers = {};
        var inboundMap = RpcBase.inboundHandlerMap;
        var outboundMap = RpcBase.outboundHandlerMap;
        var inboundCommands = Object.keys(RpcInboundCommands);
        var outboundCommands = Object.keys(RpcOutboundCommands);
        inboundCommands.forEach(function (command, index, array) {
            inboundHandlers[inboundMap[RpcInboundCommands[command]]] = function (data) { return Promise.resolve(); };
        });
        outboundCommands.forEach(function (command, index, array) {
            outboundHandlers[outboundMap[RpcOutboundCommands[command]]] = function (data) { return Promise.resolve(); };
        });
        this.rpcInboundHandlers = inboundHandlers;
        this.rpcOutboundHandlers = outboundHandlers;
    }
    Object.defineProperty(RpcManager.prototype, "rpcInbound", {
        /**
         * Gets last rpc to-shell.
         */
        get: function () {
            return this.currentRpcInbound;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RpcManager.prototype, "rpcOutbound", {
        /**
         * Gets last rpc to-module.
         */
        get: function () {
            return this.currentRpcOutbound;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RpcManager.prototype, "rpcReportDataInbound", {
        /**
         * Gets rpc inbound for report data.
         */
        get: function () {
            return this.parentRpcInbound || this.currentRpcInbound;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Initialize the rpc communication channel based on manifest.
     *
     * @param inboundHandlers the set of rpc inbound handlers.
     * @param outboundHandlers the set of rpc outbound handlers.
     */
    RpcManager.prototype.init = function (inboundHandlers, outboundHandlers) {
        // extend module and shell handlers
        if (inboundHandlers) {
            this.rpcInboundHandlers = Object.assign(this.rpcInboundHandlers, inboundHandlers);
        }
        if (outboundHandlers) {
            this.rpcOutboundHandlers = Object.assign(this.rpcOutboundHandlers, outboundHandlers);
        }
        // read environment and create rpc self instance.
        var global = window;
        var _a = global.MsftSme.Environment, name = _a.name, origin = _a.origin, signature = _a.signature;
        this.rpcChannel = new RpcChannel(name, origin, signature);
        this.rpcChannel.subName = '##';
        this.rpcChannel.rpcInboundHandlers = this.rpcInboundHandlers;
        // for module configure shell access.
        this.initRpcInbound();
        // start rpc response.
        this.rpcChannel.start();
    };
    /**
     * Configure Rpc as parent frame.
     */
    RpcManager.prototype.initRpcInbound = function () {
        // accept initial ping query for any parent.
        var rpcInbound = new RpcInbound(this.rpcChannel, '*', '*');
        rpcInbound.subName = '*';
        this.rpcChannel.registerRpc(rpcInbound, RpcType.Inbound);
        this.currentRpcInbound = rpcInbound;
        rpcInbound.registerAll(this.rpcOutboundHandlers);
    };
    /**
     * Connect Rpc module.
     *
     * @param name the name of module.
     * @param path the entry point to open for this module.
     * @param iframe the iframe object.
     * @param primary the primary iframe to support report data response.
     * @return Promise<string> The promise with the sub name of outbound connection.
     */
    RpcManager.prototype.connectRpcOutbound = function (name, path, iFrame, primary) {
        // making all instance to be unique at any order of connection.
        var subName = '{0}#{1}+{2}'.format(path, Date.now(), RpcManager.serial++);
        var rpcOutbound = this.createRpcOutbound(name, subName, iFrame);
        rpcOutbound.registerAll(this.rpcInboundHandlers);
        if (primary) {
            this.currentRpcOutbound = rpcOutbound;
        }
        // pinging to establish connection to the module.
        return rpcOutbound.ping({ name: 'ping' }).then(function (x) { return subName; });
    };
    /**
     * Reconnect Rpc module.
     *
     * @param name the name of module.
     * @param subName the sub name.
     * @param primary the primary iframe to support report data response.
     * @return RpcOutbound the rpc outbound object.
     */
    RpcManager.prototype.reconnectRpcOutbound = function (name, subName, primary) {
        var rpcOutbound = this.rpcChannel.getRpc(name, subName, RpcType.Outbound);
        if (primary) {
            this.currentRpcOutbound = rpcOutbound;
        }
        return rpcOutbound;
    };
    /**
     * Disconnect Rpc module.
     */
    RpcManager.prototype.disconnectRpcOutbound = function () {
        this.currentRpcOutbound = null;
    };
    /**
     * Remove RpcOutbound.
     *
     * @param module the environment module to remove.
     */
    RpcManager.prototype.removeRpcOutbound = function (name, subName) {
        var rpcOutbound = this.rpcChannel.unregisterRpc(name, subName, RpcType.Outbound);
        if (this.currentRpcOutbound === rpcOutbound) {
            this.disconnectRpcOutbound();
        }
        return rpcOutbound;
    };
    /**
     * Get current live outbound rpc.
     *  - these set could be changed if it's handled async.
     */
    RpcManager.prototype.getCurrentRpcOutbound = function () {
        return this.rpcChannel.getAllRpc(RpcType.Outbound);
    };
    /**
     * Get the remote status of a given module name
     *
     * @param {string} name The name of the RPC remote endpoint to get the status from
     * @param {string} subName The sub name of the remote iframe instance.
     * @returns {RpcRemoteState} The state of the remote. Active if it's the current channel
     * for communication or Inactive if the channel is not the currently active channel in this
     * manager
     */
    RpcManager.prototype.getSourceStatus = function (name, subName) {
        if (!this.currentRpcOutbound
            || this.currentRpcOutbound.name !== name
            || this.currentRpcOutbound.subName !== subName) {
            return {
                status: RpcRemoteState.Inactive,
                subName: subName,
                entryPoint: null
            };
        }
        var segments = subName.split('#');
        return {
            status: RpcRemoteState.Active,
            subName: subName,
            entryPoint: segments && segments.length > 0 ? segments[0] : ''
        };
    };
    /**
     * Seek shell or parent frame.
     *
     * @param Promise<any> the promise object.
     */
    RpcManager.prototype.seekShell = function (mode) {
        var _this = this;
        if (this.currentRpcInbound.name === EnvironmentModule.nameOfShell) {
            return Promise.resolve({ name: this.currentRpcInbound.name, subName: this.currentRpcInbound.subName });
        }
        var depth = this.rpcChannel.depth;
        var current = window.self;
        while (--depth >= 0 && current !== current.parent) {
            current = current.parent;
        }
        var rpcInbound = new RpcInbound(this.rpcChannel, EnvironmentModule.nameOfShell, '*');
        rpcInbound.window = current;
        rpcInbound.subName = '##';
        rpcInbound.depth = 0;
        this.rpcChannel.registerRpc(rpcInbound, RpcType.Inbound);
        rpcInbound.registerAll(this.rpcOutboundHandlers);
        this.currentRpcInbound = rpcInbound;
        return rpcInbound.seek({ mode: mode }).then(function (result) {
            _this.parentRpcInbound = _this.currentRpcInbound;
            _this.currentRpcInbound = rpcInbound;
            return result;
        }, function (error) {
            _this.rpcChannel.unregisterRpc(rpcInbound.name, rpcInbound.subName, RpcType.Inbound);
            return error;
        });
    };
    /**
     * Create and add RpcOutbound object.
     *
     * @param name the name of module.
     * @param subName the sub name.
     * @param module the environment module to remove.
     */
    RpcManager.prototype.createRpcOutbound = function (name, subName, iFrame) {
        var global = window;
        var modules = global.MsftSme.Environment.modules;
        var module = modules.find(function (value, index, array) { return value.name === name; });
        if (!module) {
            var message = MsftSme.resourcesStrings().MsftSmeShell.Core.Error.RpcFailedFindModuleManifest.message;
            throw new Error(message.format(name));
        }
        var rpc = new RpcOutbound(this.rpcChannel, module.name, module.origin);
        rpc.subName = subName;
        rpc.window = iFrame;
        this.rpcChannel.registerRpc(rpc, RpcType.Outbound);
        return rpc;
    };
    RpcManager.serial = 0;
    return RpcManager;
}());
export { RpcManager };
//# sourceMappingURL=data:application/json;base64,
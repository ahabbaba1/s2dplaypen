import { Observable } from 'rxjs/Observable';
import { Cookie } from './cookie';
import { headerConstants } from './http-constants';
/**
 * Retry options for an http request
 */
var HttpRetryOptions = /** @class */ (function () {
    function HttpRetryOptions() {
        this.maxRetry = 0;
        this.handlers = [];
    }
    return HttpRetryOptions;
}());
export { HttpRetryOptions };
/**
 * The Http observable based class.
 */
var Http = /** @class */ (function () {
    function Http() {
        /**
         * The default retry options.
         */
        this.defaultRetryOptions = new HttpRetryOptions();
    }
    /**
     * The common request method.
     * Adds default responseType, contentType, Accept values if they are not already included in the request
     *
     * @param request the request options.
     * @param options the retry options.
     */
    Http.prototype.request = function (request, retryOptions) {
        if (!request) {
            request = {};
        }
        if (!retryOptions) {
            retryOptions = this.defaultRetryOptions;
        }
        if (!request.headers) {
            request.headers = {};
        }
        if (!request.responseType) {
            request.responseType = 'json';
        }
        if (request.headers && !request.headers['Content-Type']) {
            request.headers['Content-Type'] = 'application/json; charset=utf-8';
        }
        if (request.headers && !request.headers['Accept']) {
            request.headers['Accept'] = 'application/json, text/plain, */*';
        }
        if (request.headers && !request.headers[headerConstants.CROSS_SITE_REQUEST_FORGERY_TOKEN]) {
            var token = Cookie.getCrossSiteRequestForgeryToken();
            if (token) {
                request.headers[headerConstants.CROSS_SITE_REQUEST_FORGERY_TOKEN] = token;
            }
        }
        if (retryOptions.maxRetry > 0 && retryOptions.handlers && retryOptions.handlers.length > 0) {
            return this.requestWithHandlers(request, retryOptions);
        }
        return Observable.ajax(request);
    };
    /**
     * Performs a request without modification.
     * If the result is an error, we will retry with the handlers in options
     *
     * @param request the request options.
     * @param options the retry options.
     * @param count the current iteration of the retry cycle.
     */
    Http.prototype.requestWithHandlers = function (request, retryOptions, count) {
        if (count === void 0) { count = 0; }
        return Observable.ajax(request)
            .catch(function (error, caught) {
            // original request is replaced with latest instance. it must take current error request.
            var caughtRequest = caught.source.request;
            if (++count > retryOptions.maxRetry) {
                return Observable.throw(error);
            }
            var handler = retryOptions.handlers.find(function (handler2) { return handler2.canHandle(error.status, error); });
            if (handler) {
                if (handler.handleNoRetry) {
                    return handler
                        .handleNoRetry(error.status, caughtRequest, error)
                        .flatMap(function () { return Observable.throw(error); });
                }
                else if (handler.handle) {
                    return handler.handle(error.status, caughtRequest, error)
                        .catch(function (handlerError) {
                        // if the handler throws, return the original error with an inserted property for the handler error    
                        error['handlerError'] = handlerError;
                        return Observable.throw(error);
                    })
                        .switchMap(function (nextRequest) { return Observable.ajax(caughtRequest); });
                }
            }
            return Observable.throw(error);
        });
    };
    /**
     * Performs a request with `get` http method.
     *
     * @param url the url.
     * @param request the request options.
     * @param options the retry options.
     */
    Http.prototype.get = function (url, request, options) {
        request = request ? request : {};
        request.url = url;
        request.method = Http.methodGet;
        return this.request(request, options);
    };
    /**
     * Performs a request with `post` http method.
     *
     * @param url the url.
     * @param body the body content.
     * @param request the request options.
     * @param options the retry options.
     */
    Http.prototype.post = function (url, body, request, options) {
        request = request ? request : {};
        request.url = url;
        request.method = Http.methodPost;
        request.body = body;
        return this.request(request, options);
    };
    /**
     * Performs a request with `put` http method.
     *
     * @param url the url.
     * @param body the body content.
     * @param request the request options.
     * @param options the retry options.
     */
    Http.prototype.put = function (url, body, request, options) {
        request = request ? request : {};
        request.url = url;
        request.method = Http.methodPut;
        request.body = body;
        return this.request(request, options);
    };
    /**
     * Performs a request with `delete` http method.
     *
     * @param url the url.
     * @param request the request options.
     * @param options the retry options.
     */
    Http.prototype.delete = function (url, request, options) {
        request = request ? request : {};
        request.url = url;
        request.method = Http.methodDelete;
        return this.request(request, options);
    };
    /**
     * Performs a request with `patch` http method.
     *
     * @param url the url.
     * @param body the body content.
     * @param request the request options.
     * @param options the retry options.
     */
    Http.prototype.patch = function (url, body, request, options) {
        request = request ? request : {};
        request.url = url;
        request.method = Http.methodPatch;
        request.body = body;
        return this.request(request, options);
    };
    /**
     * Performs a request with `head` http method.
     *
     * @param url the url.
     * @param request the request options.
     * @param options the retry options.
     */
    Http.prototype.head = function (url, request, options) {
        request = request ? request : {};
        request.url = url;
        request.method = Http.methodHead;
        return this.request(request, options);
    };
    /**
     * Performs a request with `options` http method.
     *
     * @param url the url.
     * @param request the request options.
     * @param options the retry options.
     */
    Http.prototype.options = function (url, request, options) {
        request = request ? request : {};
        request.url = url;
        request.method = Http.methodOptions;
        return this.request(request, options);
    };
    /**
     * Performs a request with 'get' http method with cache control.
     *
     * @param url the uri for GET call.
     * @return {Observable<any>} the observable for GET result data.
     */
    Http.prototype.getNoCache = function (url, noCache) {
        if (noCache === void 0) { noCache = true; }
        var publish = Observable.create(function (observer) {
            var request = new XMLHttpRequest();
            var handler = function () {
                if (request.readyState === XMLHttpRequest.DONE) {
                    if (request.status === 200) {
                        try {
                            observer.next({
                                status: request.status,
                                response: JSON.parse(request.response)
                            });
                            observer.complete();
                        }
                        catch (e) {
                            observer.error(e);
                        }
                    }
                    else {
                        observer.error(request.statusText);
                    }
                }
            };
            request.open('Get', url);
            if (noCache) {
                request.setRequestHeader('Cache-control', 'no-cache');
            }
            request.onreadystatechange = handler;
            request.send();
        });
        return publish;
    };
    /**
     * Performs a request with 'delete' http method without waiting for the response.
     *
     * @param url the uri for GET call.
     */
    Http.prototype.deleteQuick = function (url, headers) {
        var request = new XMLHttpRequest();
        request.open('Delete', url);
        request.responseType = 'json';
        request.setRequestHeader('Accept', 'application/json, text/plain, */*');
        request.setRequestHeader('Content-Type', 'application/json; charset=utf-8');
        request.setRequestHeader('Cache-control', 'no-cache');
        var xsrf = false;
        if (headers) {
            for (var key in headers) {
                if (key) {
                    request.setRequestHeader(key, headers[key]);
                    if (key.toLowerCase() === headerConstants.CROSS_SITE_REQUEST_FORGERY_TOKEN.toLowerCase()) {
                        xsrf = true;
                    }
                }
            }
        }
        var token = Cookie.getCrossSiteRequestForgeryToken();
        if (token && !xsrf) {
            request.setRequestHeader(headerConstants.CROSS_SITE_REQUEST_FORGERY_TOKEN, token);
        }
        // not watching any response.
        request.send();
    };
    /**
     * The ajax GET method.
     */
    Http.methodGet = 'GET';
    /**
     * The ajax POST method.
     */
    Http.methodPost = 'POST';
    /**
     * The ajax PUT method.
     */
    Http.methodPut = 'PUT';
    /**
     * The ajax DELETE method.
     */
    Http.methodDelete = 'DELETE';
    /**
     * The ajax PATCH method.
     */
    Http.methodPatch = 'PATCH';
    /**
     * The ajax HEAD method.
     */
    Http.methodHead = 'HEAD';
    /**
     * The ajax OPTIONS method.
     */
    Http.methodOptions = 'OPTIONS';
    return Http;
}());
export { Http };
//# sourceMappingURL=data:application/json;base64,
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
import { Observable } from 'rxjs';
import { LogLevel } from '../diagnostics/log-level';
import { Logging } from '../diagnostics/logging';
import { PowerShell } from './powershell';
import { WebsocketStreamConnectionState, WebsocketStreamDataRequestState, WebsocketStreamDataState, WebsocketStreamProcessor } from './websocket-stream';
/**
 * PowerShell Processor interface.
 */
var PowerShellProcessor = /** @class */ (function (_super) {
    __extends(PowerShellProcessor, _super);
    function PowerShellProcessor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return PowerShellProcessor;
}(WebsocketStreamProcessor));
/**
 * The PowerShell stream class.
 */
var PowerShellStream = /** @class */ (function () {
    /**
     * Initializes a new instance of the PowerShellStream class.
     *
     * @param websocketStream the websocket stream object.
     * @param authorizationManager the authorization manager object.
     */
    function PowerShellStream(websocketStream, authorizationManager) {
        this.websocketStream = websocketStream;
        this.authorizationManager = authorizationManager;
        this.processors = new Map();
        this.queues = new Map();
        this.strings = MsftSme.resourcesStrings().MsftSmeShell.Core.WebsocketStream.PowerShellStream;
        websocketStream.registerProcessor('SME-PowerShell', this);
    }
    /**
     * PowerShell script run.
     *
     * @param nodeName the node name.
     * @param script the script to run.
     * @param options the options for this request.
     * @return Observable<PowerShellResult> the query observable.
     */
    PowerShellStream.prototype.run = function (nodeName, commandOrScript, options) {
        var command = PowerShell.getPowerShellCommand(commandOrScript);
        return this.createRequest(nodeName, command, PowerShell.newEndpointOptions(options));
    };
    /**
     * Cancel active powershell script.
     * Result response comes back to the original query to end.
     *
     * @param nodeName the node name.
     * @param id the id of original request specified as options.queryId.
     */
    PowerShellStream.prototype.cancel = function (nodeName, id, options) {
        var target = this.getTarget(nodeName, PowerShell.newEndpointOptions(options));
        var requestState = WebsocketStreamDataRequestState.Cancel;
        var request = { id: id, target: target, requestState: requestState, script: null };
        // remove from queue if not submitted yet.
        var queue = this.queues.get(target.nodeName);
        if (queue) {
            var pendingRequest = queue.pendingRequests.find(function (entry) { return entry.id === id; });
            if (pendingRequest) {
                queue.pendingRequests.remove(pendingRequest);
                queue.outstandingCount--;
                var processor = this.processors.get(id);
                this.processors.delete(id);
                processor.complete();
                return;
            }
        }
        this.websocketStream.sendNext('SME-PowerShell', request);
    };
    /**
     * Reset data for connection cleanup.
     */
    PowerShellStream.prototype.reset = function () {
        var _this = this;
        Logging.log({ level: LogLevel.Warning, message: this.strings.ResetError.message, source: 'PowerShellStream' });
        var processors = [];
        this.processors.forEach(function (value, key, map) { return processors.push(value); });
        this.processors.clear();
        processors.forEach(function (processor, key, map) {
            processor.error(new Error(_this.strings.ResetError.message));
        });
    };
    /**
     * Process the socket message.
     *
     * @param message the socket message.
     */
    PowerShellStream.prototype.process = function (message) {
        if (!message) {
            throw new Error(this.strings.NoContentError.message);
        }
        var processor = this.processors.get(message.id);
        if (!processor) {
            Logging.log({ level: LogLevel.Warning, message: this.strings.UnexpectedReceivedError.message, source: 'PowerShellStream' });
            return;
        }
        switch (message.state) {
            case WebsocketStreamDataState.Data:
                this.operationNext(processor, message.response);
                break;
            case WebsocketStreamDataState.Completed:
                this.operationComplete(processor, message.response);
                this.operationEnd(message.id);
                break;
            case WebsocketStreamDataState.Error:
                this.operationError(processor, { xhr: message });
                this.operationEnd(message.id);
                break;
            case WebsocketStreamDataState.Noop:
                break;
        }
    };
    /**
     * Gets the JEA powershell endpoint, if it exists
     *
     * @param nodeName The node name
     */
    PowerShellStream.prototype.getJeaEndpoint = function (nodeName) {
        return this.authorizationManager.getJeaEndpoint(nodeName);
    };
    PowerShellStream.prototype.operationNext = function (processor, response) {
        var partial = processor.options && processor.options.partial;
        // buffering result.
        if (!partial) {
            if (!processor.response) {
                processor.response = response;
            }
            else {
                if (response.errors) {
                    if (!processor.response.errors) {
                        processor.response.errors = response.errors;
                    }
                    else {
                        response.errors.forEach(function (value) { return processor.response.errors.push(value); });
                    }
                }
                if (response.progress) {
                    if (!processor.response.progress) {
                        processor.response.progress = response.progress;
                    }
                    else {
                        response.progress.forEach(function (value) { return processor.response.progress.push(value); });
                    }
                }
                if (response.results) {
                    if (!processor.response.results) {
                        processor.response.results = response.results;
                    }
                    else {
                        response.results.forEach(function (value) { return processor.response.results.push(value); });
                    }
                }
            }
        }
        else {
            processor.next(response);
        }
        return !partial;
    };
    PowerShellStream.prototype.operationComplete = function (processor, response) {
        if (this.operationNext(processor, response)) {
            processor.next(processor.response);
        }
        processor.complete();
    };
    PowerShellStream.prototype.operationError = function (processor, error) {
        processor.error(error);
    };
    PowerShellStream.prototype.operationEnd = function (id) {
        var processor = this.processors.get(id);
        this.processors.delete(id);
        var queue = this.queues.get(processor.target.nodeName);
        if (--queue.outstandingCount === 0) {
            this.queues.delete(processor.target.nodeName);
        }
        if (queue.pendingRequests.length > 0) {
            // if there is queued item, then send request.
            var request = queue.pendingRequests.shift();
            this.websocketStream.sendNext('SME-PowerShell', request);
        }
    };
    PowerShellStream.prototype.createRequest = function (nodeName, command, options) {
        var _this = this;
        // publish object is created two ways.
        // 1) socket is connected so submit the request immediately with simple observable.
        //   (if-block and this is the most of cases.)
        // 2) socket is not connected so wait for the socket to ready and submit request with
        //    complex observable. Initial connect and re-connection takes this observable.
        //   (else-block and this is a few cases.)
        var publish;
        var endpoint = this.authorizationManager.getJeaEndpoint(nodeName);
        var newOptions = __assign({}, (options || {}));
        if (endpoint) {
            newOptions.powerShellEndpoint = endpoint;
        }
        if (this.websocketStream.socketStateRaw === WebsocketStreamConnectionState.Connected) {
            publish = this.createRequestSimple(nodeName, command, newOptions);
        }
        else {
            publish = this.websocketStream.socketState
                .filter(function (state) { return state === WebsocketStreamConnectionState.Connected
                || state === WebsocketStreamConnectionState.Failed
                || state === WebsocketStreamConnectionState.NotConfigured; })
                .take(1)
                .flatMap(function (state) {
                if (state === WebsocketStreamConnectionState.Connected) {
                    return _this.createRequestSimple(nodeName, command, newOptions);
                }
                return Observable.throw(new Error(_this.strings.ConnectionError.message));
            });
        }
        return publish
            .catch(function (error, caught) {
            // retry if reset connection of socket was observed.
            if (error && error.message === _this.strings.ResetError.message) {
                return _this.createRequest(nodeName, command, newOptions);
            }
            return Observable.throw(error);
        });
    };
    PowerShellStream.prototype.createRequestSimple = function (nodeName, command, options) {
        var _this = this;
        return Observable.create(function (observer) {
            var target = _this.getTarget(nodeName, options);
            var requestState = WebsocketStreamDataRequestState.Normal;
            var id = _this.sendRequest(observer, target, requestState, command, options);
            return function () {
                var processor = _this.processors.get(id);
                if (processor) {
                    processor.end = true;
                    if (!processor.closed && !processor.closing) {
                        _this.cancel(processor.target.nodeName, id);
                    }
                }
            };
        });
    };
    PowerShellStream.prototype.sendRequest = function (observer, target, requestState, command, options) {
        var id = (options && options.queryId) || MsftSme.getUniqueId();
        var request = __assign({
            id: id,
            target: target,
            requestState: requestState
        }, command);
        var processor = new PowerShellProcessor(observer, target, options);
        var queue = this.queues.get(target.nodeName);
        this.processors.set(id, processor);
        // During a send request, if caller provides 'options.close' as true,
        // we shouldn't manage the request via a queue and on Gateway, we should create a 
        // new, one time use Runspace, which is disposed after use, instead of using one from the pool. 
        // As currently this is not handled on Gateway, just ignore the 'options.close' for now.
        /*
        if (options && options.close) {
            // disposing session.
            this.websocketStream.sendNext('SME-PowerShell', request);
            return id;
        }
        */
        if (++queue.outstandingCount > PowerShellStream.maxRunPerNode) {
            queue.pendingRequests.push(request);
            return id;
        }
        this.websocketStream.sendNext('SME-PowerShell', request);
        return id;
    };
    PowerShellStream.prototype.getTarget = function (nodeName, options) {
        if (!this.queues.has(nodeName)) {
            var queue = { outstandingCount: 0, pendingRequests: [] };
            this.queues.set(nodeName, queue);
        }
        return this.websocketStream.getTarget(this.authorizationManager, nodeName, options.powerShellEndpoint);
    };
    PowerShellStream.maxRunPerNode = 5;
    return PowerShellStream;
}());
export { PowerShellStream };
//# sourceMappingURL=data:application/json;base64,
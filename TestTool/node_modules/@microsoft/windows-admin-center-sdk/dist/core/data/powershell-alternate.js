var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
import { NodeCimOutput } from './node-connection';
import { PowerShell } from './powershell';
import { PowerShellBatch } from './powershell-batch';
/**
 * The PowerShell Alternate processing class.
 */
var PowerShellAlternate = /** @class */ (function () {
    function PowerShellAlternate() {
    }
    /**
     * Create alternate PowerShell query for CIM query.
     *
     * @param nodeConnection The node connection object.
     * @param nodeName The node name.
     * @param options The node request options.
     * @return Observable<T> if there is no alternate available, return null.
     */
    PowerShellAlternate.create = function (nodeConnection, nodeName, options) {
        if (options == null || options.powerShell == null || options.powerShellContext == null) {
            return null;
        }
        var endpoint = nodeConnection.getJeaEndpoint(nodeName);
        if (endpoint == null && options.powerShellEndpoint == null && !MsftSme.self().Init.powerShellEndpoint) {
            return null;
        }
        var powerShell = PowerShellAlternate.findOrCreateNullPowerShell(nodeName, nodeConnection, options);
        var command = PowerShell.createCommand(options.powerShell, options.powerShellContext.parameters);
        return powerShell.run(command)
            .map(function (results) { return PowerShellAlternate.mapPowerShellToCim(options.powerShellContext.cimOutput, results); });
    };
    /**
     * Create alternate PowerShell Stream query for CIM query.
     *
     * @param nodeConnection The node connection object.
     * @param nodeName The node name.
     * @param options The node request options.
     * @return Observable<T> if there is no alternate available, return null.
     */
    PowerShellAlternate.createStream = function (powerShellStream, nodeName, options) {
        if (options == null || options.powerShell == null || options.powerShellContext == null) {
            return null;
        }
        var endpoint = powerShellStream.getJeaEndpoint(nodeName);
        if (endpoint == null && options.powerShellEndpoint == null && !MsftSme.self().Init.powerShellEndpoint) {
            return null;
        }
        if (!options.powerShellEndpoint) {
            options.powerShellEndpoint = endpoint;
        }
        var command = PowerShell.createCommand(options.powerShell, options.powerShellContext.parameters);
        return powerShellStream.run(nodeName, command, options)
            .map(function (results) { return PowerShellAlternate.mapPowerShellToCim(options.powerShellContext.cimOutput, results); });
    };
    /**
     * @deprecated
     * (not supported)
     * Create alternate PowerShell Batch query for CIM batch query.
     *
     * @param nodeConnection the node connection object
     * @param batchConnection The batch connection object.
     * @param nodeNames The list of node names.
     * @param options The node request options.
     * @return Observable<BatchResponseItem[]> if there is no alternate available, return null.
     */
    PowerShellAlternate.createBatch = function (nodeConnection, batchConnection, nodeNames, options) {
        if (options == null || options.powerShell == null || options.powerShellContext == null) {
            return null;
        }
        // TODO: for now we assume all endpoints match. Need to work on a more general solution.
        var node = nodeNames && nodeNames.length > 0 && nodeNames[0];
        var endpoint = nodeConnection.getJeaEndpoint(node);
        if (endpoint == null && options.powerShellEndpoint == null && !MsftSme.self().Init.powerShellEndpoint) {
            return null;
        }
        if (!options.powerShellEndpoint) {
            options.powerShellEndpoint = endpoint;
        }
        var batchSession = new PowerShellBatch(nodeNames, batchConnection, null, null, options);
        var command = PowerShell.createCommand(options.powerShell, options.powerShellContext.parameters);
        return batchSession.runSingleCommand(command, options)
            .map(function (items) { return items.map(function (item) {
            return ({
                sequenceNumber: item.sequenceNumber,
                nodeName: item.nodeName,
                response: {
                    response: PowerShellAlternate.mapPowerShellToCim(options.powerShellContext.cimOutput, item.properties),
                    status: item.status
                }
            });
        }); });
    };
    /**
     * Reserve a session for all alternate CIM non-batch query.
     *
     * @param nodeName the node name.
     * @param nodeConnection the node connection object.
     * @param options the node request options.
     */
    PowerShellAlternate.reserveSession = function (appContext, nodeName, options) {
        return appContext.powerShell.createSession(nodeName, PowerShellAlternate.cimAlternateKey, options);
    };
    /**
     * Dispose the session for alternate CIM non-batch query.
     *
     * @param session the session object.
     */
    PowerShellAlternate.disposeSession = function (session) {
        session.dispose();
    };
    /**
     * Find existing powershell session with the fixed key or create null session.
     *
     * @param nodeName the node name.
     * @param nodeConnection the node connection object.
     * @param options the node request options.
     */
    PowerShellAlternate.findOrCreateNullPowerShell = function (nodeName, nodeConnection, options) {
        var powerShell = PowerShell.find(nodeName, PowerShellAlternate.cimAlternateKey);
        if (powerShell == null) {
            powerShell = PowerShell.create(nodeName, nodeConnection, null, null, options);
        }
        return powerShell;
    };
    /**
     * Convert the PowerShell results to Cim expected format.
     *
     * @param outputType The output data type.
     * @param data
     */
    PowerShellAlternate.mapPowerShellToCim = function (outputType, data) {
        switch (outputType) {
            case NodeCimOutput.Single:
                // single instance result.
                return {
                    properties: data.results && data.results[0] && PowerShellAlternate.cleanCimInstance(data.results[0])
                };
            case NodeCimOutput.Multiple:
                // multiple instances result.
                return {
                    value: data.results.map(function (instance) {
                        return {
                            properties: PowerShellAlternate.cleanCimInstance(instance)
                        };
                    })
                };
            case NodeCimOutput.Result:
                return PowerShellAlternate.adjustCimResults(data);
            case NodeCimOutput.Query:
                // query results without properties.
                return {
                    value: data.results.map(function (instance) {
                        return PowerShellAlternate.cleanCimInstance(instance);
                    })
                };
        }
    };
    /**
     * Adjust PowerShell CIM results data.
     *
     * @param data The result data.
     */
    PowerShellAlternate.adjustCimResults = function (data) {
        var response = {};
        // invoke method results with free structured but index 0.
        if (!data.results) {
            return response;
        }
        if (data.results.length === 0) {
            return response;
        }
        //
        // Packed the same parameterName object into single array.
        //
        // parameterName
        // itemType: 16: Instance
        // itemValue: Instance Data
        // psComputerName
        //
        var results = [];
        for (var _i = 0, _a = data.results; _i < _a.length; _i++) {
            var item = _a[_i];
            if (item['psComputerName'] !== undefined) {
                delete item['psComputerName'];
            }
            if (item.hasOwnProperty('returnValue')) {
                response = __assign({}, response, item);
            }
            if (item.hasOwnProperty('outParameters')) {
                for (var _b = 0, _c = item.outParameters; _b < _c.length; _b++) {
                    var parameter = _c[_b];
                    response[parameter.name] = parameter.value;
                }
            }
            // aggregate the same parameter name object into single array.
            if (item.hasOwnProperty('itemValue')) {
                if (item.itemValue.length > 0) {
                    var array = item.itemValue;
                    array.forEach(function (value) { return results.push(PowerShellAlternate.cleanCimInstance(value)); });
                }
                else {
                    results.push(PowerShellAlternate.cleanCimInstance(item.itemValue));
                }
            }
        }
        if (results.length > 0) {
            response.results = results;
        }
        return response;
    };
    /**
     * Clean the cim instance object to remove schema/qualifier data.
     *
     * @param data The instance object from PowerShell.
     */
    PowerShellAlternate.cleanCimInstance = function (data) {
        if (!data) {
            return data;
        }
        if (data['psComputerName'] !== undefined) {
            delete data['psComputerName'];
        }
        if (data['cimClass']) {
            delete data['cimClass'];
        }
        if (data['cimInstanceProperties']) {
            delete data['cimInstanceProperties'];
        }
        if (data['cimSystemProperties']) {
            var props = data['cimSystemProperties'];
            data['_Namespace'] = props['namespace'];
            data['_ServerName'] = props['serverName'];
            data['_ClassName'] = props['className'];
            data['_Path'] = props['path'];
            delete data['cimSystemProperties'];
        }
        return data;
    };
    /**
     * The key of powershell session.
     */
    PowerShellAlternate.cimAlternateKey = 'cimAlt';
    return PowerShellAlternate;
}());
export { PowerShellAlternate };
//# sourceMappingURL=data:application/json;base64,
import { Observable, ReplaySubject } from 'rxjs';
import { LogLevel } from '../diagnostics/log-level';
import { Logging } from '../diagnostics/logging';
import { headerConstants } from './http-constants';
import { Net } from './net';
/**
 * The state of Websocket connection.
 */
export var WebsocketStreamConnectionState;
(function (WebsocketStreamConnectionState) {
    /**
     * Initializing.
     */
    WebsocketStreamConnectionState[WebsocketStreamConnectionState["Initializing"] = 1] = "Initializing";
    /**
     * Connected.
     */
    WebsocketStreamConnectionState[WebsocketStreamConnectionState["Connected"] = 2] = "Connected";
    /**
     * Disconnected.
     */
    WebsocketStreamConnectionState[WebsocketStreamConnectionState["Disconnected"] = 3] = "Disconnected";
    /**
     * Failed.
     */
    WebsocketStreamConnectionState[WebsocketStreamConnectionState["Failed"] = 4] = "Failed";
    /**
     * Not configured.
     */
    WebsocketStreamConnectionState[WebsocketStreamConnectionState["NotConfigured"] = 5] = "NotConfigured";
})(WebsocketStreamConnectionState || (WebsocketStreamConnectionState = {}));
/**
 * The state of Websocket stream packet.
 */
export var WebsocketStreamState;
(function (WebsocketStreamState) {
    /**
     * Empty packet.
     */
    WebsocketStreamState[WebsocketStreamState["Noop"] = 1] = "Noop";
    /**
     * Data packet.
     */
    WebsocketStreamState[WebsocketStreamState["Data"] = 2] = "Data";
    /**
     * Error packet. (reserved for socket level error communication if any)
     */
    WebsocketStreamState[WebsocketStreamState["Error"] = 3] = "Error";
})(WebsocketStreamState || (WebsocketStreamState = {}));
/**
 * The request state of data such as CIM and PowerShell stream.
 */
export var WebsocketStreamDataRequestState;
(function (WebsocketStreamDataRequestState) {
    /**
     * empty packet.
     */
    WebsocketStreamDataRequestState[WebsocketStreamDataRequestState["Noop"] = 1] = "Noop";
    /**
     * Data packet.
     */
    WebsocketStreamDataRequestState[WebsocketStreamDataRequestState["Normal"] = 2] = "Normal";
    /**
     * Cancel
     */
    WebsocketStreamDataRequestState[WebsocketStreamDataRequestState["Cancel"] = 3] = "Cancel";
})(WebsocketStreamDataRequestState || (WebsocketStreamDataRequestState = {}));
/**
 * The response state of data such as CIM and PowerShell stream.
 */
export var WebsocketStreamDataState;
(function (WebsocketStreamDataState) {
    /**
     * empty packet.
     */
    WebsocketStreamDataState[WebsocketStreamDataState["Noop"] = 1] = "Noop";
    /**
     * Completed packet.
     */
    WebsocketStreamDataState[WebsocketStreamDataState["Completed"] = 2] = "Completed";
    /**
     * Data packet.
     */
    WebsocketStreamDataState[WebsocketStreamDataState["Data"] = 3] = "Data";
    /**
     * Error
     */
    WebsocketStreamDataState[WebsocketStreamDataState["Error"] = 4] = "Error";
    /**
     * Cancelled
     */
    WebsocketStreamDataState[WebsocketStreamDataState["Cancelled"] = 5] = "Cancelled";
})(WebsocketStreamDataState || (WebsocketStreamDataState = {}));
/**
 * Websocket Stream Processor class.
 */
var WebsocketStreamProcessor = /** @class */ (function () {
    /**
     * Initializes a new instance of the CimProcessor class.
     * @param observer Observer to send back result to caller.
     * @param target Stream Target object.
     * @param options Options for Cim stream query.
     */
    function WebsocketStreamProcessor(observer, target, options) {
        this.observer = observer;
        this.target = target;
        this.options = options;
    }
    /**
     * Push the result to the observer.
     * @param result the result of TData.
     */
    WebsocketStreamProcessor.prototype.next = function (result) {
        if (this.observer && !this.observer.closed) {
            this.observer.next(result);
        }
        this.sendOnce = true;
    };
    /**
     * Complete the observer.
     */
    WebsocketStreamProcessor.prototype.complete = function () {
        this.closing = true;
        if (this.observer && !this.observer.closed) {
            this.observer.complete();
        }
        this.closed = true;
    };
    /**
     * Error the observer.
     */
    WebsocketStreamProcessor.prototype.error = function (error) {
        this.closing = true;
        if (this.observer && !this.observer.closed) {
            this.observer.error(error);
        }
        this.closed = true;
    };
    return WebsocketStreamProcessor;
}());
export { WebsocketStreamProcessor };
/**
 * The Websocket stream class.
 */
var WebsocketStream = /** @class */ (function () {
    /**
     * Initializes a new instance of the WebsocketStream class.
     *
     * @param gateway the gateway connection object.
     */
    function WebsocketStream(gateway) {
        var _this = this;
        this.gateway = gateway;
        this.socketStateRaw = WebsocketStreamConnectionState.Disconnected;
        this.socketState = new ReplaySubject();
        this.connectionRetries = WebsocketStream.maxConnectionRetries;
        this.handlers = new Map();
        this.strings = MsftSme.resourcesStrings().MsftSmeShell.Core.WebsocketStream;
        // initialize only after gateway data was populated via RPC.
        this.gateway.initialize().subscribe(function () {
            // enable websocket stream only when the module added the options at initialization.
            var global = window;
            if (global.MsftSme.Init.websocket) {
                _this.initialize(true);
            }
            else {
                _this.socketState.next(WebsocketStreamConnectionState.NotConfigured);
                _this.socketStateRaw = WebsocketStreamConnectionState.NotConfigured;
            }
        });
    }
    /**
     * Register the processor for the stream name.
     * @param name the name of stream.
     * @param handler the handler to process packet.
     */
    WebsocketStream.prototype.registerProcessor = function (name, handler) {
        this.handlers.set(name, handler);
    };
    /**
     * Send next stream data to websocket.
     *
     * @param streamName the stream name.
     * @param data the data to send.
     * @param options the options.
     */
    WebsocketStream.prototype.sendNext = function (streamName, data, options) {
        if (!this.socket) {
            throw new Error('WebsocketStream: socket is not ready.');
        }
        var packet = { streamName: streamName, state: WebsocketStreamState.Data, data: data, options: options };
        this.debugLog('Socket sending data.', packet);
        this.socket.next(JSON.stringify(packet));
    };
    /**
     * Send error stream data to websocket.
     *
     * @param streamName the stream name.
     * @param error the error to send.
     * @param options the options.
     */
    WebsocketStream.prototype.sendError = function (streamName, error, options) {
        if (!this.socket) {
            throw new Error('WebsocketStream: socket is not ready.');
        }
        var packet = { streamName: streamName, state: WebsocketStreamState.Error, data: error, options: options };
        this.debugLog('Socket sending error.', packet);
        this.socket.next(JSON.stringify(packet));
    };
    /**
     * Get target data.
     * @param authorizationManager the authorization manager.
     * @param nodeName the node Name
     * @param endpoint the endpoint data.
     * @return  WebsocketStreamDataTarget target data.
     */
    WebsocketStream.prototype.getTarget = function (authorizationManager, nodeName, endpoint) {
        var headers = authorizationManager.createTokenHeaders(nodeName);
        if (endpoint) {
            headers[headerConstants.POWERSHELL_ENDPOINT] = endpoint;
        }
        var target = { nodeName: nodeName, headers: headers };
        return target;
    };
    WebsocketStream.prototype.initialize = function (firstTime) {
        var _this = this;
        // get gateway socket url.
        var gatewaySocketUrl = this.gateway.gatewayUrl.replace('http', 'ws');
        var moduleName = window.MsftSme.Init.moduleName;
        var url = Net.streamSocket.format(gatewaySocketUrl, moduleName);
        this.debugLog('Socket initializing...: {0}'.format(url));
        if (!firstTime) {
            this.handlers.forEach(function (value) { return value.reset(); });
        }
        // create stream socket.
        this.socketState.next(WebsocketStreamConnectionState.Initializing);
        this.socket = Observable.webSocket({
            url: url,
            openObserver: {
                next: function (openEvent) {
                    _this.debugLog('Socket opened: {0}'.format(url));
                    _this.socketState.next(WebsocketStreamConnectionState.Connected);
                    _this.socketStateRaw = WebsocketStreamConnectionState.Connected;
                    _this.connectionRetries = WebsocketStream.maxConnectionRetries;
                }
            },
            closeObserver: {
                next: function (closeEvent) {
                    _this.debugLog('Socket closed: {0}'.format(url));
                    _this.socketState.next(WebsocketStreamConnectionState.Disconnected);
                    _this.socketStateRaw = WebsocketStreamConnectionState.Disconnected;
                    _this.reconnect(new Error(_this.strings.Common.ConnectionRetiesError.message));
                }
            }
        });
        this.socket.subscribe(function (received) {
            var message = received;
            _this.debugLog('Socket received data.', message);
            if (message.state === WebsocketStreamState.Data) {
                var handler = _this.handlers.get(message.streamName);
                if (handler) {
                    handler.process(message.data);
                }
                else {
                    throw new Error(_this.strings.Common.HandlerRegistrationError.message.format(message.streamName));
                }
            }
            else if (message.state === WebsocketStreamState.Error) {
                var errorMessage = _this.strings.Common.CommunicationError.message;
                if (message.data && message.data.error && message.data.error.message) {
                    errorMessage = _this.strings.Common.CommunicationErrorDetail.message.format(message.data.error.message);
                }
                Logging.log({ level: LogLevel.Error, source: 'WebsocketStream', message: errorMessage });
                _this.reconnect(new Error(errorMessage));
            }
        }, function (error) { return _this.reconnect(error); });
    };
    WebsocketStream.prototype.dispose = function () {
        if (this.socket) {
            this.socket.unsubscribe();
            this.socket = null;
        }
    };
    WebsocketStream.prototype.reconnect = function (error) {
        var _this = this;
        if (this.connectionRetries-- > 0) {
            this.dispose();
            setTimeout(function () { return _this.initialize(false); }, WebsocketStream.reconnectWaitTime);
        }
        else {
            this.socketState.next(WebsocketStreamConnectionState.Failed);
            throw error;
        }
    };
    WebsocketStream.prototype.debugLog = function (message, object) {
        Logging.log({ level: LogLevel.Debug, source: 'WebsocketStream', message: message });
        if (object) {
            Logging.debug(object);
        }
    };
    WebsocketStream.maxConnectionRetries = 10;
    WebsocketStream.reconnectWaitTime = 500;
    return WebsocketStream;
}());
export { WebsocketStream };
//# sourceMappingURL=data:application/json;base64,
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
import { Observable } from 'rxjs';
import { Cim } from './cim';
import { headerConstants, HttpStatusCode } from './http-constants';
import { NodeCimOutput } from './node-connection';
import { PowerShellAlternate } from './powershell-alternate';
/**
 * The CIM Connection class.
 */
var CimConnection = /** @class */ (function () {
    /**
     * Initializes a new instance of the CimService class.
     *
     * @param nodeConnection the NodeConnection class instance injected.
     * @param batchConnection the BatchConnection class instance injected.
     */
    function CimConnection(nodeConnection, batchConnection) {
        this.nodeConnection = nodeConnection;
        this.batchConnection = batchConnection;
    }
    /**
     * CIM GET MultipleInstances
     *
     * @param nodeName the name of the node to use for this request
     * @param namespace the cim namespace.
     * @param className the class name.
     * @param options the options for this request.
     * @return Observable<any> the query observable.
     */
    CimConnection.prototype.getInstanceMultiple = function (nodeName, namespace, className, options) {
        var _this = this;
        this.setPowerShellParameters(options, NodeCimOutput.Multiple);
        var observable = PowerShellAlternate.create(this.nodeConnection, nodeName, options);
        if (observable) {
            return observable;
        }
        var cimUrl = Cim.cimUrlMultipleInstances(namespace, className);
        return this.nodeConnection.get(nodeName, cimUrl, options)
            .catch(function (error) { return _this.handleJeaFallback(error, nodeName, options); });
    };
    /**
     * CIM GET SingleInstance
     *
     * @param nodeName the name of the node to use for this request
     * @param namespace the cim namespace.
     * @param className the class name.
     * @param keyProperties the key properties object.
     * @param options the options for this request.
     * @return Observable<any> the query observable.
     */
    CimConnection.prototype.getInstanceSingle = function (nodeName, namespace, className, keyProperties, options) {
        var _this = this;
        this.setPowerShellParameters(options, NodeCimOutput.Single, keyProperties);
        var observable = PowerShellAlternate.create(this.nodeConnection, nodeName, options);
        if (observable) {
            return observable;
        }
        var cimUrl = Cim.cimUrlSingleInstance(namespace, className, keyProperties);
        return this.nodeConnection.get(nodeName, cimUrl, options)
            .catch(function (error) { return _this.handleJeaFallback(error, nodeName, options); });
    };
    /**
     * CIM POST InstanceMethod
     *
     * @param nodeName the name of the node to use for this request
     * @param namespace the cim namespace.
     * @param className the class name.
     * @param methodName the method name.
     * @param keyProperties the key properties object.
     * @param data the method input data.
     * @param options the options for this request.
     * @return Observable<any> the query observable.
     */
    CimConnection.prototype.invokeMethodInstance = function (nodeName, namespace, className, methodName, keyProperties, data, options) {
        var _this = this;
        this.setPowerShellParameters(options, NodeCimOutput.Result, keyProperties, data && data.parameters);
        var observable = PowerShellAlternate.create(this.nodeConnection, nodeName, options);
        if (observable) {
            return observable;
        }
        var cimUrl = Cim.cimUrlInstanceMethod(namespace, className, methodName, keyProperties);
        return this.nodeConnection.post(nodeName, cimUrl, data, options)
            .catch(function (error) { return _this.handleJeaFallback(error, nodeName, options); });
    };
    /**
     * CIM POST StaticMethod
     *
     * @param nodeName the name of the node to use for this request
     * @param namespace the cim namespace.
     * @param className the class name.
     * @param methodName the method name.
     * @param data the method input data.
     * @param options the options for this request.
     * @return Observable<any> the query observable.
     */
    CimConnection.prototype.invokeMethodStatic = function (nodeName, namespace, className, methodName, data, options) {
        var _this = this;
        this.setPowerShellParameters(options, NodeCimOutput.Result, data && data.parameters);
        var observable = PowerShellAlternate.create(this.nodeConnection, nodeName, options);
        if (observable) {
            return observable;
        }
        var cimUrl = Cim.cimUrlStaticMethod(namespace, className, methodName);
        return this.nodeConnection.post(nodeName, cimUrl, data, options)
            .catch(function (error) { return _this.handleJeaFallback(error, nodeName, options); });
    };
    /**
     * CIM PUT SingleInstance
     *
     * @param nodeName the name of the node to use for this request
     * @param namespace the cim namespace.
     * @param className the class name.
     * @param keyProperties the key properties object.
     * @param data the method input data.
     * @param options the options for this request.
     * @return Observable<any> the query observable.
     */
    CimConnection.prototype.setInstance = function (nodeName, namespace, className, keyProperties, data, options) {
        var _this = this;
        this.setPowerShellParameters(options, NodeCimOutput.Single, keyProperties, data && data.properties);
        var observable = PowerShellAlternate.create(this.nodeConnection, nodeName, options);
        if (observable) {
            return observable;
        }
        var cimUrl = Cim.cimUrlSingleInstance(namespace, className, keyProperties);
        return this.nodeConnection.put(nodeName, cimUrl, data, options)
            .catch(function (error) { return _this.handleJeaFallback(error, nodeName, options); });
    };
    /**
     * CIM PATCH SingleInstance
     *
     * @param nodeName the name of the node to use for this request
     * @param namespace the cim namespace.
     * @param className the class name.
     * @param keyProperties the key properties object.
     * @param data the method input data.
     * @param options the options for this request.
     * @return Observable<any> the query observable.
     */
    CimConnection.prototype.modifyInstance = function (nodeName, namespace, className, keyProperties, data, options) {
        var _this = this;
        this.setPowerShellParameters(options, NodeCimOutput.Single, keyProperties, data && data.properties);
        var observable = PowerShellAlternate.create(this.nodeConnection, nodeName, options);
        if (observable) {
            return observable;
        }
        var cimUrl = Cim.cimUrlSingleInstance(namespace, className, keyProperties);
        return this.nodeConnection.patch(nodeName, cimUrl, data, options)
            .catch(function (error) { return _this.handleJeaFallback(error, nodeName, options); });
    };
    /**
     * CIM DELETE SingleInstance
     *
     * @param nodeName the name of the node to use for this request
     * @param namespace the cim namespace.
     * @param className the class name.
     * @param keyProperties the key properties object.
     * @param options the options for this request.
     * @return Observable<any> the query observable.
     */
    CimConnection.prototype.deleteInstance = function (nodeName, namespace, className, keyProperties, options) {
        var _this = this;
        this.setPowerShellParameters(options, NodeCimOutput.Single, keyProperties);
        var observable = PowerShellAlternate.create(this.nodeConnection, nodeName, options);
        if (observable) {
            return observable;
        }
        var cimUrl = Cim.cimUrlSingleInstance(namespace, className, keyProperties);
        return this.nodeConnection.delete(nodeName, cimUrl, null, options)
            .catch(function (error) { return _this.handleJeaFallback(error, nodeName, options); });
    };
    /**
     * CIM POST WqlQuery
     *
     * @param nodeName the name of the node to use for this request
     * @param namespace the cim namespace.
     * @param query the WQL string.
     * @param options the options for this request.
     * @return Observable<any> the query observable.
     */
    CimConnection.prototype.getInstanceQuery = function (nodeName, namespace, query, options) {
        var _this = this;
        this.setPowerShellParameters(options, NodeCimOutput.Query, options && options.powerShellParameters);
        var observable = PowerShellAlternate.create(this.nodeConnection, nodeName, options);
        if (observable) {
            return observable;
        }
        var cimUrl = Cim.cimUrlWqlQuery(namespace);
        return this.nodeConnection.post(nodeName, cimUrl, JSON.stringify({ query: query }), options)
            .catch(function (error) { return _this.handleJeaFallback(error, nodeName, options); });
    };
    /**
     * Handle the fallback from CIM to powershell with JEA, if applicable
     * @param error The error to handle
     * @param nodeName The node name
     * @param options The request options
     */
    CimConnection.prototype.handleJeaFallback = function (error, nodeName, options) {
        var _this = this;
        var authError = error.status === HttpStatusCode.Unauthorized;
        var responseEndpoint = error && error.xhr && error.xhr.getResponseHeader(headerConstants.POWERSHELL_ENDPOINT);
        var requestEndpoint = options && options.powerShellEndpoint;
        if (authError && responseEndpoint && requestEndpoint !== responseEndpoint) {
            options.powerShellEndpoint = responseEndpoint;
            var powershellRequest = PowerShellAlternate.create(this.nodeConnection, nodeName, options).do(function () {
                // The JEA request went through - persist this context in authorization manager. 
                _this.nodeConnection.saveJeaContext(nodeName, responseEndpoint);
            });
            return powershellRequest || Observable.throw(error);
        }
        return Observable.throw(error);
    };
    /**********************************
     * Cim Batch Section
     **********************************/
    /**
     * CIM GET MultipleInstances for list of nodes
     *
     * @param nodeNamesList the Nodes to use for this request.
     * @param namespace the cim namespace.
     * @param className the class name.
     * @param options the options for this request.
     * @return Observable<BatchResponseItem[]> the query observable.
     */
    CimConnection.prototype.getBatchInstanceMultiple = function (nodeNamesList, namespace, className, options) {
        this.setPowerShellParameters(options, NodeCimOutput.Multiple);
        var observable = PowerShellAlternate.createBatch(this.nodeConnection, this.batchConnection, nodeNamesList, options);
        if (observable) {
            return observable;
        }
        var cimUrl = Cim.cimUrlMultipleInstances(namespace, className);
        var urlList = [];
        for (var index = 0; index < nodeNamesList.length; index++) {
            urlList.push(cimUrl);
        }
        return this.batchConnection.get(nodeNamesList, urlList, options);
    };
    /**
     * CIM GET SingleInstance for list of nodes
     *
     * @param nodeNamesList the Nodes to use for this request.
     * @param namespace the cim namespace.
     * @param className the class name.
     * @param keyProperties the key properties object.
     * @param options the options for this request.
     * @return Observable<BatchResponseItem[]> the query observable.
     */
    CimConnection.prototype.getBatchInstanceSingle = function (nodeNamesList, namespace, className, keyProperties, options) {
        this.setPowerShellParameters(options, NodeCimOutput.Single, keyProperties);
        var observable = PowerShellAlternate.createBatch(this.nodeConnection, this.batchConnection, nodeNamesList, options);
        if (observable) {
            return observable;
        }
        var cimUrl = Cim.cimUrlSingleInstance(namespace, className, keyProperties);
        var urlList = [];
        for (var index = 0; index < nodeNamesList.length; index++) {
            urlList.push(cimUrl);
        }
        return this.batchConnection.get(nodeNamesList, urlList, options);
    };
    /**
     * CIM POST InstanceMethod for list of nodes
     *
     * @param nodeNamesList the Nodes to use for this request.
     * @param namespace the cim namespace.
     * @param className the class name.
     * @param methodName the method name.
     * @param keyProperties the key properties object.
     * @param data the method input data.
     * @param options the options for this request.
     * @return Observable<BatchResponseItem[]> the query observable.
     */
    CimConnection.prototype.invokeBatchMethodInstance = function (nodeNamesList, namespace, className, methodName, keyProperties, data, options) {
        this.setPowerShellParameters(options, NodeCimOutput.Result, keyProperties, data && data.parameters);
        var observable = PowerShellAlternate.createBatch(this.nodeConnection, this.batchConnection, nodeNamesList, options);
        if (observable) {
            return observable;
        }
        var cimUrl = Cim.cimUrlInstanceMethod(namespace, className, methodName, keyProperties);
        var body = data ? JSON.stringify(data) : null;
        return this.cimBatchPost(nodeNamesList, cimUrl, body, options);
    };
    /**
     * CIM POST StaticMethod for list of nodes
     *
     * @param nodeNamesList the Nodes to use for this request.
     * @param namespace the cim namespace.
     * @param className the class name.
     * @param methodName the method name.
     * @param data the method input data.
     * @param options the options for this request.
     * @return Observable<BatchResponseItem[]> the query observable.
     */
    CimConnection.prototype.invokeBatchMethodStatic = function (nodeNamesList, namespace, className, methodName, data, options) {
        this.setPowerShellParameters(options, NodeCimOutput.Result, data && data.parameters);
        var observable = PowerShellAlternate.createBatch(this.nodeConnection, this.batchConnection, nodeNamesList, options);
        if (observable) {
            return observable;
        }
        var cimUrl = Cim.cimUrlStaticMethod(namespace, className, methodName);
        var body = data ? JSON.stringify(data) : null;
        return this.cimBatchPost(nodeNamesList, cimUrl, body, options);
    };
    /**
     * CIM PUT SingleInstance for list of nodes
     *
     * @param nodeName the name of the node to use for this request
     * @param namespace the cim namespace.
     * @param className the class name.
     * @param keyProperties the key properties object.
     * @param data the method input data.
     * @param options the options for this request.
     * @return Observable<BatchResponseItem[]> the query observable.
     */
    CimConnection.prototype.setBatchInstance = function (nodeNamesList, namespace, className, keyProperties, data, options) {
        this.setPowerShellParameters(options, NodeCimOutput.Single, keyProperties, data && data.properties);
        var observable = PowerShellAlternate.createBatch(this.nodeConnection, this.batchConnection, nodeNamesList, options);
        if (observable) {
            return observable;
        }
        var cimUrl = Cim.cimUrlSingleInstance(namespace, className, keyProperties);
        var urlList = [];
        var dataList = [];
        for (var index = 0; index < nodeNamesList.length; index++) {
            urlList.push(cimUrl);
            dataList.push(JSON.stringify(data));
        }
        return this.batchConnection.put(nodeNamesList, urlList, dataList, options);
    };
    /**
     * CIM DELETE SingleInstance for list of nodes
     *
     * @param nodeNamesList the Nodes to use for this request.
     * @param namespace the cim namespace.
     * @param className the class name.
     * @param keyProperties the key properties object.
     * @param options the options for this request.
     * @return Observable<BatchResponseItem[]> the query observable.
     */
    CimConnection.prototype.deleteBatchInstance = function (nodeNamesList, namespace, className, keyProperties, options) {
        this.setPowerShellParameters(options, NodeCimOutput.Single, keyProperties);
        var observable = PowerShellAlternate.createBatch(this.nodeConnection, this.batchConnection, nodeNamesList, options);
        if (observable) {
            return observable;
        }
        var cimUrl = Cim.cimUrlSingleInstance(namespace, className, keyProperties);
        var urlList = [];
        for (var index = 0; index < nodeNamesList.length; index++) {
            urlList.push(cimUrl);
        }
        return this.batchConnection.delete(nodeNamesList, urlList, options);
    };
    /**
     * CIM POST WqlQuery for list of nodes
     *
     * @param nodeNamesList the Nodes to use for this request.
     * @param namespace the cim namespace.
     * @param query the WQL string.
     * @param options the options for this request.
     * @return Observable<BatchResponseItem[]> the query observable.
     */
    CimConnection.prototype.getBatchInstanceQuery = function (nodeNamesList, namespace, query, options) {
        this.setPowerShellParameters(options, NodeCimOutput.Query, options && options.powerShellParameters);
        var observable = PowerShellAlternate.createBatch(this.nodeConnection, this.batchConnection, nodeNamesList, options);
        if (observable) {
            return observable;
        }
        var cimUrl = Cim.cimUrlWqlQuery(namespace);
        var body = JSON.stringify({ query: query });
        return this.cimBatchPost(nodeNamesList, cimUrl, body, options);
    };
    /**
     * Cim batch post helper
     *
     * @param nodeNamesList The list of Nodes to run the call against
     * @param cimUrl The CIM end point to call
     * @param jsonBody The body of Post in json format.
     * @param options the request options.
     */
    CimConnection.prototype.cimBatchPost = function (nodeNamesList, cimUrl, jsonBody, options) {
        var urlList = [];
        var bodyList = [];
        for (var index = 0; index < nodeNamesList.length; index++) {
            urlList.push(cimUrl);
            if (jsonBody) {
                bodyList.push(jsonBody);
            }
        }
        return this.batchConnection.post(nodeNamesList, urlList, bodyList, options);
    };
    /**
     * Set PowerShell parameters to the options object.
     *
     * @param options The node request options.
     * @param outputType The output data type.
     * @param keys The key data.
     * @param data The arguments data.
     */
    CimConnection.prototype.setPowerShellParameters = function (options, cimOutput, keys, data) {
        if (options == null || options.powerShell == null) {
            return;
        }
        options.powerShellContext = {
            cimOutput: cimOutput,
            parameters: __assign({}, (keys || {}), (data || {}))
        };
    };
    return CimConnection;
}());
export { CimConnection };
//# sourceMappingURL=data:application/json;base64,
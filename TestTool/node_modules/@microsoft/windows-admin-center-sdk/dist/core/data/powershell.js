var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
import { Observable } from 'rxjs';
import { LogLevel } from '../diagnostics/log-level';
import { Logging } from '../diagnostics/logging';
import { Disposer } from './disposable';
import { headerConstants, HttpStatusCode } from './http-constants';
import { Net } from './net';
/**
 * The PowerShellSession class.
 */
var PowerShellSession = /** @class */ (function () {
    function PowerShellSession(powerShell, lifetime) {
        this.powerShell = powerShell;
        this.lifetime = lifetime;
    }
    Object.defineProperty(PowerShellSession.prototype, "nodeName", {
        /**
         * Gets the node name of session.
         */
        get: function () {
            return this.powerShell.nodeName;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Dispose the session object.
     */
    PowerShellSession.prototype.dispose = function () {
        if (this.lifetime) {
            this.lifetime.dispose();
        }
    };
    return PowerShellSession;
}());
export { PowerShellSession };
/**
 * Class containing methods related to PowerShell runspace creation/deletion/command using PowerShell Raw API plugin.
 *  - It's auto holding the session as long as it's used within last 3 minutes.
 */
var PowerShellRaw = /** @class */ (function () {
    /**
     * Initializes a new instance of the PowerShellRaw class.
     *
     * @param nodeConnection The node connection service.
     * @param context The context of PowerShell run.
     */
    function PowerShellRaw(nodeConnection, context) {
        this.nodeConnection = nodeConnection;
        this.context = context;
        this.timestampInMs = 0;
        this.markDelete = false;
        this.internalActive = false;
        this.cancelPending = false;
    }
    Object.defineProperty(PowerShellRaw.prototype, "active", {
        /**
         * Gets active status of PowerShell execution.
         */
        get: function () {
            return this.internalActive;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Dispose the runspace.
     */
    PowerShellRaw.prototype.dispose = function () {
        if (!this.active) {
            // only close sessions that have been created.
            // If a result was cached a component may not
            // execute a command and still dispose the session
            // when the component is destroyed.
            if (this.sessionId) {
                this.close();
            }
        }
        else {
            this.markDelete = true;
        }
    };
    /*
     * Runs the given command
     *
     * @param command The command to execute.
     */
    PowerShellRaw.prototype.runCommand = function (command, options) {
        var _this = this;
        // take the timestamp only success/healthy case.
        // error session would be auto-deleted after expiration time.
        this.internalActive = true;
        return this.command(command, options)
            .catch(function (error) { return _this.fallbackToJea(error, command, options); })
            .expand(function (data, index) {
            _this.timestampInMs = Date.now();
            if (_this.checkCompleted(data)) {
                return Observable.empty();
            }
            if (_this.cancelPending) {
                // submit cancel request.
                // after set active state to false and complete the observable.
                _this.cancelPending = false;
                return _this.cancel()
                    .catch(function (error, caught) {
                    _this.internalActive = false;
                    return Observable.empty();
                })
                    .flatMap(function (x) {
                    _this.internalActive = false;
                    return Observable.empty();
                });
            }
            var url = Net.powerShellApiRetrieveOutput.format(_this.sessionId);
            return _this.nodeConnection.get(_this.context.nodeName, url, _this.context.requestOptions)
                .catch(function (error) { return _this.fallbackToJea(error, command, options); });
        });
    };
    /**
     * Close/Delete the session / runspace.
     */
    PowerShellRaw.prototype.close = function () {
        if (this.sessionId) {
            var sessionUri = Net.powerShellApiSessions.format(this.sessionId);
            this.sessionId = null;
            this.nodeConnection.deleteQuick(this.context.nodeName, sessionUri, this.context.requestOptions);
            return;
        }
        Logging.log({
            level: LogLevel.Verbose,
            source: 'PowerShell/close',
            message: MsftSme.resourcesStrings().MsftSmeShell.Core.Error.PowerShellUnableSessionClose.message
        });
    };
    /**
     * Cancel the command.
     */
    PowerShellRaw.prototype.cancelCommand = function () {
        if (this.internalActive) {
            this.cancelPending = true;
        }
        return Observable.empty();
    };
    /**
     * Perform the JEA fallback, if applicable.
     * @param error The error to handle
     * @param command The command
     * @param options The request options
     */
    PowerShellRaw.prototype.fallbackToJea = function (error, command, options) {
        var _this = this;
        var authError = (error.status === HttpStatusCode.Unauthorized || error.status === HttpStatusCode.BadRequest);
        var responseEndpoint = error && error.xhr && error.xhr.getResponseHeader(headerConstants.POWERSHELL_ENDPOINT);
        var requestEndpoint = (options && options.powerShellEndpoint);
        requestEndpoint = requestEndpoint || (this.context.requestOptions && this.context.requestOptions.powerShellEndpoint);
        if (authError && responseEndpoint && requestEndpoint !== responseEndpoint) {
            this.context.requestOptions.powerShellEndpoint = responseEndpoint;
            return this.command(command, options)
                .do(function () {
                // The JEA request went through - persist this context in authorization manager.
                _this.nodeConnection.saveJeaContext(_this.context.nodeName, responseEndpoint);
            });
        }
        this.internalActive = false;
        return Observable.throw(error);
    };
    PowerShellRaw.prototype.cancel = function () {
        if (this.sessionId && this.internalActive) {
            var cancelUri = Net.powerShellApiCancelCommand.format(this.sessionId);
            return this.nodeConnection.post(this.context.nodeName, cancelUri, null, this.context.requestOptions);
        }
        Logging.log({
            level: LogLevel.Warning,
            source: 'PowerShell',
            message: MsftSme.resourcesStrings().MsftSmeShell.Core.Error.PowerShellUnableCancelCommand.message
        });
        return Observable.empty();
    };
    Object.defineProperty(PowerShellRaw.prototype, "_isExpired", {
        /**
         * Gets if timestamp was expired.
         */
        get: function () {
            var now = Date.now();
            return this.timestampInMs !== 0 && (now - this.timestampInMs) > PowerShellRaw.maxDeltaTimeInMs;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Initiate command execution. It auto recycles old sessions.
     *
     * @param command the PowerShell command.
     */
    PowerShellRaw.prototype.command = function (command, options) {
        var data = Net.createPropertiesJSONString(command);
        var newOptions = __assign({}, this.context.requestOptions, {
            logAudit: options && options.logAudit,
            logTelemetry: options && options.logTelemetry
        });
        var endpoint = options && options.powerShellEndpoint;
        if (endpoint) {
            newOptions.powerShellEndpoint = endpoint;
        }
        var token = options && options.authToken;
        if (token) {
            newOptions.authToken = token;
        }
        if (this.sessionId == null || this._isExpired) {
            this.sessionId = null;
            var generatedName = (this.context.key ? this.context.key : 'X') + MsftSme.newGuid();
            var sessionUri = Net.powerShellApiSessions.format(generatedName);
            return this.nodeConnection.put(this.context.nodeName, sessionUri, data, newOptions);
        }
        else {
            var executeUri = Net.powerShellApiExecuteCommand.format(this.sessionId);
            return this.nodeConnection.post(this.context.nodeName, executeUri, data, newOptions);
        }
    };
    PowerShellRaw.prototype.checkCompleted = function (data) {
        var properties = Net.getItemProperties(data);
        if (properties.sessionId) {
            // keep the PS session GUID
            this.sessionId = properties.sessionId;
        }
        if (properties.completed.toLowerCase() === 'true') {
            this.internalActive = false;
            if (this.markDelete) {
                this.close();
            }
            return true;
        }
        return false;
    };
    // 3 minutes holding time.
    PowerShellRaw.maxDeltaTimeInMs = 3 * 60 * 1000;
    return PowerShellRaw;
}());
export { PowerShellRaw };
/**
 * The PowerShell class.
 *
 * - Single instance of PowerShell class manages single runspace.
 * - It queues coming requests and process one at a time sequentially.
 * - If a command is slow and causing with multiple responses, it aggregates response into single Q result.
 * - A PowerShell instance should be created through create() function, and it's statically stored/managed into _map collection.
 * - In QueryCache operation, it can find the PowerShell instance to run PowerShell command by using find() function.
 * - Once all lifetime references are gone, it deletes the runspace.
 * - To dispose the PowerShell instance, it can use lifetime.dispose().
 */
var PowerShell = /** @class */ (function () {
    /**
     * Initializes a new instance of the PowerShell class.
     * (private constructor which shouldn't be called directly.)
     *
     * @param nodeConnection The node connection service.
     * @param key The shared key to queue the requests to use the single runspace.
     * @param lifetime The lifetime container.
     */
    function PowerShell(nodeName, nodeConnection, key, lifetime, options) {
        var _this = this;
        /**
         * The queue of PowerShell command requests.
         */
        this.queue = [];
        this.context = {
            nodeName: nodeName,
            key: key,
            lifetimes: [],
            requestOptions: PowerShell.newEndpointOptions(options)
        };
        this.timestamp = 0;
        this.raw = new PowerShellRaw(nodeConnection, this.context);
        if (key && lifetime) {
            lifetime.registerForDispose(new Disposer(function () { return _this.lifetimeDisposer(lifetime); }));
            this.context.lifetimes.push(lifetime);
        }
    }
    /**
     * Create script as string.
     *
     * @param resource the script text from legacy ps-code converter.
     * @param parameters the arguments.
     * @param flags (optional) the switch flags.
     */
    PowerShell.createScript = function (script, parameters, flags) {
        script = 'function cvt ($o) { return ConvertFrom-Json $o }\n function SmeSubmit {\n' + script + '}\n SmeSubmit';
        for (var parameter in parameters) {
            if (parameters.hasOwnProperty(parameter)) {
                script += ' -{0} (cvt \'{1}\')'.format(parameter, JSON.stringify(parameters[parameter]).replace(PowerShell.escapeRegex, '\'\''));
            }
        }
        if (flags) {
            for (var i = 0; i < flags.length; i++) {
                script += ' -{0}'.format(flags[i]);
            }
        }
        return script;
    };
    /**
     * Create PowerShell request command.
     * (It creates a command object of JEA PowerShell request under restricted user role environment.)
     *
     * @param resource the script resource object with command and script data from new ps-code converter.
     * @param parameters the arguments.
     * @param flags (optional) the switch flags.
     * @return PowerShellCommand the PowerShell request command object.
     */
    PowerShell.createCommand = function (resource, parameters, flags) {
        var script = 'function cvt ($o) { return ConvertFrom-Json $o }\n function SmeSubmit {\n' + resource.script + '}\n SmeSubmit';
        for (var parameter in parameters) {
            if (parameters.hasOwnProperty(parameter)) {
                script += ' -{0} (cvt \'{1}\')'.format(parameter, JSON.stringify(parameters[parameter]).replace(PowerShell.escapeRegex, '\'\''));
            }
        }
        var flagParameters = {};
        if (flags) {
            for (var i = 0; i < flags.length; i++) {
                script += ' -{0}'.format(flags[i]);
                flagParameters[flags[i]] = true;
            }
        }
        return {
            module: resource.module,
            command: resource.command,
            parameters: __assign({}, flagParameters, parameters),
            script: script
        };
    };
    PowerShell.create = function (nodeName, nodeConnection, key, lifetime, requestOptions) {
        var ps;
        if (key && lifetime) {
            ps = PowerShell.map[PowerShell.indexName(nodeName, key)];
            if (ps) {
                ps.addLifetime(lifetime);
                return ps;
            }
        }
        ps = new PowerShell(nodeName, nodeConnection, key, lifetime, requestOptions);
        if (key && lifetime) {
            PowerShell.map[PowerShell.indexName(nodeName, key)] = ps;
        }
        return ps;
    };
    /**
     * Find existing PowerShell object. Create call must be called before to create the PowerShell instance.
     *
     * @param nodeName The node name.
     * @param key The shared key to queue the requests to use the single runspace.
     */
    PowerShell.find = function (nodeName, key) {
        return PowerShell.map[PowerShell.indexName(nodeName, key)];
    };
    /**
     * Gets the command object from string or PowerShellCommand.
     *
     * @param scriptOrCommand the script string or PowerShellCommand object.
     */
    PowerShell.getPowerShellCommand = function (scriptOrCommand) {
        return typeof scriptOrCommand === 'string' ?
            {
                script: scriptOrCommand
            }
            : {
                script: scriptOrCommand.script,
                command: scriptOrCommand.command,
                module: scriptOrCommand.module || MsftSme.self().Init.powerShellModuleName,
                parameters: scriptOrCommand.parameters
            };
    };
    /**
     * Create new options with debugging endpoint if requested.
     *
     * @param options the PowerShell session request options.
     */
    PowerShell.newEndpointOptions = function (options) {
        // if there is no endpoint but configured with powerShellEndpoint, set debugging endpoint.
        var newOptions = __assign({}, (options || {}));
        if (!newOptions.powerShellEndpoint && MsftSme.self().Init.powerShellEndpoint) {
            newOptions.powerShellEndpoint = MsftSme.self().Init.powerShellEndpoint;
        }
        return newOptions;
    };
    /**
     * Create the index name in map collection.
     *
     * @param nodeName The node name.
     * @param key The shared key to queue the requests to use the single runspace.
     */
    PowerShell.indexName = function (nodeName, key) {
        return nodeName + ':' + key;
    };
    Object.defineProperty(PowerShell.prototype, "nodeName", {
        /**
         * Gets node name from current context.
         */
        get: function () {
            return this.context.nodeName;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Run PowerShell command.
     *
     * @param command The command.
     * @param options The options.
     * @return PromiseV The result of PowerShell command.
     */
    PowerShell.prototype.run = function (scriptOrCommand, options) {
        var command = PowerShell.getPowerShellCommand(scriptOrCommand);
        if (this.context.lifetimes.length === 0) {
            // no disposer is assigned, force to close the session after every query.
            var timeoutMs = options && options.timeoutMs;
            if (options) {
                options.timeoutMs = timeoutMs;
                options.close = true;
            }
            else {
                options = { timeoutMs: timeoutMs, close: true };
            }
        }
        // queue the request.
        var observable = this.enqueue(command, options);
        return observable;
    };
    /**
     * Cancel PowerShell command.
     */
    PowerShell.prototype.cancel = function () {
        return this.raw.cancelCommand();
    };
    /**
     * Enqueue a command request.
     *
     * @param command The command.
     * @param options The options.
     */
    PowerShell.prototype.enqueue = function (command, options) {
        var _this = this;
        return Observable.create(function (observer) {
            _this.queue.push({ observer: observer, command: command, options: options });
            _this.dequeue();
        });
    };
    /**
     * Dequeue a command request.
     */
    PowerShell.prototype.dequeue = function () {
        var _this = this;
        if (this.raw.active) {
            return false;
        }
        var item = this.queue.shift();
        if (item) {
            this.currentData = null;
            this.timestamp = Date.now();
            this.raw.runCommand(item.command, item.options).subscribe(function (data) {
                var properties = Net.getItemProperties(data);
                _this.collect(properties, item.options && item.options.timeoutMs, item.options && item.options.partial ? item.observer : null);
            }, function (error) {
                if (item.options && item.options.close) {
                    _this.raw.close();
                }
                item.observer.error(error);
                _this.timestamp = 0;
                _this.dequeue();
            }, function () {
                if (item.options && item.options.close) {
                    _this.raw.close();
                }
                if (!item.options || !item.options.partial) {
                    item.observer.next(_this.currentData);
                }
                item.observer.complete();
                _this.timestamp = 0;
                _this.dequeue();
            });
            return true;
        }
        return false;
    };
    /**
     * Collect response result and aggregate into single object.
     *
     * @param properties The properties of response object.
     * @param timeoutMs The timeout to cancel command.
     * @param observer The observer of powershell results.
     */
    PowerShell.prototype.collect = function (properties, timeoutMs, observer) {
        if (timeoutMs && this.timestamp && (Date.now() - this.timestamp > timeoutMs)) {
            // force to cancel the command because of unexpected longer execution.
            this.raw.cancelCommand();
            this.timestamp = 0;
            return;
        }
        if (observer) {
            // return partial data if observer is not null.
            observer.next(properties);
            this.currentData = properties;
            return;
        }
        if (this.currentData != null && this.currentData.results && properties.results) {
            var array_1;
            if (MsftSme.getTypeOf(this.currentData.results) === 'array') {
                array_1 = this.currentData.results;
            }
            else {
                array_1 = [this.currentData.results];
            }
            if (MsftSme.getTypeOf(properties.results) === 'array') {
                properties.results.forEach(function (x) {
                    array_1.push(x);
                });
            }
            else {
                array_1.push(properties.results);
            }
            this.currentData.results = array_1;
            return;
        }
        this.currentData = properties;
    };
    /**
     * Attach lifetime object to disposer when disposing.
     *
     * @param lifetime The lifetime object.
     */
    PowerShell.prototype.addLifetime = function (lifetime) {
        var _this = this;
        var found = MsftSme.find(this.context.lifetimes, function (value) { return value === lifetime; });
        if (!found) {
            this.context.lifetimes.push(lifetime);
            lifetime.registerForDispose(new Disposer(function () { return _this.lifetimeDisposer(lifetime); }));
        }
    };
    /**
     * Callback when disposing the container of view model.
     * If none, reference the PowerShell object. Dispose it. (Delete runspace)
     *
     * @param lifetime The lifetime object.
     */
    PowerShell.prototype.lifetimeDisposer = function (lifetime) {
        var found = MsftSme.find(this.context.lifetimes, function (value) { return value === lifetime; });
        if (found) {
            MsftSme.remove(this.context.lifetimes, lifetime);
            if (this.context.lifetimes.length === 0) {
                // cancel queue command requests.
                this.queue.forEach(function (value, index, array) {
                    value.observer.next(null);
                    value.observer.complete();
                });
                // delete from the map collection and delete the runspace/session.
                delete PowerShell.map[PowerShell.indexName(this.context.nodeName, this.context.key)];
                this.raw.dispose();
            }
        }
    };
    /**
     * Default PowerShell endpoint.
     */
    PowerShell.defaultPowerShellEndpoint = 'http://schemas.microsoft.com/powershell/microsoft.powershell';
    /**
     * SME PowerShell endpoint.
     */
    PowerShell.smePowerShellEndpoint = 'http://schemas.microsoft.com/powershell/microsoft.sme.powershell';
    /**
     * Static collection of PowerShell objects.
     */
    PowerShell.map = {};
    /**
     * Regular expression to match all the occurrences of a single quote
     */
    PowerShell.escapeRegex = new RegExp('\'', 'g');
    return PowerShell;
}());
export { PowerShell };
//# sourceMappingURL=data:application/json;base64,
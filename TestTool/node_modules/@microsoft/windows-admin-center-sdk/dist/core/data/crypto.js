import { Observable } from 'rxjs';
/**
 * Web Crypto interface class.
 */
var Crypto = /** @class */ (function () {
    function Crypto() {
    }
    /**
     * hash with SHA-256
     * (If it doesn't support web based crypto, encode as base64.)
     * @param data the original data to hash.
     * @return Observable<string> the hash generated.
     */
    Crypto.getSha256 = function (data) {
        if (data == null) {
            var message = MsftSme.resourcesStrings().MsftSmeShell.Core.Error.ArgumentNullError.message;
            return Observable.throw(new Error(message.format('Crypto/getSha256', 'data')));
        }
        var root = window;
        var isIE = !!root.msCrypto;
        if (isIE && root.msCrypto.subtle) {
            return Crypto.hash256IE(root.msCrypto.subtle, data);
        }
        if (root.crypto) {
            var subtle = root.crypto.subtle || root.crypto.webkitSubtle;
            if (subtle) {
                return Crypto.hash256WebAPI(subtle, data);
            }
        }
        return Observable.of(window.btoa(data));
    };
    /**
     * encrypt with RSA/SHA-1
     *
     * @param jwk the JSON Web Key. Single string with JSON.stringify format.
     * @param data the original data to hash.
     * @return Observable<string> the hash generated.
     */
    Crypto.encryptRsaSha1 = function (jwk, data) {
        var message = '';
        if (jwk == null) {
            message = MsftSme.resourcesStrings().MsftSmeShell.Core.Error.ArgumentNullError.message;
            return Observable.throw(new Error(message.format('Crypto/encryptRsaSha1', 'jwk')));
        }
        if (data == null) {
            message = MsftSme.resourcesStrings().MsftSmeShell.Core.Error.ArgumentNullError.message;
            return Observable.throw(new Error(message.format('Crypto/encryptRsaSha1', 'data')));
        }
        var root = window;
        var isIE = !!root.msCrypto;
        if (isIE && root.msCrypto.subtle) {
            return Crypto.encryptRsaIE(root.msCrypto.subtle, jwk, data);
        }
        if (root.crypto) {
            var subtle = root.crypto.subtle;
            if (subtle) {
                var jwkObject = JSON.parse(jwk);
                return Crypto.encryptRsaWebAPI(subtle, jwkObject, data);
            }
            subtle = root.crypto.webkitSubtle;
            if (subtle) {
                var jwkArray = Crypto.toArrayBufferView(jwk);
                return Crypto.encryptRsaWebAPI(subtle, jwkArray, data);
            }
        }
        message = MsftSme.resourcesStrings().MsftSmeShell.Core.Error.UnknownBrowser.message;
        return Observable.throw(new Error(message.format('Crypto/encryptRsaSha1')));
    };
    /**
     * sign with HMAC/SHA-256
     *
     * @param key the key (base64 encoded).
     * @param data the original data to hash. (unicode - not utf8)
     * @return Observable<string> the hash generated.
     */
    Crypto.signHmac = function (key, data) {
        var message = '';
        if (key == null) {
            message = MsftSme.resourcesStrings().MsftSmeShell.Core.Error.ArgumentNullError.message;
            return Observable.throw(new Error(message.format('Crypto/signHmac', 'key')));
        }
        if (data == null) {
            message = MsftSme.resourcesStrings().MsftSmeShell.Core.Error.ArgumentNullError.message;
            return Observable.throw(new Error(message.format('Crypto/encryptRsaSha1', 'data')));
        }
        var root = window;
        var isIE = !!root.msCrypto;
        if (isIE && root.msCrypto.subtle) {
            return Crypto.signHmacIE(root.msCrypto.subtle, key, data);
        }
        if (root.crypto) {
            var subtle = root.crypto.subtle || root.crypto.webkitSubtle;
            if (subtle) {
                return Crypto.signHmacWebAPI(subtle, key, data);
            }
        }
        message = MsftSme.resourcesStrings().MsftSmeShell.Core.Error.UnknownBrowser.message;
        return Observable.throw(new Error(message.format('Crypto/signHmac')));
    };
    /**
     * Hash with SHA-256 for WebAPI.
     *
     * @param subtle the Web API subtle.
     * @param data the original data to hash.
     * @return Observable<string> the hash generated.
     */
    Crypto.hash256WebAPI = function (subtle, data) {
        return Observable.create(function (observer) {
            var array = Crypto.toUint8Array(data);
            subtle.digest({ name: 'SHA-256' }, array)
                .then(function (hash) {
                var hexText = Crypto.toHexString(hash);
                observer.next(hexText);
                observer.complete();
            }, function (error) {
                observer.error(error);
            });
        });
    };
    /**
     * Hash with SHA-256 for IE/Older API.
     *
     * @param subtle the older API subtle.
     * @param data the original data to hash.
     * @return Observable<string> the hash generated.
     */
    Crypto.hash256IE = function (subtle, data) {
        return Observable.create(function (observer) {
            var array = Crypto.toUint8Array(data);
            var cryptoOp = subtle.digest({ name: 'SHA-256' }, array);
            cryptoOp.oncomplete = function (event) {
                var hexText = Crypto.toHexString(event.target.result);
                observer.next(hexText);
                observer.complete();
            };
            cryptoOp.onerror = function (error) {
                if (!observer.closed) {
                    observer.error(error);
                }
            };
            cryptoOp.finish();
        });
    };
    /**
     * Encrypt with RSA/SHA-1 for WebAPI.
     *
     * @param subtle the Web API subtle.
     * @param jwkObject the JSON Web key object or ArrayBufferView on webkit.
     * @param data the original data to encrypt.
     * @return Observable<string> the encrypted base64 string.
     */
    Crypto.encryptRsaWebAPI = function (subtle, jwkObject, data) {
        return Observable.create(function (observer) {
            var array = Crypto.toUtf8ArrayBuffer(data);
            subtle.importKey('jwk', jwkObject, Crypto.algRsaOaepSha1Key, false, ['encrypt'])
                .then(function (publicKey) {
                return subtle.encrypt(Crypto.algRsaOaepSha1Key, publicKey, array);
            })
                .then(function (result) {
                observer.next(Crypto.createBase64(result));
                observer.complete();
            }, function (error) {
                observer.error(error);
            });
        });
    };
    /**
     * Encrypt with RSA/SHA-1 for IE/Older API.
     *
     * @param subtle the older API subtle.
     * @param jwk the JSON Web key format (Stringfiy).
     * @param data the original data to hash.
     * @return Observable<string> the encrypted base64 string.
     */
    Crypto.encryptRsaIE = function (subtle, jwk, data) {
        return Observable.create(function (observer) {
            var array = Crypto.toUtf8ArrayBuffer(data);
            var onerror = function (error) {
                if (!observer.closed) {
                    observer.error(error);
                }
            };
            var jwkBytes = Crypto.toArrayBuffer(jwk);
            var importKeyOp = subtle.importKey('jwk', jwkBytes, Crypto.algRsaOaepSha1Key, false, ['encrypt']);
            importKeyOp.oncomplete = function (importKeyOpOnCompleteEvent) {
                var publicKey = importKeyOpOnCompleteEvent.target.result;
                var encryptOp = subtle.encrypt(Crypto.algRsaOaepSha1Key, publicKey, array);
                encryptOp.oncomplete = function (encryptOpOnCompleteEvent) {
                    observer.next(Crypto.createBase64(encryptOpOnCompleteEvent.target.result));
                    observer.complete();
                };
                encryptOp.onerror = onerror;
            };
            importKeyOp.onerror = onerror;
        });
    };
    /**
     * Sign with HMAC for WebAPI.
     *
     * @param subtle the Web API subtle.
     * @param key the key.
     * @param data the original data to encrypt.
     * @return Observable<string> the encrypted base64 string.
     */
    Crypto.signHmacWebAPI = function (subtle, key, data) {
        return Observable.create(function (observer) {
            var array = Crypto.toUtf8ArrayBuffer(data);
            var keyObject = Crypto.toArrayBufferView(window.atob(key));
            subtle.importKey('raw', keyObject, Crypto.algHmacSha256Key, false, ['sign'])
                .then(function (publicKey) {
                return subtle.sign(Crypto.algHmacSha256Key, publicKey, array);
            })
                .then(function (result) {
                observer.next(Crypto.createBase64(result));
                observer.complete();
            }, function (error) {
                observer.error(error);
            });
        });
    };
    /**
     * Sign with HMAC for IE/Older API.
     *
     * @param subtle the older API subtle.
     * @param jwk the key.
     * @param data the original data to hash.
     * @return Observable<string> the encrypted base64 string.
     */
    Crypto.signHmacIE = function (subtle, key, data) {
        return Observable.create(function (observer) {
            var array = Crypto.toUtf8ArrayBuffer(data);
            var onerror = function (error) {
                if (!observer.closed) {
                    observer.error(error);
                }
            };
            var keyBytes = Crypto.toArrayBuffer(window.atob(key));
            var importKeyOp = subtle.importKey('raw', keyBytes, Crypto.algHmacSha256Key, false, ['sign']);
            importKeyOp.oncomplete = function (importKeyOpEvent) {
                var publicKey = importKeyOpEvent.target.result;
                var encryptOp = subtle.sign(Crypto.algHmacSha256Key, publicKey, array);
                encryptOp.oncomplete = function (encryptOpEvent) {
                    observer.next(Crypto.createBase64(encryptOpEvent.target.result));
                    observer.complete();
                };
                encryptOp.onerror = onerror;
            };
            importKeyOp.onerror = onerror;
        });
    };
    /**
     * Create hex string from byte raw data.
     *
     * @param bytes the array buffer.
     * @return string the hex string.
     */
    Crypto.toHexString = function (bytes) {
        var array = new Uint8Array(bytes);
        var hexText = '';
        for (var i = 0; i < array.length; i++) {
            var hex = array[i].toString(16);
            hexText += (hex.length === 1 ? '0' : '') + hex;
        }
        return hexText;
    };
    /**
     * Create Uint8Array from a string.
     *
     * @param data The string data.
     * @return Uint8Array The bytes array.
     */
    Crypto.toUint8Array = function (data) {
        var temp = [];
        for (var i = 0; i < data.length; i++) {
            var ch = data.charCodeAt(i);
            /* tslint:disable:no-bitwise */
            temp.push((ch & 0x0ff00) >> 8);
            temp.push(ch & 0x0ff);
            /* tslint:enable:no-bitwise */
        }
        return new Uint8Array(temp);
    };
    /**
     * Create ArrayBuffer from a string with unicode.
     *
     * @param data The string data.
     * @return ArrayBuffer The bytes array.
     */
    Crypto.toUtf8ArrayBuffer = function (data) {
        var utf8 = Crypto.utf8Encode(data);
        return Crypto.toArrayBuffer(utf8);
    };
    /**
     * Encode utf8 string.
     *
     * @param data the unencoded string.
     */
    Crypto.utf8Encode = function (data) {
        return unescape(encodeURIComponent(data));
    };
    /**
     * Create ArrayBuffer from a string with unicode.
     *
     * @param data The string data.
     * @return ArrayBuffer The bytes array.
     */
    Crypto.toArrayBuffer = function (data) {
        var buffer = new ArrayBuffer(data.length);
        var view = new Uint8Array(buffer);
        for (var i = 0; i < buffer.byteLength; i++) {
            view[i] = data.charCodeAt(i);
        }
        return buffer;
    };
    /**
     * Create ArrayBufferView from a string with unicode.
     *
     * @param data The string data.
     * @return ArrayBuffer The bytes array.
     */
    Crypto.toArrayBufferView = function (data) {
        var buffer = new ArrayBuffer(data.length);
        var view = new Uint8Array(buffer);
        for (var i = 0; i < buffer.byteLength; i++) {
            view[i] = data.charCodeAt(i);
        }
        return view;
    };
    /**
     * Create base64 from byte data.
     *
     * @param data The byte data.
     * @return string The base64 encoded data.
     */
    Crypto.createBase64 = function (data) {
        var array = new Uint8Array(data);
        var rawString = '';
        for (var i = 0; i < array.byteLength; i++) {
            rawString += String.fromCharCode(array[i]);
        }
        return window.btoa(rawString);
    };
    Crypto.algRsaOaepSha1Key = { name: 'RSA-OAEP', hash: { name: 'SHA-1' } };
    Crypto.algHmacSha256Key = { name: 'HMAC', hash: { name: 'SHA-256' } };
    return Crypto;
}());
export { Crypto };
//# sourceMappingURL=data:application/json;base64,
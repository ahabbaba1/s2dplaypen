import { Observable } from 'rxjs/Observable';
import { LogLevel } from '../diagnostics/log-level';
import { Logging } from '../diagnostics/logging';
import { Http } from './http';
/**
 * Class to retrieve localized resources based on the user locale
 * This class lets you load resources from a json file in an
 * arbitrary location and determines what locale resources to return
 * on the user preference
 */
var LocalizationManager = /** @class */ (function () {
    /**
     * Initializes a new instance of the LocalizationManager class that reads the localized assets from
     * the given locations.
     * @param {LocalizationManagerOptions} options? The options to initialize the localization manager.
     */
    function LocalizationManager(options) {
        this.defaultLocaleId = LocalizationManager.supportedLocales[0].id;
        this.http = new Http();
        var resourcesPath = options && options.resourcesPath;
        if (resourcesPath) {
            resourcesPath = MsftSme.trimEnd(resourcesPath.trim(), '/');
        }
        else {
            resourcesPath = LocalizationManager.defaultResourcesStringsFolder;
        }
        this.resourcesStringFormat = resourcesPath + LocalizationManager.resourcesStringsFileFormat;
        this.resourcesStringDefaultFile = resourcesPath + LocalizationManager.resourcesStringsFile;
    }
    Object.defineProperty(LocalizationManager.prototype, "localeId", {
        /**
         * Gets current locale.
         * @return string the locale string.
         */
        get: function () {
            return this.localeIdInternal;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LocalizationManager.prototype, "navigatorLanguage", {
        /**
         * Gets the navigator language
         */
        get: function () {
            return navigator.language;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Sets the current locale in persistent storage
     * @param localeId the string representing the locale selected by the user. Ex: 'es' or 'en'
     */
    LocalizationManager.prototype.saveLocale = function (localeId) {
        var defaultLocale = LocalizationManager.supportedLocales.find(function (loc) { return loc.id.localeCompareIgnoreCase(localeId) === 0; });
        if (!defaultLocale) {
            throw new Error("The default locale specified: " + localeId + " is not defined in the array of " +
                ("supported locales " + JSON.stringify(LocalizationManager.supportedLocales)));
        }
        this.localeIdInternal = localeId;
        localStorage.setItem(LocalizationManager.localStorageLocaleKey, localeId);
    };
    /**
     * Fetches the localized strings from the server based on the current culture.
     * @returns an observable with object the localized strings.
     */
    LocalizationManager.prototype.fetchLocalizedStrings = function () {
        this.getLocaleId();
        if (this.localeId === this.defaultLocaleId) {
            // Only fetch the default locale
            return this.fetchDefaultStrings();
        }
        // TODO: Once the localization team is engaged we can remove this code and just fetch the
        // locale and be sure that it exists
        return Observable.zip(this.fetchDefaultStrings(), this.fetchLocaleStrings().catch(function (error, caught) { return Observable.of(null); }), function (fetchDefault, fetchLocale) {
            // get the english strings and replace those properties of the localized json
            var strings;
            if (fetchLocale) {
                return MsftSme.deepAssign({}, fetchDefault, fetchLocale);
            }
            return fetchDefault;
        });
    };
    /**
     * Gets the current locale
     * @returns The current locale selected by the user
     */
    LocalizationManager.prototype.getLocaleId = function () {
        // TODO: remove isProduction section to officially support localization.
        // if (MsftSme.self().Init && MsftSme.self().Init.isProduction) {
        //     this.localeIdInternal = this.defaultLocaleId;
        //     return this.localeId;
        // }
        if (!this.localeId) {
            var localeId_1 = localStorage.getItem(LocalizationManager.localStorageLocaleKey);
            if (!localeId_1) {
                // Now we read the browser locales and if it's supported, then we use that;
                // otherwise use default locale
                var navigatorLanguage = this.getNavigatorLanguage();
                if (navigatorLanguage) {
                    localeId_1 = navigatorLanguage;
                }
                if (!localeId_1) {
                    localeId_1 = this.defaultLocaleId;
                }
            }
            // now check if if the locale is supported
            var locale = LocalizationManager.supportedLocales.find(function (loc) { return loc.id.localeCompareIgnoreCase(localeId_1) === 0; });
            // Try with the first part only
            if (!locale) {
                var first_1 = localeId_1.split('-')[0];
                locale = LocalizationManager.supportedLocales.find(function (loc) { return loc.id.split('-')[0].localeCompareIgnoreCase(first_1) === 0; });
            }
            if (!locale) {
                Logging.log({
                    source: 'LocalizationManager',
                    level: LogLevel.Warning,
                    message: "The current user locale: " + localeId_1 + " is not defined in the array of " +
                        ("supported locales " + JSON.stringify(LocalizationManager.supportedLocales) + " so we will use the ") +
                        ("default locale: " + JSON.stringify(LocalizationManager.supportedLocales[0]))
                });
                locale = LocalizationManager.supportedLocales[0];
            }
            this.localeIdInternal = locale.id;
        }
        return this.localeId;
    };
    LocalizationManager.prototype.fetchDefaultStrings = function () {
        var _this = this;
        return this.http.getNoCache(this.resourcesStringDefaultFile)
            .catch(function (error, caught) {
            if (error.status >= 400) {
                // If we got any error, we just reply with that error and the map function will handle it
                Logging.log({
                    source: 'LocalizationManager',
                    level: LogLevel.Error,
                    message: "Error " + error.status + " received when getting default localized strings for the " +
                        (_this.defaultLocaleId + " locale. The error was: " + error.message)
                });
            }
            return Observable.throw(error);
        }).map(function (result) {
            return result.response.Strings;
        });
    };
    LocalizationManager.prototype.fetchLocaleStrings = function () {
        var _this = this;
        return this.http.getNoCache(this.resourcesStringFormat.format(this.localeId))
            .catch(function (error, caught) {
            if (error.status >= 400) {
                // If we got any error, we just reply with that error and the map function will handle it
                Logging.log({
                    source: 'LocalizationManager',
                    level: LogLevel.Warning,
                    message: "Error " + error.status + " received when getting localized strings for the " +
                        ("user specified locale: '" + _this.getLocaleId() + "'. The error was: " + error.message)
                });
                return Observable.of({});
            }
        }).map(function (result) {
            // If response has body, use that
            if (!result || !result.response) {
                return null;
            }
            return result.response.Strings;
        });
    };
    LocalizationManager.prototype.getNavigatorLanguage = function () {
        return this.navigatorLanguage;
    };
    LocalizationManager.localStorageLocaleKey = 'locale:@msft-sme/shell';
    LocalizationManager.supportedLocales = [
        {
            id: 'en-US',
            name: 'English'
        },
        {
            id: 'cs-CZ',
            name: 'Čeština'
        },
        {
            id: 'de-DE',
            name: 'Deutsch'
        },
        {
            id: 'es-ES',
            name: 'Español'
        },
        {
            id: 'fr-FR',
            name: 'Français'
        },
        {
            id: 'hu-HU',
            name: 'Magyar'
        },
        {
            id: 'it-IT',
            name: 'Italiano'
        },
        {
            id: 'ja-JP',
            name: '日本語‎'
        },
        {
            id: 'ko-KR',
            name: '한국어'
        },
        {
            id: 'nl-NL',
            name: 'Nederlands'
        },
        {
            id: 'pl-PL',
            name: 'Polski'
        },
        {
            id: 'pt-BR',
            name: 'Português (Brasil)'
        },
        {
            id: 'pt-PT',
            name: 'Português (Portugal)'
        },
        {
            id: 'ru-RU',
            name: 'Русский'
        },
        {
            id: 'sv-SE',
            name: 'Svenska'
        },
        {
            id: 'tr-TR',
            name: 'Türkçe'
        },
        {
            id: 'zh-CN',
            name: '中文(简体)'
        },
        {
            id: 'zh-TW',
            name: '中文(繁體)‎'
        }
    ];
    LocalizationManager.defaultResourcesStringsFolder = 'assets/strings';
    LocalizationManager.resourcesStringsFile = '/strings.json';
    LocalizationManager.resourcesStringsFileFormat = '/{0}/strings.json';
    return LocalizationManager;
}());
export { LocalizationManager };
//# sourceMappingURL=data:application/json;base64,
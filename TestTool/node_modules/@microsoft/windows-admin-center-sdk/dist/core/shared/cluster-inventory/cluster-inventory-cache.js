var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
import { Observable } from 'rxjs';
import { PowerShellScripts } from '../../../generated/powershell-scripts';
import { ServerInventoryCache } from '../server-inventory/server-inventory-cache';
import { SharedCache } from '../shared-cache';
import { ClusterInventory } from './cluster-inventory';
import { ClusterNodeInventory } from './cluster-node-inventory';
/**
 * Cluster Inventory cache class.
 */
var ClusterInventoryCache = /** @class */ (function (_super) {
    __extends(ClusterInventoryCache, _super);
    /**
     * Initializes a new instance of the ClusterInventoryCache class.
     *
     * @param appContext the app context.
     * @param options the option of shared cache.
     */
    function ClusterInventoryCache(appContext, options) {
        var _this = _super.call(this, ClusterInventoryCache.uniqueId, ClusterInventoryCache.uniqueVersion, function (params) { return _this.dataInstanceId(params); }, function (instance) { return _this.dataSerialize(instance); }, function (serialized) { return _this.dataDeserialize(serialized); }, function (params) { return _this.dataQuery(params); }, options) || this;
        _this.appContext = appContext;
        _this.serverInventoryCache = new ServerInventoryCache(appContext);
        return _this;
    }
    /**
     * Defines how to identify the cache entry by params.
     *
     * @param params the server inventory query params.
     * @return {sting} the id string.
     */
    ClusterInventoryCache.prototype.dataInstanceId = function (params) {
        return params.name;
    };
    /**
     * Defines how to deserialize the class object from serialized data.
     *
     * @param serialized the serialized string;
     */
    ClusterInventoryCache.prototype.dataDeserialize = function (serialized) {
        var inventory = JSON.parse(serialized);
        return new ClusterInventory(inventory.clusterName, inventory);
    };
    /**
     * Defines how to serialize the class object to serialized data.
     *
     * @param instance the class instance.
     */
    ClusterInventoryCache.prototype.dataSerialize = function (instance) {
        // automatically stripped out class related data.
        return JSON.stringify(instance);
    };
    /**
     * Defines how to collect the cluster inventory data.
     *
     * @param params the server inventory query params.
     * @return {string} the Observable of ClusterInventory data.
     */
    ClusterInventoryCache.prototype.dataQuery = function (params) {
        var _this = this;
        // options object will be updated at the http layer, so it makes an each copy before passing.
        var options = __assign({}, params.requestOptions);
        var clusterPsSession = this.appContext.powerShell.createSession(params.name, null, options);
        var clusterNodePsSession = this.appContext.powerShell.createSession(params.name, null, options);
        return Observable.zip(this.appContext.powerShell.run(clusterPsSession, PowerShellScripts.Get_ClusterInventory), this.appContext.powerShell.run(clusterNodePsSession, PowerShellScripts.Get_ClusterNodes))
            .map(function (_a) {
            var cluster = _a[0], nodes = _a[1];
            var inventory = new ClusterInventory(params.name);
            if (!cluster || !cluster.results || cluster.results.length === 0) {
                return inventory;
            }
            if (!nodes || !nodes.results || nodes.results.length === 0) {
                return inventory;
            }
            var nodesResult = nodes.results[0];
            var clusterResult = cluster.results[0];
            var nodesResultLower = {};
            // make node name and fqdn are all lower casing.
            inventory.isClusterCmdletAvailable = clusterResult.isClusterCmdletAvailable;
            clusterResult.fqdn = clusterResult.fqdn.toLowerCase();
            inventory.fqdn = clusterResult.fqdn;
            inventory.currentClusterNode = clusterResult.currentClusterNode.toLowerCase();
            inventory.nodeNames = [];
            for (var node in nodesResult) {
                if (node && nodesResult[node] && nodesResult[node].name) {
                    nodesResult[node].name = nodesResult[node].name.toLowerCase();
                    nodesResult[node].fullyQualifiedDomainName = nodesResult[node].fullyQualifiedDomainName.toLowerCase();
                    inventory.nodeNames.push(nodesResult[node].name);
                    var nodeLower = node.toLowerCase();
                    nodesResultLower[nodeLower] = nodesResult[node];
                }
            }
            inventory.isS2dEnabled = clusterResult.isS2DEnabled;
            inventory.isBritannicaEnabled = clusterResult.isBritannicaEnabled;
            inventory.isClusterHealthCmdletAvailable = clusterResult.isClusterHealthCmdletAvailable;
            inventory.isHyperVPowershellInstalled = false;
            inventory.isHyperVRoleInstalled = false;
            inventory.isManagementToolsAvailable = false;
            inventory.isTsdbEnabled = false;
            inventory.nodeMap = nodesResultLower;
            return inventory;
        })
            .flatMap(function (inventory) { return _this.queryClusterNodeInventories(inventory, params); });
    };
    /**
     * Defines how to collect the cluster node-server inventory data.
     * @param clusterInventory  the initial cluster inventory query params.
     * @param params the parameters for cluster inventory query.
     * @return Observable<ClusterInventory> the Observable of ClusterInventory data.
     */
    ClusterInventoryCache.prototype.queryClusterNodeInventories = function (clusterInventory, params) {
        var _this = this;
        if (!clusterInventory.nodeNames || clusterInventory.nodeNames.length === 0) {
            return Observable.of(clusterInventory);
        }
        var serverNames = clusterInventory.nodeNames.map(function (nodeName) { return clusterInventory.nodeMap[nodeName].fullyQualifiedDomainName; });
        var authToken = this.appContext.authorizationManager.getSavedNodeToken(params.name);
        var options = {};
        if (params.requestOptions) {
            options = __assign({}, params.requestOptions);
            if (options.authToken == null && authToken) {
                // override auth token if not there.
                options.authToken = authToken;
            }
        }
        else if (authToken) {
            options.authToken = authToken;
        }
        var batchSession = this.appContext.powerShell.createBatchSession(serverNames, null, options);
        return this.appContext.powerShell.runBatchSingleCommand(batchSession, PowerShellScripts.Get_ServerInventory)
            .map(function (responseItems) {
            for (var index = 0; index < responseItems.length; index++) {
                var currentServer = serverNames[index];
                var serverNameParts = currentServer.split('.');
                var serverName = serverNameParts.length > 1 ? serverNameParts[0] : currentServer;
                var response = responseItems[index];
                if (response.error || response.errors) {
                    // send back the first error.
                    var message = (response.error && response.error.message) ||
                        (response.errors && response.errors[0] && response.errors[0].message);
                    throw new Error(message);
                }
                var data = response.properties;
                var serverInventory = ServerInventoryCache.createServerInventoryData(serverName, data);
                _this.serverInventoryCache.save({ name: serverName }, serverInventory);
                var inventoryServerName = clusterInventory.nodeMap[clusterInventory.currentClusterNode].name;
                if (serverName === inventoryServerName) {
                    clusterInventory.isHyperVPowershellInstalled = serverInventory.isHyperVPowershellInstalled;
                    clusterInventory.isHyperVRoleInstalled = serverInventory.isHyperVRoleInstalled;
                    clusterInventory.isManagementToolsAvailable = serverInventory.isManagementToolsAvailable;
                    clusterInventory.isTsdbEnabled = serverInventory.isTsdbEnabled;
                }
                // combine cluster node inventory and server inventory
                var clusterNodeInventory = new ClusterNodeInventory(serverName);
                var clusterServerInventory = clusterInventory.nodeMap[serverName];
                Object.assign(clusterNodeInventory, serverInventory);
                for (var property in clusterServerInventory) {
                    if (property) {
                        clusterNodeInventory[property] = clusterServerInventory[property];
                    }
                }
                clusterInventory.nodeMap[serverName] = clusterNodeInventory;
            }
            return clusterInventory;
        });
    };
    ClusterInventoryCache.uniqueId = '@msft-sme/shell:clusterInventory';
    ClusterInventoryCache.uniqueVersion = 1; // increment this if you make breaking changes
    return ClusterInventoryCache;
}(SharedCache));
export { ClusterInventoryCache };
//# sourceMappingURL=data:application/json;base64,
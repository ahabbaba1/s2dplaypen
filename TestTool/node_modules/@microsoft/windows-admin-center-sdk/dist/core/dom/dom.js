var Dom = /** @class */ (function () {
    function Dom() {
    }
    /**
     * gets all body elements on the page
     */
    Dom.getAllBodys = function () {
        var root = Dom.getRootElement();
        return Dom.getAllElements(root, Dom.isBody);
    };
    /**
     * Gets a CSS property value
     * @param  {HTMLElement} element The Element
     * @param  {string} property - The CSS property name
     * @returns {any} - The value of the CSS property (type depends on property retrieved)
     */
    Dom.getStyle = function (element, property) {
        if (!element) {
            return null;
        }
        // first try to get the value directly from the element
        var value = element.style[property];
        if (!MsftSme.isNullOrWhiteSpace(value)) {
            return value;
        }
        // otherwise get the computed style
        return getComputedStyle(element)[property];
    };
    /**
     * Gets the classes applied to an element
     * @param  {HTMLElement} element The Element
     * @returns {string[]} - The classes currently applied to the element
     */
    Dom.getClasses = function (element) {
        if (element) {
            var classes = element.className.trim();
            if (!MsftSme.isNullOrWhiteSpace(classes)) {
                return classes.split(' ');
            }
        }
        return [];
    };
    /**
     * Determines is an element is disabled via the 'disabled' attribute
     * @param element The element to start from.
     */
    Dom.isDisabled = function (element) {
        if (!element) {
            return false;
        }
        return !!element['disabled'];
    };
    /**
     * Determines is an element is hidden via css with "display: none"
     * @param element The element to start from.
     */
    Dom.isNotDisplayed = function (element) {
        if (!element) {
            return false;
        }
        return Dom.getStyle(element, 'display') === 'none';
    };
    /**
     * Determines is an element is hidden via css with "visibility: hidden"
     * @param element The element to start from.
     */
    Dom.isHidden = function (element) {
        if (!element) {
            return false;
        }
        return Dom.getStyle(element, 'visibility') === 'hidden';
    };
    /**
     * Returns the first element in the current elements ancestory that is focusable.
     *
     * 'Focusable' is defined as the following:
     *  - input, select, textarea, button, object
     *  - anchor with href
     *  - have a non-negative tab index
     *
     * An element is not focusable if any of the following is true (even if it meets a condition above)
     *  - negative tab index
     *  - disabled
     *  - display: none
     *  - visibility: hidden
     *
     * @param element The element to start from.
     * @return the first focusable ancestor of the element
     */
    Dom.isFocusable = function (element, includeNegativeTabIndex) {
        if (includeNegativeTabIndex === void 0) { includeNegativeTabIndex = false; }
        if (!element) {
            return false;
        }
        // if the element is disabled(or ancestor is disabled) or 'not displayed'/hidden, it is not focusable
        if (Dom.isDisabled(element) || !!Dom.getAncestorDisabled(element) || Dom.isNotDisplayed(element) || Dom.isHidden(element)) {
            return false;
        }
        // if the tab index is set, let it determine focusability
        // have to check has attribute because
        // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4365703/
        if (element.hasAttribute('tabindex') && !MsftSme.isNullOrUndefined(element.tabIndex)) {
            return element.tabIndex >= 0 || (includeNegativeTabIndex && !element.classList.contains('sme-hidden-focus'));
        }
        // anchors with an href are also focusable
        if (element.tagName === 'A' && element.hasAttribute('href')) {
            return true;
        }
        // Otherwise only naturably focusable elements can recieve focus
        var focusableTags = ['INPUT', 'SELECT', 'TEXTAREA', 'BUTTON', 'OBJECT'];
        return focusableTags.some(function (tag) { return tag === element.tagName; });
    };
    /**
     * Returns the first element in the current elements ancestory that is focusable.
     * Will return the element itself if it is focusable
     * @param element The element to start from.
     * @return the first focusable ancestor of the element
     */
    Dom.getFocusableAncestor = function (element) {
        if (!element) {
            return null;
        }
        return Dom.isFocusable(element) ? element : Dom.getFocusableAncestor(element.parentElement);
    };
    /**
     * find an element in a particular position with a specific condition relative to input element
     * Does a DFS for this element relative the ancestor zone of input element
     * @param element The current element
     * @param condition The function to check the kind of element we are looking for
     * @param position The ElementPosition of the desired element relative to input element
     */
    Dom.findElementFromAncestorZoneDFS = function (element, condition, position) {
        var ancestor = Dom.getAncestorZone(element);
        var allElements = Dom.getAllElements(ancestor, condition);
        return Dom.getElement(allElements, element, position);
    };
    /**
     * find an element in a particular position with a specific condition relative to input element
     * Does a DFS for this element relative the ancestor trap of input element
     * @param element The current element
     * @param condition The function to check the kind of element we are looking for
     * @param position The ElementPosition of the desired element relative to input element
     */
    Dom.findElementFromAncestorTrapDFS = function (element, condition, position) {
        var ancestor = Dom.getAncestorTrap(element);
        var allElements = Dom.getAllElements(ancestor, condition);
        return Dom.getElement(allElements, element, position);
    };
    /**
     * find an element in a particular position with a specific condition relative to input element
     * Does a DFS for this element relative the root of the graph
     * @param element The current element
     * @param condition The function to check the kind of element we are looking for
     * @param position The ElementPosition of the desired element relative to input element
     */
    Dom.findElementFromRootDFS = function (element, condition, position) {
        var root = Dom.getRootElement();
        var allElements = Dom.getAllElements(root, condition);
        return Dom.getElement(allElements, element, position);
    };
    /**
     * find an element in a particular position with a specific condition relative to input element
     * Does a DFS for this element relative the input element
     * @param element The current element
     * @param condition The function to check the kind of element we are looking for
     * @param position The ElementPosition of the desired element relative to input element
     */
    Dom.findChildElementDFS = function (element, condition, position) {
        var allElements = Dom.getAllElements(element, condition);
        return Dom.getElement(allElements, element, position);
    };
    /**
     * gets a element from a list of elements in the position relative to the current element
     * @param elements the list of elements
     * @param currentElement the current element
     * @param position the ElementPosition we want relative to the current element
     */
    Dom.getElement = function (elements, currentElement, position) {
        if (elements && elements.length > 0) {
            var currentIndex = 0;
            switch (position) {
                case ElementPosition.Next:
                    currentIndex = elements.findIndex(function (x) { return x.isSameNode(currentElement); });
                    return currentIndex + 1 < elements.length ? elements[currentIndex + 1] : currentElement;
                case ElementPosition.Previous:
                    currentIndex = elements.findIndex(function (x) { return x.isSameNode(currentElement); });
                    return currentIndex - 1 >= 0 ? elements[currentIndex - 1] : currentElement;
                case ElementPosition.First:
                    return elements.first();
                case ElementPosition.Last:
                    return elements.last();
                default:
                    return currentElement;
            }
        }
        return null;
    };
    /**
     * finds all elements starting at the input element that meet the given condition
     * @param element the element from which to start the depth first search
     * @param condition the function that determines whether the desired condition has been met
     */
    Dom.getAllElements = function (element, condition) {
        if (!element) {
            return null;
        }
        // depth first search starting at element
        var allElements = [];
        var conditionalElements = [];
        allElements.push(element);
        while (allElements.length > 0) {
            var currentElement = allElements.pop();
            if (currentElement.tagName !== 'SVG') {
                if (condition(currentElement)) {
                    conditionalElements.push(currentElement);
                }
                for (var i = currentElement.childElementCount - 1; i >= 0; i--) {
                    var child = currentElement.children.item(i);
                    allElements.push(child);
                }
                // if the current element is an iframe, start traversing the iframe's body
                try {
                    if (currentElement.contentDocument && currentElement.contentDocument.body) {
                        allElements.push(currentElement.contentDocument.body);
                    }
                }
                catch (error) {
                    // if we can't grab the content document, then we are very likely sideloading a tool in chrome
                    // you can disable same origin security policy to test accessibility or try in edge
                    // if this happens, we want to just get as much information as we can about the available elements
                    // TODO: log this when this code is moved to different file
                }
            }
        }
        // we need to reverse to get the actual order of elements on the page
        return conditionalElements;
    };
    /**
     * returns the root of the DOM graph
     */
    Dom.getRootElement = function () {
        // we want to try to grab the document body from the window because document.body gives us the body of the current iframe only
        try {
            if (window.parent && window.parent.document && window.parent.document.body) {
                return window.parent.document.body;
            }
        }
        catch (error) {
            // if we can't grab the document from the window, then we are very likely sideloading a tool in chrome
            // you can disable same origin security policy to test accessibility or try in edge
            // if this happens, we want to just get as much information as we can about the available elements
            // TODO: log this when this code is moved to different file
        }
        return document.body;
    };
    /**
     * Finds the next zone
     * @param element the current zone or an element in the current zone
     */
    Dom.getNextZone = function (element) {
        return Dom.findElementFromRootDFS(Dom.getAncestorZone(element) || element, Dom.isZone, ElementPosition.Next);
    };
    /**
     * gets the first focusable element in the next zone
     * if a zone has no focusable elements, it is skipped
     * @param element the current element
     */
    Dom.getNextZoneElement = function (element) {
        if (!element) {
            return null;
        }
        // we are at the end of the page
        var nextZone = Dom.getNextZone(element);
        if (element.isSameNode(nextZone)) {
            return null;
        }
        var firstFocusableElement = Dom.getFirstFocusableDescendent(nextZone);
        return firstFocusableElement ? firstFocusableElement : Dom.getNextZoneElement(nextZone);
    };
    /**
     * Finds the previous zone
     * @param element the current zone or an element in the current zone
     */
    Dom.getPreviousZone = function (element) {
        return Dom.findElementFromRootDFS(Dom.getAncestorZone(element), Dom.isZone, ElementPosition.Previous);
    };
    /**
     * gets the first focusable element in the previous zone
     * if a zone has no focusable elements, it is skipped
     * @param element the current element
     * @param originalElement the element from which we begin the search. Set automatically if unset by user
     */
    Dom.getPreviousZoneElement = function (element, originalElement) {
        if (!element) {
            return null;
        }
        // save the first element we see so we can skip empty zones later on
        if (!originalElement) {
            return Dom.getPreviousZoneElement(element, element);
        }
        // we are at the beginning of the page
        var previousZone = Dom.getPreviousZone(element);
        if (previousZone.isSameNode(element)) {
            return null;
        }
        var firstFocusableElement = Dom.getFirstFocusableDescendent(previousZone);
        return firstFocusableElement && firstFocusableElement !== originalElement ?
            firstFocusableElement : Dom.getPreviousZoneElement(previousZone, originalElement);
    };
    /**
     * gets the first ancestor that is disabled
     * @param element the element
     */
    Dom.getAncestor = function (element, condition) {
        if (!element) {
            return null;
        }
        return condition(element) ? element : Dom.getAncestor(element.parentElement, condition);
    };
    /**
     * gets the zone that the current element is in
     * @param element the element
     */
    Dom.getAncestorZone = function (element) {
        return Dom.getAncestor(element, function (e) { return Dom.isZone(e); });
    };
    /**
     * determine if an element is in a trap, if so return the trap element
     * @param element HTML element to check
     */
    Dom.getAncestorTrap = function (element) {
        return Dom.getAncestor(element, function (e) { return Dom.isTrap(e); });
    };
    /**
     * gets the ancestor form of an element
     * @param element the element
     */
    Dom.getAncestorForm = function (element) {
        return Dom.getAncestor(element, function (e) { return Dom.isForm(e); });
    };
    /**
     * gets the first ancestor that is disabled
     * @param element the element
     */
    Dom.getAncestorDisabled = function (element) {
        return Dom.getAncestor(element, function (e) { return Dom.isDisabled(e); });
    };
    /**
     * returns ancestor table of current element
     * @param element the current element
     */
    Dom.getAncestorTable = function (element) {
        return Dom.getAncestor(element, function (e) { return e.tagName === 'TABLE'; });
    };
    /**
     * gets the next child zone of the current zone
     * @param element the current zone or an element in the current zone
     */
    Dom.getDescendentZone = function (element) {
        // if there is no parent zone, just look from the current element forward
        return Dom.findChildElementDFS(Dom.getAncestorZone(element) || element, Dom.isZone, ElementPosition.First);
    };
    /**
     * gets the first focusable descendent of the current element
     * @param element the current element
     */
    Dom.getFirstFocusableDescendent = function (element) {
        if (!element) {
            return null;
        }
        return Dom.isFocusable(element) ?
            element : Dom.getFirstFocusableDescendent(Dom.findChildElementDFS(element, Dom.isFocusable || Dom.isZone, ElementPosition.First));
    };
    Dom.getLastElementInZone = function (element) {
        return Dom.findElementFromAncestorZoneDFS(element, Dom.isFocusable, ElementPosition.Last);
    };
    Dom.getFirstElementInZone = function (element) {
        return Dom.findElementFromAncestorZoneDFS(element, Dom.isFocusable, ElementPosition.First);
    };
    /**
     * gets the next focusable element in the current zone
     * @param element the current element
     */
    Dom.getNextFocusableElement = function (element) {
        return Dom.findElementFromAncestorZoneDFS(element, Dom.isFocusable, ElementPosition.Next);
    };
    /**
     * gets the previous focusable element in the current zone
     * @param element the current element
     */
    Dom.getPreviousFocusableElement = function (element) {
        return Dom.findElementFromAncestorZoneDFS(element, Dom.isFocusable, ElementPosition.Previous);
    };
    /**
     * gets the ancestor of an element that meets the specified condition
     * @param element the current element
     * @param condition the function that will check if element meets the desired condition
     */
    Dom.getSpecificAncestor = function (element, condition) {
        if (!element) {
            return null;
        }
        return condition(element) ? element : Dom.getSpecificAncestor(element.parentElement, condition);
    };
    /**
     * gets the next focusable element in the current trap
     * @param element the current element
     */
    Dom.getNextFocusableElementInTrap = function (element) {
        return Dom.findElementFromAncestorTrapDFS(element, Dom.isFocusable, ElementPosition.Next);
    };
    /**
     * gets the previous focusable element in the current trap
     * @param element the current element
     */
    Dom.getPreviousFocusableElementInTrap = function (element) {
        return Dom.findElementFromAncestorTrapDFS(element, Dom.isFocusable, ElementPosition.Previous);
    };
    /**
     * true if given element is a body element
     * @param element the element
     */
    Dom.isBody = function (element) {
        return element.tagName === 'BODY';
    };
    /**
     * true if the given element is a zone
     * @param element the element
     */
    Dom.isZone = function (element) {
        if (!element) {
            return false;
        }
        var role = element.getAttribute('role');
        var zoneRoles = ['grid', 'tablist', 'table', 'menubar', 'navigation', 'dialog'];
        var tag = element.tagName;
        // TODO: utilities should not know about specific sme tags.
        // These tags should instead use the appropriete roles to identify them as focus zones.
        // 'form' is ok because it is a standard html5 element.
        var zoneTags = ['FORM', 'SME-ACTION-BAR', 'SME-BREADCRUMB-HEADER', 'SME-DETAILS', 'SME-SETTINGS-FOOTER'];
        return zoneRoles.some(function (zoneRole) { return zoneRole === role; })
            || element.classList.contains('sme-focus-zone')
            || zoneTags.some(function (zoneTag) { return zoneTag === tag; })
            || (element.classList.contains('growl') && element.childElementCount > 0);
    };
    /**
     * true if the given element is a trap
     * @param element the element
     */
    Dom.isTrap = function (element) {
        if (!element) {
            return false;
        }
        var role = element.getAttribute('role');
        var trapRoles = ['dialog', 'alertdialog'];
        return trapRoles.some(function (trapRole) { return trapRole === role; }) || element.classList.contains('sme-focus-trap');
    };
    /**
     * return true if element is a form
     * @param element the element
     */
    Dom.isForm = function (element) {
        if (!element) {
            return false;
        }
        return element.tagName === 'FORM';
    };
    /**
     * return true if we are inside a search box that has its own arrow key controls
     * @param element the element
     * @param isRightArrow the right arrow was clicked
     */
    Dom.useArrowKeysWithinSearchbox = function (element, isRightArrow) {
        if (!element) {
            return false;
        }
        if (Dom.isSearchBox(element)) {
            var inputElement = element;
            var innerTextLength = inputElement.value ? inputElement.value.length : 0;
            return (!isRightArrow && inputElement.selectionStart !== null && inputElement.selectionStart > 0)
                || (isRightArrow && inputElement.selectionEnd !== null && inputElement.selectionEnd < innerTextLength);
        }
        return false;
    };
    /**
     * true if given element is a search box
     * @param element the element
     */
    Dom.isSearchBox = function (element) {
        if (!element) {
            return false;
        }
        var inputElement = element;
        return element.tagName === 'INPUT' && inputElement && inputElement.type === 'search';
    };
    /**
     * returns the next row in the current table
     * @param element the current element
     */
    Dom.getNextRowInTable = function (element) {
        return Dom.findElementFromAncestorZoneDFS(element, Dom.isTableRow, ElementPosition.Next);
    };
    /**
     * returns the previous row in the current table
     * @param element the current element
     */
    Dom.getPreviousRowInTable = function (element) {
        return Dom.findElementFromAncestorZoneDFS(element, Dom.isTableRow, ElementPosition.Previous);
    };
    /**
     * returns true if the current element is a table row
     * @param element the current element
     */
    Dom.isTableRow = function (element) {
        return element.tagName === 'TR';
    };
    /**
     * returns true if the current element is a table cell
     * @param element the current element
     */
    Dom.isTableCell = function (element) {
        return element.tagName === 'TD';
    };
    /**
     * returns true if the current element is inside a table cell
     * @param element the current element
     */
    Dom.isInTableCell = function (element) {
        if (!element) {
            return false;
        }
        return Dom.isTableCell(element) ? true : Dom.isInTableCell(element.parentElement);
    };
    /**
     * Gets the first action bar on the screen.
     * @param element The HTML element.
     * @returns The first action bar on the screen.
     */
    Dom.getFirstActionBar = function (element) {
        return this.getActionBar(element, ElementPosition.First);
    };
    /**
     * Gets the next action bar on the screen.
     * @param element The HTML element.
     * @returns The first action bar on the screen.
     */
    Dom.getNextActionBar = function (element) {
        return this.getActionBar(element, ElementPosition.Next);
    };
    /**
     * Gets a specified action bar.
     * @param element The HTML element.
     * @param position The position of the desired action bar.
     * @returns The specified action bar, if possible.
     */
    Dom.getActionBar = function (element, position) {
        return Dom.getFirstFocusableDescendent(Dom.findElementFromRootDFS(Dom.getAncestorZone(element), function (x) { return Dom.isActionBar(x); }, position));
    };
    /**
     * Determines if the HTML element is inside of an action bar.
     * @param element The HTML element.
     * @returns True if the HTML element is in an action bar and false if not.
     */
    Dom.isInActionBar = function (element) {
        return MsftSme.isNullOrUndefined(Dom.getSpecificAncestor(element, function (x) { return Dom.isActionBar(x); })) ? false : true;
    };
    /**
     * Determines if the HTML element is an action bar.
     * @param element The HTML element.
     * @returns True if the element is an action bar and false if not.
     */
    Dom.isActionBar = function (element) {
        return MsftSme.isNullOrUndefined(element) ? false : element.tagName === 'SME-ACTION-BAR';
    };
    /**
     * Determines if we should treat enter as click for a certain element
     * @param element The HTML element to check
     */
    Dom.shouldTreatEnterAsClick = function (element) {
        if (!element) {
            return false;
        }
        var inputElement = element;
        // TODO: More types of elements may be added here
        return element.tagName === 'INPUT' && inputElement && inputElement.type === 'file';
    };
    /**
     * Check tab list aria-selected with active status
     */
    Dom.checkActiveTab = function () {
        var tablists = document.querySelectorAll("[role='tablist']");
        for (var _i = 0, _a = Array.from(tablists); _i < _a.length; _i++) {
            var tablist = _a[_i];
            // As all controls should, the <sme-pivot> handles accessibility internally.
            if (tablist.parentElement.tagName !== 'SME-PIVOT') {
                Dom.updateAriaSelect(tablist, false);
            }
        }
    };
    /**
     * Update tab aria-selected status
     * @param element The HTML element.
     * @param isActive The HTML element is active or inactive.
     */
    Dom.updateAriaSelect = function (currentElement, isActive) {
        if (!currentElement) {
            return;
        }
        if (currentElement.classList.contains('active') || currentElement.classList.contains('sme-active')) {
            isActive = true;
        }
        if (currentElement.getAttribute('aria-selected') && !isActive) {
            currentElement.setAttribute('aria-selected', 'false');
        }
        if (currentElement.getAttribute('role') === 'tab' && isActive) {
            currentElement.setAttribute('aria-selected', 'true');
        }
        for (var _i = 0, _a = Array.from(currentElement.children); _i < _a.length; _i++) {
            var childElement = _a[_i];
            Dom.updateAriaSelect(childElement, isActive);
        }
    };
    return Dom;
}());
export { Dom };
/**
 * describes the position of the desired element in a list of elements
 */
export var ElementPosition;
(function (ElementPosition) {
    ElementPosition[ElementPosition["First"] = 0] = "First";
    ElementPosition[ElementPosition["Previous"] = 1] = "Previous";
    ElementPosition[ElementPosition["Next"] = 2] = "Next";
    ElementPosition[ElementPosition["Last"] = 3] = "Last";
})(ElementPosition || (ElementPosition = {}));
//# sourceMappingURL=data:application/json;base64,
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Observable, Subject } from 'rxjs';
import { headerConstants, HttpStatusCode } from '../data/http-constants';
import { Net } from '../data/net';
import { Logging } from '../diagnostics/logging';
import { RpcForwarder, RpcServiceForwarder } from '../rpc/rpc-forwarder';
/**
 * Authorization Manager class. Handles SME authentication for service requests.
 */
var AuthorizationManager = /** @class */ (function (_super) {
    __extends(AuthorizationManager, _super);
    /**
     * Initializes a new instance of the Authorization Manager class
     * @param authorize An AuthorizationHandler with which to retrieve user credentials
     * @param rpc The rpc to forward auth requests to a parent window
     */
    function AuthorizationManager(authorize, rpc) {
        var _this = _super.call(this, 'authorization-manager', rpc) || this;
        _this.authorize = authorize;
        /**
         * Create a map of nodeNames to token objects to hold node specific tokens.
         */
        _this.nodeTokens = {};
        /**
         * The mapping of connections to PowershellEndpoints
         */
        _this.nodePowershellEndpoints = {};
        return _this;
    }
    Object.defineProperty(AuthorizationManager.prototype, "manageAsToken", {
        /**
         * Gets the current manage as token
         */
        get: function () {
            return this.token;
        },
        /**
         * Sets the current manage as token
         * If running with an Rpc child, notify of the change
         */
        set: function (token) {
            this.token = token;
            this.nodePowershellEndpoints = {};
            this.forwardNotify(1 /* Child */, AuthorizationManager.rpcCommands.manageAsToken, token);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AuthorizationManager.prototype, "gatewayJwk", {
        /**
         * Sets the gateway encryption certificate JWK.
         * If this is not set by Shell/Add-Connection, it will send clear text password.
         */
        set: function (jwk) {
            this.jwk = jwk;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AuthorizationManager.prototype, "authAwaiter", {
        /**
         * Gets an observable the emits when the authorization token is ready
         */
        get: function () {
            if (this.tokenAwaiter && !this.tokenAwaiter.closed) {
                // return the global token
                return this.tokenAwaiter;
            }
            // return the global token
            return Observable.of({ appliesTo: null, token: this.manageAsToken });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * defines the conditions under which the AuthorizationManager can handle an ajax error
     */
    AuthorizationManager.prototype.canHandleAjaxFailure = function (code, error) {
        // we can handle ajax errors if we have a getter defined, and the code is Unauthorized (401) or we get a cim authorization failure
        return this.authorize && code === HttpStatusCode.Unauthorized;
    };
    /**
     * When canHandle returns true for an ajax error, this method can be called to handle that error.
     */
    AuthorizationManager.prototype.handleAjaxFailure = function (code, request, error, nodeName) {
        var _this = this;
        return this.getNewToken(nodeName).flatMap(function (response) {
            // There may be multiple nodes requesting authentication, but we can only ask the user for one.
            // check if the result if for our node, otherwise try again.
            // It looks for inside of array only for first name.
            var names = response.appliesTo;
            var isTokenForNode = !names || names === nodeName || (Array.isArray(names) && names[0] === nodeName);
            if (isTokenForNode) {
                // this token applies to our node, so continue
                _this.addAuthorizationRequestHeader(request, nodeName);
                return Observable.of(request);
            }
            else {
                // this token did not apply to our node. Ask again.
                return _this.handleAjaxFailure(code, request, error, nodeName);
            }
        });
    };
    AuthorizationManager.prototype.saveJeaContext = function (nodeName, endpoint) {
        Logging.trace({
            view: 'sme-ui-control',
            instance: 'saveJeaContext',
            action: 'command-click',
            data: { message: 'Establishing session using JEA endpoint' }
        });
        this.nodePowershellEndpoints[nodeName.toLocaleLowerCase()] = endpoint;
        this.forwardNotify(1 /* Child */, AuthorizationManager.rpcCommands.setJeaContext, { nodeName: nodeName, endpoint: endpoint });
    };
    AuthorizationManager.prototype.getJeaEndpoint = function (nodeName) {
        return this.nodePowershellEndpoints[nodeName.toLocaleLowerCase()];
    };
    AuthorizationManager.prototype.getNewToken = function (nodeNames) {
        var _this = this;
        // if we are already awaiting a token, then hook into the current request and try using that token
        if (this.tokenAwaiter && !this.tokenAwaiter.closed) {
            return this.tokenAwaiter;
        }
        // ensure input is an array only if not null.
        if (nodeNames && !Array.isArray(nodeNames)) {
            nodeNames = [nodeNames];
        }
        // define a new subject for multiple requests to wait on
        this.tokenAwaiter = new Subject();
        // try to forward execute getNewToken from our parent
        var parentExecuter = this.forwardExecute(0 /* Parent */, AuthorizationManager.rpcCommands.getNewToken, [nodeNames]);
        if (parentExecuter) {
            return this.tokenAwaiter;
        }
        // Need to clear the endpoints before we acquire a new token,
        // because we must try new credentials in an admin context before any fallback happens.
        if (nodeNames) {
            for (var _i = 0, _a = nodeNames; _i < _a.length; _i++) {
                var node = _a[_i];
                this.nodePowershellEndpoints[node.toLocaleLowerCase()] = null;
            }
        }
        // since we could not forward the request We must ask for the auth token ourselves
        this.authorize(nodeNames)
            .flatMap(function (credentials) {
            if (credentials.applyToAllNodes) {
                _this.nodeTokens = {};
                var forward = _this.forwardExecute(1 /* Child */, AuthorizationManager.rpcCommands.clearNodeTokens, []);
                if (forward) {
                    return forward.map(function () { return credentials; });
                }
            }
            return Observable.of(credentials);
        })
            .flatMap(function (credentials) {
            var appliesTo = credentials.applyToAllNodes ? null : nodeNames || null;
            return _this.createSecureToken({
                username: credentials.username,
                password: credentials.password,
                useLaps: credentials.useLaps,
                lapsLocalAdminName: credentials.lapsLocalAdminName
            })
                .map(function (token) {
                return {
                    token: token,
                    appliesTo: appliesTo
                };
            });
        })
            .take(1)
            .subscribe(function (result) {
            _this.completeTokenAwaiter(result);
            _this.forwardNotify(1 /* Child */, AuthorizationManager.rpcCommands.setNodeToken, result);
        }, function (error) {
            _this.completeTokenAwaiter(null, error);
            _this.forwardNotify(1 /* Child */, AuthorizationManager.rpcCommands.setNodeTokenError, RpcForwarder.ensureSerializable(error));
        });
        return this.tokenAwaiter;
    };
    /**
     * @deprecated use createSecureToke() after configured gatewayJwk property.
     *
     * Creates a token from the given options that may be used for node authentication
     * @param options The token creation options
     */
    AuthorizationManager.prototype.createToken = function (options) {
        // ensure a valid value for laps local admin name
        if (MsftSme.isNullOrWhiteSpace(options.lapsLocalAdminName)) {
            options.lapsLocalAdminName = AuthorizationManager.defaultLapsLocalAdminName;
        }
        // ensure username has a valid value
        if (MsftSme.isNullOrWhiteSpace(options.username)) {
            options.username = null;
        }
        if (options.useLaps || !options.username) {
            return {
                value: null,
                username: null,
                useLaps: options.useLaps,
                lapsLocalAdminName: options.lapsLocalAdminName
            };
        }
        // ensure password has a valid value
        if (MsftSme.isNullOrWhiteSpace(options.password)) {
            options.password = null;
        }
        var username;
        if (options.username.indexOf('@') >= 0) {
            username = options.username.split('@').reverse();
        }
        else {
            username = options.username.split('\\');
        }
        var token = Net.createEncodedAuthenticationHeader(username, options.password);
        return {
            value: token,
            username: options.username,
            useLaps: false,
            lapsLocalAdminName: null
        };
    };
    /**
     * Creates a secure token from the given options that may be used for node authentication
     *
     * @param options The token creation options
     */
    AuthorizationManager.prototype.createSecureToken = function (options) {
        var forward = this.forwardExecute(0 /* Parent */, AuthorizationManager.rpcCommands.secureToken, [options]);
        if (forward) {
            return forward;
        }
        else {
            return this.secureToken(options);
        }
    };
    /**
     * Creates a secure token from the given options that may be used for node authentication
     *
     * @param options The token creation options
     */
    AuthorizationManager.prototype.secureToken = function (options) {
        // ensure a valid value for laps local admin name
        if (MsftSme.isNullOrWhiteSpace(options.lapsLocalAdminName)) {
            options.lapsLocalAdminName = AuthorizationManager.defaultLapsLocalAdminName;
        }
        // ensure username has a valid value
        if (MsftSme.isNullOrWhiteSpace(options.username)) {
            options.username = null;
        }
        if (options.useLaps || !options.username) {
            return Observable.of({
                value: null,
                username: null,
                useLaps: options.useLaps,
                lapsLocalAdminName: options.lapsLocalAdminName
            });
        }
        // ensure password has a valid value
        if (MsftSme.isNullOrWhiteSpace(options.password)) {
            options.password = null;
        }
        var username;
        if (options.username.indexOf('@') >= 0) {
            username = options.username.split('@').reverse();
        }
        else {
            username = options.username.split('\\');
        }
        var tokenData = {
            value: undefined,
            username: options.username,
            useLaps: false,
            lapsLocalAdminName: null
        };
        if (this.jwk) {
            return Net.createEncryptedAuthenticationHeader(this.jwk, username, options.password).map(function (newToken) {
                tokenData.value = newToken;
                return tokenData;
            });
        }
        tokenData.value = Net.createEncodedAuthenticationHeader(username, options.password);
        return Observable.of(tokenData);
    };
    /**
     * Completes the token awaiter
     */
    AuthorizationManager.prototype.completeTokenAwaiter = function (result, error) {
        var _this = this;
        if (error) {
            if (this.tokenAwaiter) {
                var awaiter = this.tokenAwaiter;
                this.tokenAwaiter = null;
                awaiter.error(error);
            }
        }
        else {
            if (!result.appliesTo) {
                this.manageAsToken = result.token;
            }
            else if (Array.isArray(result.appliesTo)) {
                result.appliesTo.forEach(function (nodeName) {
                    _this.nodeTokens[nodeName.toLocaleLowerCase()] = result.token;
                });
            }
            else {
                this.nodeTokens[result.appliesTo.toLocaleLowerCase()] = result.token;
            }
            if (this.tokenAwaiter) {
                var awaiter = this.tokenAwaiter;
                this.tokenAwaiter = null;
                awaiter.next(result);
                awaiter.complete();
            }
        }
    };
    /**
     * Get the saved Auth token for a node.
     *
     * @param nodeName The nodeName to get token for.
     */
    AuthorizationManager.prototype.getSavedNodeToken = function (nodeName) {
        if (nodeName && this.nodeTokens[nodeName.toLocaleLowerCase()]) {
            return this.nodeTokens[nodeName.toLocaleLowerCase()];
        }
        return this.manageAsToken;
    };
    /**
     * Adds a authorization header to a request given a node with a manageAsToken
     * @param request The request to add headers to
     * @param nodeName optional. The node to add headers for if not provided, the global token will be used
     * @param token optional. The token to use for the headers. if provided, the nodeName is not used.
     */
    AuthorizationManager.prototype.addAuthorizationRequestHeader = function (request, nodeName, token) {
        if (!token) {
            token = this.manageAsToken;
            if (nodeName && this.nodeTokens[nodeName.toLocaleLowerCase()]) {
                token = this.nodeTokens[nodeName.toLocaleLowerCase()];
            }
        }
        if (token) {
            if (token.value) {
                // If username and password are explicitly provided, we only add the Authorization header. 
                request.headers[headerConstants.SME_AUTHORIZATION] = token.value;
            }
            else {
                // If not, we add useLaps header.
                request.headers[headerConstants.USE_LAPS] = token.useLaps;
                request.headers[headerConstants.LAPS_LOCALADMINNAME] = token.lapsLocalAdminName;
            }
        }
    };
    /**
     * Create token headers.
     *
     * @param nodeName the node name.
     * @param token the token to override current setting (optional).
     */
    AuthorizationManager.prototype.createTokenHeaders = function (nodeName, token) {
        var headers = {};
        token = token || this.getSavedNodeToken(nodeName);
        if (token) {
            if (token.value) {
                // If username and password are explicitly provided, we only add the Authorization header. 
                headers[headerConstants.SME_AUTHORIZATION] = token.value;
            }
            else {
                // If not, we add useLaps header.
                headers[headerConstants.USE_LAPS] = token.useLaps ? 'true' : 'false';
                headers[headerConstants.LAPS_LOCALADMINNAME] = token.lapsLocalAdminName;
            }
        }
        return headers;
    };
    /**
     * Adds a authorization header to a request given a node with a manageAsToken
     */
    AuthorizationManager.prototype.addAuthorizationTokensToMultiPartBody = function (body, nodeName, token) {
        if (!token) {
            token = this.manageAsToken;
            if (nodeName && this.nodeTokens[nodeName.toLocaleLowerCase()]) {
                token = this.nodeTokens[nodeName.toLocaleLowerCase()];
            }
        }
        if (token) {
            if (token.value) {
                // If username and password are explicitly provided, we only add the Authorization header. 
                body.push(headerConstants.SME_AUTHORIZATION + ': ' + token.value);
            }
            else {
                // If not, we add useLaps header.
                body.push(headerConstants.USE_LAPS + ': ' + token.useLaps);
                body.push(headerConstants.LAPS_LOCALADMINNAME + ': ' + token.lapsLocalAdminName);
            }
        }
    };
    /**
     * Called on a child service instance when onForwardInit returns from the parent
     * @param data The response from the forwardInit call
     */
    AuthorizationManager.prototype.onForwardInitResponse = function (data) {
        if (data && data.error) {
            // if there is an error, we cannot continue, so throw it
            throw data.error;
        }
        this.manageAsToken = data.result.manageAsToken;
        this.nodeTokens = data.result.nodeTokens;
        this.nodePowershellEndpoints = data.result.nodePowershellEndpoints;
    };
    /**
     * Called when a new instance of the service in another window is initialized and needs to synchronize with its parent
     * @param from The RpcRelationshipType that this request is from
     * @returns an observable for the all the values needed to initialize the service
     */
    AuthorizationManager.prototype.onForwardInit = function () {
        // authorization manager doesn't pass any properties to child services at this time.
        return Observable.of({
            manageAsToken: this.manageAsToken,
            nodeTokens: this.nodeTokens,
            nodePowershellEndpoints: this.nodePowershellEndpoints
        });
    };
    /**
     * Called when the forwarded services counterpart wants to get data from the parent
     * @param from The RpcRelationshipType that this request is from
     * @param name The name of the method to forward to
     * @param args The arguments of the method
     * @returns an observable for the result of the method call
     */
    AuthorizationManager.prototype.onForwardExecute = function (from, name, args) {
        var _this = this;
        // command comes from child
        if (from === 1 /* Child */) {
            switch (name) {
                case AuthorizationManager.rpcCommands.getNewToken:
                    // start getting the new token, but return immediately to avoid timeout
                    var subscription_1 = this.getNewToken(args ? args[0] : null).subscribe(function (result) {
                        subscription_1.unsubscribe();
                    }, function (error) {
                        subscription_1.unsubscribe();
                        _this.forwardNotify(1 /* Child */, AuthorizationManager.rpcCommands.setNodeTokenError, RpcForwarder.ensureSerializable(error));
                    });
                    return Observable.of(null);
                case AuthorizationManager.rpcCommands.secureToken:
                    var options = args && args[0];
                    if (!options) {
                        return Observable.of(null);
                    }
                    return this.secureToken(options);
            }
        }
        // command comes from parent
        if (from === 0 /* Parent */) {
            if (name === AuthorizationManager.rpcCommands.clearNodeTokens) {
                this.nodeTokens = {};
                this.nodePowershellEndpoints = {};
                // if we also have children, forward the request on
                var forward = this.forwardExecute(1 /* Child */, AuthorizationManager.rpcCommands.clearNodeTokens, args);
                return forward || Observable.of(null);
            }
        }
        // command not implemented
        return this.nameNotFound(name);
    };
    /**
     * Called when the forwarded services counterpart sends a notify message
     * @param from The RpcRelationshipType that this request is from
     * @param name The name of the property to change
     * @param value The new value of the property
     * @returns an observable that completes when the property has been changed.
     */
    AuthorizationManager.prototype.onForwardNotify = function (from, name, value) {
        // allow our parent to give us a new token        
        if (from === 0 /* Parent */) {
            if (name === AuthorizationManager.rpcCommands.manageAsToken) {
                this.manageAsToken = value;
                // if we also have children, forward the notification on
                var forward = this.forwardNotify(1 /* Child */, AuthorizationManager.rpcCommands.manageAsToken, value);
                return forward || Observable.of(null);
            }
            if (name === AuthorizationManager.rpcCommands.setNodeToken) {
                if (!value) {
                    var message = MsftSme.resourcesStrings().MsftSmeShell.Core.Error.InvalidValue.message;
                    return Observable.throw(message.format(AuthorizationManager.rpcCommands.setNodeToken));
                }
                this.completeTokenAwaiter(value);
                var forward = this.forwardNotify(1 /* Child */, AuthorizationManager.rpcCommands.setNodeToken, value);
                return forward || Observable.of(null);
            }
            if (name === AuthorizationManager.rpcCommands.setNodeTokenError) {
                if (!value) {
                    var message = MsftSme.resourcesStrings().MsftSmeShell.Core.Error.InvalidValue.message;
                    return Observable.throw(message.format(AuthorizationManager.rpcCommands.setNodeTokenError));
                }
                this.completeTokenAwaiter(null, value);
                var forward = this.forwardNotify(1 /* Child */, AuthorizationManager.rpcCommands.setNodeTokenError, value);
                return forward || Observable.of(null);
            }
            if (name === AuthorizationManager.rpcCommands.setJeaContext) {
                if (!value) {
                    var message = MsftSme.resourcesStrings().MsftSmeShell.Core.Error.InvalidValue.message;
                    return Observable.throw(message.format(AuthorizationManager.rpcCommands.setJeaContext));
                }
                this.saveJeaContext(value.nodeName, value.endpoint);
                var forward = this.forwardNotify(1 /* Child */, AuthorizationManager.rpcCommands.setJeaContext, value);
                return forward || Observable.of(null);
            }
        }
        return this.nameNotFound(name);
    };
    /**
     * If no laps local admin name is defined, it will default to 'administrator'
     */
    AuthorizationManager.defaultLapsLocalAdminName = 'administrator';
    AuthorizationManager.rpcCommands = {
        setNodeToken: 'setNodeToken',
        manageAsToken: 'manageAsToken',
        setNodeTokenError: 'setNodeTokenError',
        setJeaContext: 'setJeaContext',
        clearNodeTokens: 'clearNodeTokens',
        getNewToken: 'getNewToken',
        secureToken: 'secureToken'
    };
    return AuthorizationManager;
}(RpcServiceForwarder));
export { AuthorizationManager };
//# sourceMappingURL=data:application/json;base64,
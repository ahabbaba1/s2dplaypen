import { Logging, LogLevel } from '../../../core';
import { ResourceService } from '../../service/resource.service';
/**
 * SVG resource class for CSS class.
 */
var SvgResource = /** @class */ (function () {
    /**
     * Initializes a new instance of the SvgResource class.
     *
     * @param svg the svg object generated by gulp-svg-code.
     */
    function SvgResource(svg) {
        this.svg = svg;
        this.svgInlineResource = new SvgInlineResource(this.svg);
    }
    /**
     * Build svg resources from SVG object, and register the resource service.
     *
     * @param resourceService the resource service.
     * @param svg the svg object generated by gulp-svg-code.
     */
    SvgResource.buildRegister = function (resourceService, svg) {
        // register SVG resources to resource service.
        resourceService.register(ResourceService.svgType, new SvgResource(svg));
        resourceService.register(ResourceService.svgInlineType, new SvgInlineResource(svg));
    };
    /**
     * Find SVG string by id.
     *
     * @param id the identification of SVG. (id must be lower case)
     */
    SvgResource.prototype.find = function (id) {
        var result = this.svgInlineResource.findIndex(id);
        if (!result) {
            return null;
        }
        var segments = result.name.split('/');
        return 'svg-' + segments.join('--');
    };
    return SvgResource;
}());
export { SvgResource };
/**
 * SVG inline resource class for ram SVG insertion.
 */
var SvgInlineResource = /** @class */ (function () {
    /**
     * Initializes a new instance of the SvgInlineResource class.
     *
     * @param svg the svg object generated by gulp-svg-code.
     */
    function SvgInlineResource(svg) {
        this.svg = svg;
        this.lowerSvg = this.createLowercaseIndexing(this.svg);
    }
    /**
     * Find SVG string by id.
     *
     * @param id the identification of SVG. (id must be lower case)
     * @return string the Svg resource string.
     */
    SvgInlineResource.prototype.find = function (id) {
        var result = this.lowerSvg[id];
        if (!result) {
            Logging.log({
                level: LogLevel.Warning,
                message: "Unable to find SVG resource for " + id,
                params: {
                    id: id
                },
                source: 'SvgInlineResource'
            });
            return null;
        }
        return result.value;
    };
    /**
     * Find index data.
     *
     * @param id the identification of SVG.
     * @return SvgIndexedData the indexed data.
     */
    SvgInlineResource.prototype.findIndex = function (id) {
        return this.lowerSvg[id];
    };
    /**
     * Create lower case property version.
     *
     * @param svg the original svg data.
     * @return any the lower case version of svg.
     */
    SvgInlineResource.prototype.createLowercaseIndexing = function (svg) {
        var _this = this;
        var newSvg = {};
        var nextCollection = [{ target: svg, path: '' }];
        while (nextCollection.length > 0) {
            var collection = nextCollection;
            nextCollection = [];
            var _loop_1 = function (current) {
                MsftSme.forEachKey(current.target, function (key, value) {
                    var path = _this.nextPath(current.path, key);
                    if (value && typeof value === 'object') {
                        // add to next level traverse.
                        nextCollection.push({ target: value, path: path });
                    }
                    else {
                        // register to the collection.
                        var lower = path.toLowerCase();
                        newSvg[lower] = {
                            name: path,
                            lower: lower,
                            value: value
                        };
                    }
                });
            };
            for (var _i = 0, collection_1 = collection; _i < collection_1.length; _i++) {
                var current = collection_1[_i];
                _loop_1(current);
            }
        }
        return newSvg;
    };
    SvgInlineResource.prototype.nextPath = function (path, key) {
        return path === '' ? key : path + '/' + key;
    };
    return SvgInlineResource;
}());
export { SvgInlineResource };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFuZ3VsYXIvZGlyZWN0aXZlcy9zdmcvc3ZnLXJlc291cmNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFxQixNQUFNLGVBQWUsQ0FBQztBQUNyRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFhakU7O0dBRUc7QUFDSDtJQWVJOzs7O09BSUc7SUFDSCxxQkFBb0IsR0FBUTtRQUFSLFFBQUcsR0FBSCxHQUFHLENBQUs7UUFDeEIsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksaUJBQWlCLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzdELENBQUM7SUFuQkQ7Ozs7O09BS0c7SUFDVyx5QkFBYSxHQUEzQixVQUE0QixlQUFnQyxFQUFFLEdBQVE7UUFDbEUsOENBQThDO1FBQzlDLGVBQWUsQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRSxJQUFJLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3hFLGVBQWUsQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLGFBQWEsRUFBRSxJQUFJLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDeEYsQ0FBQztJQVdEOzs7O09BSUc7SUFDSSwwQkFBSSxHQUFYLFVBQVksRUFBVTtRQUNsQixJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2xELEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUNWLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDaEIsQ0FBQztRQUVELElBQUksUUFBUSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3RDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN4QyxD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
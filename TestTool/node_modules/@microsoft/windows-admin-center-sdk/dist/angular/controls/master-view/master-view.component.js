import { Component, ContentChild, ElementRef, EventEmitter, HostListener, Input, NgZone, Optional, Output, Renderer2, ViewChild } from '@angular/core';
import { SplitViewComponent } from '../split-view';
var MasterViewComponent = /** @class */ (function () {
    function MasterViewComponent(ngZone, splitView, element, renderer) {
        // After the discussion, the plan is still have master view to coordinate with split view as well as tree table and data table.
        // It's a little tricky to let master view to talk to its parent which is the split view.
        // But we do need a component to implement the common behavior on the UI to avoid duplicate code in each tool.
        // At this moment, master view is the most proper component.
        // Long term wise, we will figure out a better component sitting in the top level of the UI to coordinate with other components
        // and implement common behaviors.
        this.ngZone = ngZone;
        this.splitView = splitView;
        this.element = element;
        this.renderer = renderer;
        this.strings = MsftSme.resourcesStrings().MsftSmeShell.Angular.MasterView;
        this.header = '';
        this.total = 0;
        this.showSelection = true;
        this.showRefresh = true;
        this.showFilter = true;
        this.filterActive = false;
        this.refresh = new EventEmitter();
        this.filter = new EventEmitter();
        this.clearSelection = new EventEmitter();
        this.searchable = true;
        this.selectedItemCount = 0;
        this.dataViewHeight = 0;
        this.isDataListScrolledTotop = true;
        // setup host classes
        renderer.addClass(element.nativeElement, 'sme-layout-absolute');
        renderer.addClass(element.nativeElement, 'sme-position-inset-none');
        renderer.addClass(element.nativeElement, 'sme-arrange-stack-v');
        renderer.addClass(element.nativeElement, 'sme-arrange-overflow-hide');
    }
    Object.defineProperty(MasterViewComponent.prototype, "smeDataTable", {
        get: function () {
            return this.internalSmeDataTable;
        },
        set: function (value) {
            this.internalSmeDataTable = value;
            if (this.internalSmeDataTable) {
                this.internalSmeDataTable.tableAriaLabelledBy = 'master-view-header';
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MasterViewComponent.prototype, "selection", {
        set: function (selection) {
            var count = 0;
            if (Array.isArray(selection)) {
                count = selection.length;
            }
            else if (!!selection) {
                count = 1;
            }
            this.selectedItemCount = count;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * The method to run after the component view initialized
     */
    MasterViewComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        setTimeout(function () {
            // The "ngAfterViewInit" is still in current check cycle so we should not update the following UI information immediately.
            // So we use setTimeout to defer the following operations to next check cycle.
            _this.searchable = !!_this.searchElement || !!_this.containerElement.nativeElement.querySelector('input[type="search"]');
            _this.updateLayout();
        });
        if (this.splitView) {
            this.splitViewPaneToggledSubscription = this.splitView.paneToggled.subscribe(function () {
                if (_this.dataView && _this.dataViewHeight !== _this.dataView.nativeElement.clientHeight) {
                    _this.updateLayout();
                }
            });
        }
        if (this.smeDataTable) {
            this.dataTableOnFilterSubscription = this.smeDataTable.onFilter.subscribe(function () {
                if (_this.smeDataTable.selection) {
                    var shouldClearSelection = true;
                    if (!_this.requireDataItemUniqueId) {
                        if (_this.smeDataTable.renderedItems.indexOf(_this.smeDataTable.selection) !== -1) {
                            shouldClearSelection = false;
                        }
                    }
                    else {
                        var selectedItemId = _this.requireDataItemUniqueId(_this.smeDataTable.selection);
                        for (var i = 0; i < _this.smeDataTable.renderedItems.length; i++) {
                            var item = _this.smeDataTable.renderedItems[i];
                            var itemId = _this.requireDataItemUniqueId(item);
                            if (itemId === selectedItemId) {
                                shouldClearSelection = false;
                                break;
                            }
                        }
                    }
                    if (shouldClearSelection) {
                        _this.clearSelection.emit();
                    }
                }
            });
        }
    };
    MasterViewComponent.prototype.ngOnDestroy = function () {
        if (this.splitViewPaneToggledSubscription) {
            this.splitViewPaneToggledSubscription.unsubscribe();
        }
        if (this.dataTableOnFilterSubscription) {
            this.dataTableOnFilterSubscription.unsubscribe();
        }
    };
    MasterViewComponent.prototype.updateLayout = function () {
        this.dataViewHeight = this.dataView.nativeElement.clientHeight;
        if (this.smeDataTable) {
            this.smeDataTable.scrollSelectedItemIntoView();
        }
    };
    MasterViewComponent.prototype.ngDoCheck = function () {
        if (this.smeDataTable) {
            this.handleDetailPaneExpanding(this.smeDataTable);
        }
        else if (this.smeTreeTable) {
            this.handleDetailPaneExpanding(this.smeTreeTable);
        }
    };
    MasterViewComponent.prototype.getItemCountText = function () {
        return this.total === 1 ? this.strings.oneItem : this.strings.items.format(this.total);
    };
    MasterViewComponent.prototype.getSelectedCountText = function () {
        return this.strings.selected.format(this.selectedItemCount);
    };
    MasterViewComponent.prototype.getSelectedCountAriaText = function () {
        return this.strings.selectedAria.format(this.selectedItemCount);
    };
    MasterViewComponent.prototype.handleDetailPaneExpanding = function (dataViewControl) {
        var _this = this;
        if (this.splitView) {
            var newDataSelection = null;
            newDataSelection = dataViewControl.renderedItems[dataViewControl.getActiveRenderedItemIndex()];
            var hasItemSelected = !!newDataSelection;
            if (hasItemSelected && newDataSelection !== this.currentDataSelection) {
                if (!this.currentDataSelection || this.currentDataSelection.length === 0) {
                    setTimeout(function () {
                        if (!_this.splitView.isExpanded) {
                            _this.splitView.togglePane();
                        }
                    });
                }
            }
            this.currentDataSelection = newDataSelection;
        }
    };
    MasterViewComponent.prototype.ensureDataItemIsInViewport = function (dataItemSelector, dataViewScrollableContainerSelector) {
        var _this = this;
        setTimeout(function () {
            var selectedItem = _this.dataView.nativeElement.querySelector(dataItemSelector);
            if (selectedItem) {
                var scrollableBody = _this.dataView.nativeElement.querySelector(dataViewScrollableContainerSelector);
                // This offsetTop is only counting from the top of the data view control and not considering the actual scroll top.
                var offsetTop = selectedItem.getBoundingClientRect().top - scrollableBody.getBoundingClientRect().top;
                // If the selected item is not in the view port, scroll it into view.
                if (!(offsetTop >= 0
                    && offsetTop <= scrollableBody.clientHeight - selectedItem.clientHeight)) {
                    selectedItem.scrollIntoView();
                }
            }
        });
    };
    MasterViewComponent.decorators = [
        { type: Component, args: [{
                    selector: 'sme-master-view',
                    template: "\n      <h3 class=\"sme-position-flex-none sme-padding-squish-v-lg\" *ngIf=\"header\" id='master-view-header'>{{header}}</h3>\n      <div class=\"sme-position-flex-none sme-padding-horizontal-sm sme-arrange-stack-h sme-arrange-stack-reversed\" #container>\n          <!-- Actions -->\n          <ng-content select='sme-action-bar,.action-bar'></ng-content>\n\n          <div class=\"sme-position-flex-none sme-arrange-stack-h sme-padding-horizontal-sm\">\n              <!-- Counts -->\n              <div class=\"sme-focus-zone sme-position-flex-none sme-arrange-ws-nowrap sme-scheme-secondary-text\" [class.sme-margin-right-xs]=\"selectedItemCount === 0 || !showSelection\">\n                  <i class=\"sme-layout-action-bar-item\">{{getItemCountText()}}</i>\n                  <button type=\"button\" role=\"button\" class=\"sme-button-trigger sme-layout-action-bar-item-height sme-scheme-secondary-text sme-button-auto-width\" *ngIf=\"selectedItemCount > 0 && showSelection\" (click)=\"clearSelection.next()\">\n                    <i aria-hidden=\"true\">{{getSelectedCountText()}}</i>\n                    <i class=\"sme-screen-reader\">{{getSelectedCountAriaText()}}</i>\n                    <i aria-hidden class=\"sme-icon sme-icon-clear sme-margin-left-xs\" [title]=\"strings.selectedTitle\"></i>\n                  </button>\n              </div>\n              <!-- Common Actions -->\n              <div class=\"sme-focus-zone\">\n                  <button *ngIf=\"showRefresh\" (click)=\"refresh.next()\" type=\"button\" role=\"button\" [title]=\"strings.refresh.title\" [attr.aria-label]=\"strings.refresh.title\" class=\"sme-layout-action-bar-item-height sme-button-trigger sme-button-auto-width\">\n                    <span class=\"sme-icon sme-icon-refresh\"></span>\n                  </button>\n                  <button *ngIf=\"showFilter\" (click)=\"filter.next()\" type=\"button\" role=\"button\" [title]=\"strings.filter.title\" [attr.aria-label]=\"strings.filter.title\" class=\"sme-layout-action-bar-item-height sme-button-trigger sme-button-auto-width\" [class.sme-toggled]=\"filterActive\">\n                      <span class=\"sme-icon sme-icon-filter\"></span>\n                  </button>\n              </div>\n              <!-- Grouping -->\n              <div class=\"sme-focus-zone\">\n                  <div *ngIf=\"showCustomFilter\" class=\"sme-margin-right-sm\">\n                      <ng-content select='.sme-master-view-custom-filter'></ng-content>\n                  </div>\n              </div>\n              <!-- Search Box -->\n              <div class=\"sme-focus-zone\">\n                  <div *ngIf=\"searchable\" class=\"sme-position-flex-none searchbox sme-layout-action-bar-item sme-margin-right-xl\">\n                      <ng-content select='input[type=search]'></ng-content>\n                  </div>\n              </div>\n          </div>\n      </div>\n      <div #dataView class=\"sme-layout-relative sme-position-flex-auto sme-arrange-stack-h sme-arrange-overflow-hide\" [class.sme-shadow-scrolled-content]='!isDataListScrolledTotop'>\n          <ng-content></ng-content>\n      </div>\n    "
                },] },
    ];
    /** @nocollapse */
    MasterViewComponent.ctorParameters = function () { return [
        { type: NgZone, },
        { type: SplitViewComponent, decorators: [{ type: Optional },] },
        { type: ElementRef, },
        { type: Renderer2, },
    ]; };
    MasterViewComponent.propDecorators = {
        'searchElement': [{ type: ContentChild, args: ['search',] },],
        'containerElement': [{ type: ViewChild, args: ['container',] },],
        'dataView': [{ type: ViewChild, args: ['dataView',] },],
        'smeDataTable': [{ type: ContentChild, args: ['smeDataTable',] },],
        'smeTreeTable': [{ type: ContentChild, args: ['smeTreeTable',] },],
        'header': [{ type: Input },],
        'total': [{ type: Input },],
        'showSelection': [{ type: Input },],
        'showRefresh': [{ type: Input },],
        'showFilter': [{ type: Input },],
        'filterActive': [{ type: Input },],
        'selection': [{ type: Input },],
        'requireDataItemUniqueId': [{ type: Input },],
        'showCustomFilter': [{ type: Input },],
        'refresh': [{ type: Output },],
        'filter': [{ type: Output },],
        'clearSelection': [{ type: Output },],
        'updateLayout': [{ type: HostListener, args: ['window:resize',] },],
    };
    return MasterViewComponent;
}());
export { MasterViewComponent };
//# sourceMappingURL=data:application/json;base64,
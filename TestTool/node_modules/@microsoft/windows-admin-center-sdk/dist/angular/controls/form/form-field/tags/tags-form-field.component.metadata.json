[{"__symbolic":"module","version":3,"metadata":{"TagsFormFieldComponent":{"__symbolic":"class","extends":{"__symbolic":"reference","module":"../form-field.component","name":"SmeInternalFormFieldComponent"},"decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component"},"arguments":[{"selector":"sme-form-field[type=\"tags\"]","template":"\n      <label class=\"sme-arrange-stack-h\" aria-hidden=\"true\">\n          <span class=\"sme-position-flex-auto\">{{label}}</span>\n          <span class=\"sme-position-flex-none sme-margin-left-xs\" *ngIf=\"required\">{{strings.MsftSmeShell.Angular.Common.Form.Validation.required}}</span>\n          <span class=\"sme-position-flex-none sme-icon sme-icon-info sme-margin-left-xs\" *ngIf=\"details\" [title]=\"details\"> </span>\n      </label>\n      <div class=\"sme-tags-input\">\n          <div class=\"sme-tag\" *ngFor=\"let tag of value; let i = index\">\n              <span class=\"sme-tag-content\">{{tag}}</span>\n              <button class=\"sme-button-trigger sme-button-auto-width sme-tag-button sme-tag-button-delete\" role=\"button\" (click)=\"removeTag($event, i)\" [attr.aria-label]=\"strings.MsftSmeShell.Angular.TagsInput.RemoveTag.labelFormat | smeFormat:tag\" [title]=\"strings.MsftSmeShell.Angular.TagsInput.RemoveTag.labelFormat | smeFormat:tag\">\n                  <span class=\"sme-icon sme-icon-clear sme-icon-size-xxs\"></span>\n              </button>\n          </div>\n          <div class=\"sme-tag\">\n              <span class=\"sme-screen-reader\" [id]=\"idBag.screenReaderInstructions\">{{instructions}}</span>\n              <!-- This input does not need to be in a form as this entire component is meant to be used as an element within a form. -->\n              <input #newTagInput class=\"sme-tag-input\" type=\"text\" [attr.list]=\"idBag.newTagSuggestionsList\" autocomplete=\"off\" [(ngModel)]=\"newTags\" (keydown.enter)=\"submitTags($event)\" (blur)=\"submitTags($event)\" [attr.aria-required]=\"required\" [attr.aria-describedby]=\"idBag.screenReaderInstructions\"\n              />\n              <datalist [id]=\"idBag.newTagSuggestionsList\">\n                  <option *ngFor=\"let suggestion of displayedSuggestions\" >{{suggestion}}</option>\n              </datalist>\n              <button class=\"sme-button-trigger sme-tag-button sme-button-auto-width sme-tag-button-add\" role=\"button\" [attr.aria-label]=\"strings.MsftSmeShell.Angular.TagsInput.AddTag.label\" [title]=\"(!value || value.length === 0) ? '' : strings.MsftSmeShell.Angular.TagsInput.AddTag.label\"\n                  (click)=\"newTagInput.focus()\">\n                  <span class=\"sme-icon sme-icon-add sme-icon-size-xxs\"></span>\n                  <span *ngIf=\"!value || value.length === 0\">{{strings.MsftSmeShell.Angular.TagsInput.AddTag.label}}</span>\n              </button>\n          </div>\n      </div>\n      <sme-validation-alert [alert]=\"alert\"></sme-validation-alert>\n    "}]}],"members":{"tagSplitCharacter":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"suggestions":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"ariaLabel":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"HostBinding"},"arguments":["attr.aria-label"]}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@angular/core","name":"Injector"}]}],"ngOnInit":[{"__symbolic":"method"}],"removeTag":[{"__symbolic":"method"}],"submitTags":[{"__symbolic":"method"}],"updateDisplayedSuggestions":[{"__symbolic":"method"}],"onValueChanged":[{"__symbolic":"method"}],"createIdBag":[{"__symbolic":"method"}]}}}},{"__symbolic":"module","version":1,"metadata":{"TagsFormFieldComponent":{"__symbolic":"class","extends":{"__symbolic":"reference","module":"../form-field.component","name":"SmeInternalFormFieldComponent"},"decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component"},"arguments":[{"selector":"sme-form-field[type=\"tags\"]","template":"\n      <label class=\"sme-arrange-stack-h\" aria-hidden=\"true\">\n          <span class=\"sme-position-flex-auto\">{{label}}</span>\n          <span class=\"sme-position-flex-none sme-margin-left-xs\" *ngIf=\"required\">{{strings.MsftSmeShell.Angular.Common.Form.Validation.required}}</span>\n          <span class=\"sme-position-flex-none sme-icon sme-icon-info sme-margin-left-xs\" *ngIf=\"details\" [title]=\"details\"> </span>\n      </label>\n      <div class=\"sme-tags-input\">\n          <div class=\"sme-tag\" *ngFor=\"let tag of value; let i = index\">\n              <span class=\"sme-tag-content\">{{tag}}</span>\n              <button class=\"sme-button-trigger sme-button-auto-width sme-tag-button sme-tag-button-delete\" role=\"button\" (click)=\"removeTag($event, i)\" [attr.aria-label]=\"strings.MsftSmeShell.Angular.TagsInput.RemoveTag.labelFormat | smeFormat:tag\" [title]=\"strings.MsftSmeShell.Angular.TagsInput.RemoveTag.labelFormat | smeFormat:tag\">\n                  <span class=\"sme-icon sme-icon-clear sme-icon-size-xxs\"></span>\n              </button>\n          </div>\n          <div class=\"sme-tag\">\n              <span class=\"sme-screen-reader\" [id]=\"idBag.screenReaderInstructions\">{{instructions}}</span>\n              <!-- This input does not need to be in a form as this entire component is meant to be used as an element within a form. -->\n              <input #newTagInput class=\"sme-tag-input\" type=\"text\" [attr.list]=\"idBag.newTagSuggestionsList\" autocomplete=\"off\" [(ngModel)]=\"newTags\" (keydown.enter)=\"submitTags($event)\" (blur)=\"submitTags($event)\" [attr.aria-required]=\"required\" [attr.aria-describedby]=\"idBag.screenReaderInstructions\"\n              />\n              <datalist [id]=\"idBag.newTagSuggestionsList\">\n                  <option *ngFor=\"let suggestion of displayedSuggestions\" >{{suggestion}}</option>\n              </datalist>\n              <button class=\"sme-button-trigger sme-tag-button sme-button-auto-width sme-tag-button-add\" role=\"button\" [attr.aria-label]=\"strings.MsftSmeShell.Angular.TagsInput.AddTag.label\" [title]=\"(!value || value.length === 0) ? '' : strings.MsftSmeShell.Angular.TagsInput.AddTag.label\"\n                  (click)=\"newTagInput.focus()\">\n                  <span class=\"sme-icon sme-icon-add sme-icon-size-xxs\"></span>\n                  <span *ngIf=\"!value || value.length === 0\">{{strings.MsftSmeShell.Angular.TagsInput.AddTag.label}}</span>\n              </button>\n          </div>\n      </div>\n      <sme-validation-alert [alert]=\"alert\"></sme-validation-alert>\n    "}]}],"members":{"tagSplitCharacter":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"suggestions":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input"}}]}],"ariaLabel":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"HostBinding"},"arguments":["attr.aria-label"]}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@angular/core","name":"Injector"}]}],"ngOnInit":[{"__symbolic":"method"}],"removeTag":[{"__symbolic":"method"}],"submitTags":[{"__symbolic":"method"}],"updateDisplayedSuggestions":[{"__symbolic":"method"}],"onValueChanged":[{"__symbolic":"method"}],"createIdBag":[{"__symbolic":"method"}]}}}}]
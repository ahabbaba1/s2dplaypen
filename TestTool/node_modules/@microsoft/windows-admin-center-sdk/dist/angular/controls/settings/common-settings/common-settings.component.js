import { Component, Input, ViewChild } from '@angular/core';
import { FormArray, FormGroup } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { SettingsFormService } from '../settings-form.service';
import { SettingsComponent } from '../settings.component';
var CommonSettingsComponent = /** @class */ (function () {
    function CommonSettingsComponent(router, activatedRoute, settingsForms) {
        this.router = router;
        this.activatedRoute = activatedRoute;
        this.settingsForms = settingsForms;
        this.combinedForm = new FormGroup({});
    }
    CommonSettingsComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.addFormSubscription = this.settingsForms.formAdded().subscribe(function (formAddedData) {
            // to avoid duplicates we first remove the form if it exists
            _this.latestForm = formAddedData.formGroup;
            _this.latestPristineFormValue = _this.getRawValueRecursive(formAddedData.formGroup);
            _this.latestFormUpdateValueInComponent = formAddedData.updateValueInComponent;
            _this.recalculateActivePanel();
        });
        this.recalculateActivePanel();
    };
    CommonSettingsComponent.prototype.ngOnChanges = function (changes) {
        // nothing to do?
        this.recalculateActivePanel();
    };
    CommonSettingsComponent.prototype.ngOnDestroy = function () {
        this.resetSubscriptions();
    };
    CommonSettingsComponent.prototype.recalculateActivePanel = function () {
        var setting = this.getActiveSettingItem();
        if (setting) {
            var formSetting = setting;
            if (formSetting.form && formSetting.form.dirty) {
                var formValue = this.getRawValueRecursive(formSetting.form);
                if (formSetting.updateValueInComponent) {
                    this.settingsForms.newFormValue(formSetting.form, formValue);
                }
                else {
                    this.latestForm.setValue(formValue);
                }
                this.latestForm.markAsDirty();
            }
            this.settingsForms.removeForm(formSetting.form);
            formSetting.form = this.latestForm;
            if (formSetting.form) {
                if (this.combinedForm.controls[formSetting.label]) {
                    this.combinedForm.setControl(formSetting.label, formSetting.form);
                }
                else {
                    this.combinedForm.addControl(formSetting.label, formSetting.form);
                }
            }
            formSetting.updateValueInComponent = this.latestFormUpdateValueInComponent;
        }
    };
    CommonSettingsComponent.prototype.discardAllChildForms = function () {
        var _this = this;
        // For the current active setting, we need to reset the form to its
        // original pristine form when discarding changes
        var activeSetting = this.getActiveSettingItem();
        var settingWithForm = activeSetting;
        if (settingWithForm.form) {
            settingWithForm.form.reset(this.latestPristineFormValue);
        }
        this.settings.forEach(function (otherSetting) {
            if (otherSetting !== activeSetting) {
                var othersettingWithForm = otherSetting;
                _this.settingsForms.removeForm(othersettingWithForm.form);
                othersettingWithForm.form = null;
                if (_this.combinedForm.controls[othersettingWithForm.label]) {
                    _this.combinedForm.removeControl(othersettingWithForm.label);
                }
            }
        });
    };
    CommonSettingsComponent.prototype.acceptAllChildFormsValue = function () {
        var _this = this;
        var activeSetting = this.getActiveSettingItem();
        this.settings.forEach(function (setting) {
            var settingWithForm = setting;
            if (settingWithForm.form) {
                settingWithForm.form.reset(_this.getRawValueRecursive(settingWithForm.form));
                if (activeSetting === settingWithForm) {
                    _this.latestPristineFormValue = _this.getRawValueRecursive(settingWithForm.form);
                }
            }
        });
    };
    CommonSettingsComponent.prototype.getSmeIconClass = function (setting) {
        var ngClassParameter = {};
        if (setting.smeIconClassName) {
            ngClassParameter[setting.smeIconClassName] = true;
        }
        return ngClassParameter;
    };
    CommonSettingsComponent.prototype.canDeactivate = function (component, route, state) {
        var continueNavigation = true;
        if (this.settingsComponent) {
            return this.settingsComponent.canDeactivate(component, route, state);
        }
        return true;
    };
    CommonSettingsComponent.prototype.resetSubscriptions = function () {
        if (this.addFormSubscription) {
            this.addFormSubscription.unsubscribe();
        }
        if (this.removeFormSubscription) {
            this.removeFormSubscription.unsubscribe();
        }
        if (this.navigationSubscription) {
            this.navigationSubscription.unsubscribe();
        }
    };
    CommonSettingsComponent.prototype.detectActiveSettingItem = function () {
        if (this.settings && this.settings.length > 0) {
            for (var _i = 0, _a = this.settings; _i < _a.length; _i++) {
                var setting = _a[_i];
                var extras = setting.routeParams.extras || {};
                Object.assign(extras, {
                    relativeTo: this.activatedRoute
                });
                var urlTree = this.router.createUrlTree(setting.routeParams.commands, extras);
                if (this.router.isActive(urlTree, false)) {
                    this.selectedSettingTitle = setting.label;
                    return setting;
                }
            }
        }
        return undefined;
    };
    CommonSettingsComponent.prototype.getActiveSettingItem = function () {
        return this.detectActiveSettingItem();
    };
    /**
     * Returns the value of the current control and all its children recursivelly,
     * including disabled controls.
     *
     * Workaround for missing functionality added in later versions of angular
     * Currently getRawValue only returns the value of hte current control disabled
     * children but only enabled controls of other descendants:
     * https://github.com/angular/angular/commit/1ece7366c8b67f387fbe13f8d128c19f4c50dd19
     *
     * Once we upgrade angular version we can remove this code.
     *
     * @param formControl The form control to get the value from
     */
    CommonSettingsComponent.prototype.getRawValueRecursive = function (formControl) {
        var _this = this;
        if (formControl instanceof FormGroup) {
            var value_1 = {};
            Object.keys(formControl.controls).forEach(function (key) {
                value_1[key] = _this.getRawValueRecursive(formControl.controls[key]);
            });
            return value_1;
        }
        else if (formControl instanceof FormArray) {
            return formControl.controls.map(function (control) {
                return _this.getRawValueRecursive(control);
            });
        }
        return formControl.value;
    };
    CommonSettingsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'sme-common-settings',
                    template: "\n      <div class=\"sme-position-flex-auto sme-arrange-stack-h sme-position-stretch-v\">\n          <sme-settings class=\"sme-position-flex-auto\" [settingsTitle]=\"settingsTitle\">\n              <sme-settings-navigation>\n                  <nav role=\"tablist\" id=\"settingsSideNavigation\" [title]=\"settingsTitle\" class=\"settings-navigation nav side-navigation side-navigation-large theme-default sme-arrange-stack-v\">\n                      <ul class=\"sme-position-flex-auto sme-arrange-stack-v sme-arrange-overflow-hide-x sme-arrange-overflow-auto-y\">\n                          <li *ngFor=\"let setting of settings\">\n                              <a class=\"sme-position-flex-none\" role=\"tab\"  [routerLink]=\"setting.routeParams.commands\" routerLinkActive=\"active\"\n                                  [ngClass]=\"{dirty: !!(setting.form && setting.form.dirty)}\" [preserveQueryParams]=\"setting.routeParams.extras && setting.routeParams.extras.preserveQueryParams\"\n                                  [preserveFragment]=\"setting.routeParams.extras && setting.routeParams.extras.preserveFragment\" [skipLocationChange]=\"setting.routeParams.extras && setting.routeParams.extras.skipLocationChange\"\n                                  [replaceUrl]=\"setting.routeParams.extras && setting.routeParams.extras.replaceUrl\" [queryParams]=\"setting.routeParams.extras && setting.routeParams.extras.queryParams\"\n                                  [title]=\"setting.label\">\n                                  <div class=\"item-border sme-arrange-stack-h\">\n                                      <div class=\"sme-icon\" [ngClass]=\"getSmeIconClass(setting)\">\n                                      </div>\n                                      <span class=\"ellipsis sme-position-flex-auto\">\n                                          {{setting.label}}\n                                      </span>\n                                  </div>\n                              </a>\n                          </li>\n                      </ul>\n                  </nav>\n              </sme-settings-navigation>\n              <sme-settings-header>\n                  <h4 id=\"sme-shell-setting-selectedTitle\" *ngIf=\"!!detectActiveSettingItem()\">{{selectedSettingTitle}}</h4>\n              </sme-settings-header>\n              <sme-settings-content>\n                  <router-outlet></router-outlet>\n              </sme-settings-content>\n              <sme-settings-footer>\n                  <ng-content></ng-content>\n              </sme-settings-footer>\n          </sme-settings>\n      </div>\n    ",
                    styles: ["\n      :host {\n        height: 100%;\n      }\n\n      .side-navigation.side-navigation-large {\n        max-width: 320px;\n        width: auto\n      }\n\n      @media (max-width: 792px){\n        .side-navigation.side-navigation-large {\n            display: block;\n            max-width: 80px;\n        }\n      }\n\n      .side-navigation.side-navigation-large ul li {\n        padding: 0px;\n        text-decoration: none;\n      }\n      .side-navigation.side-navigation-large ul li a {\n        height: 48px;\n        padding: 13px 12px 13px 0px;\n        cursor: pointer;\n        font-size: 15px;\n        display: flex;\n        flex-direction: row;\n        align-items: center;\n        justify-content: center;\n        color: inherit;\n        text-decoration: none;\n      }\n\n      .side-navigation.side-navigation-large ul li a div.sme-icon {\n        margin-right: 12px;\n      }\n\n      .side-navigation.side-navigation-large ul li a:focus {\n        outline: 1px dashed #000;\n        outline-offset: -1px;\n      }\n\n      .side-navigation.side-navigation-large ul li a:hover {\n        background: rgba(242,242,242,1);\n      }\n\n      .side-navigation.side-navigation-large ul li a.active {\n        color: rgba(0,120,215,1);\n      }\n\n      .side-navigation.side-navigation-large ul li a.dirty {\n        font-style: italic;\n      }\n\n      .side-navigation.side-navigation-large ul li a.active .item-border {\n        border-left-color: rgba(0,120,215,1);\n      }\n\n      .item-border {\n        border-left: 4px solid transparent;\n        padding-left: 9px;\n        width: 100%;\n        overflow: hidden;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n        border-color: transparent;\n      }\n\n      .ellipsis {\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n        display: block;\n      }\n    "]
                },] },
    ];
    /** @nocollapse */
    CommonSettingsComponent.ctorParameters = function () { return [
        { type: Router, },
        { type: ActivatedRoute, },
        { type: SettingsFormService, },
    ]; };
    CommonSettingsComponent.propDecorators = {
        'settingsTitle': [{ type: Input },],
        'settings': [{ type: Input },],
        'backRoute': [{ type: Input },],
        'settingsComponent': [{ type: ViewChild, args: [SettingsComponent,] },],
    };
    return CommonSettingsComponent;
}());
export { CommonSettingsComponent };
//# sourceMappingURL=data:application/json;base64,
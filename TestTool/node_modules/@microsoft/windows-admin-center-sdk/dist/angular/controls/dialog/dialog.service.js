var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { Net, NotificationState } from '../../../core';
import { AppContextService } from '../../service/app-context.service';
import { Deprecated } from '../common';
import { DialogCloseReason } from './dialog.component';
var DialogService = /** @class */ (function () {
    function DialogService(appContext) {
        this.appContext = appContext;
        this.commonIds = {
            confirmation: 'sme-common-confirmation-dialog',
            confirmationList: 'sme-common-confirmation-list-dialog',
            message: 'sme-common-message-dialog',
            notifications: 'sme-common-notifications-pane',
            settings: 'sme-common-settings-pane',
            help: 'sme-common-help-pane',
            userPane: 'sme-common-user-pane',
            manageAs: 'sme-common-manage-as-dialog'
        };
        this.activeDialogsStack = [];
        this.componentMap = {};
        this.dialogOrigins = {};
    }
    /**
     * Registers the dialog with the service.
     *
     * @type TOptions the type of the dialog options.
     * @type TResult the type of the dialog results.
     * @param id The unique identifier of the dialog.
     * @param component The dialog component.
     */
    DialogService.prototype.register = function (id, component) {
        if (!id) {
            throw new Error('DialogService.register: ID is required to register a dialog.');
        }
        if (!component) {
            throw new Error('DialogService.register: A dialog is required to register a dialog.');
        }
        /**
         * removing until we understand cases where angular can call ngOnInit twice.
         * see: http://stackoverflow.com/questions/42700116/angular2-routing-issue-and-ngoninit-called-twice
         * and @msft-sme/local-users-groups for examples
         */
        // if (this.componentMap[id]) {
        //     console.warn(`DialogService.register: A dialog with the ID \'${id}\' has already been registered`);
        // }
        this.componentMap[id] = component;
    };
    /**
     * Unregisters the dialog with the service.
     *
     * @param id The unique identifier of the dialog.
     */
    DialogService.prototype.unregister = function (id) {
        if (this.componentMap[id]) {
            delete this.componentMap[id];
        }
        if (this.activeDialogsStack && this.activeDialogsStack.length > 0 && MsftSme.last(this.activeDialogsStack).id === id) {
            this.activeDialogsStack.pop();
        }
    };
    /**
     * Shows the dialog.
     *
     * @type TOptions The type of the dialog options.
     * @type TResult The result of the dialog.
     * @param id The unique identifier of the dialog.
     * @param options The dialog options.
     */
    DialogService.prototype.show = function (id, options) {
        var _this = this;
        if (!id) {
            throw new Error('DialogService.show: ID is required to show a dialog.');
        }
        if (!this.componentMap[id]) {
            throw new Error("DialogService.show: No dialog associated with provided ID '" + id + "'.");
        }
        var newDialog = this.componentMap[id];
        var oldDialog = MsftSme.last(this.activeDialogsStack);
        // accessibility
        if (options && !options.isFromRpc) {
            var origin = document.activeElement;
            if (origin) {
                this.dialogOrigins[id] = origin;
            }
        }
        // dont do anything unless we have a subscriber
        return Observable.of(oldDialog).flatMap(function (it) {
            // create a placeholder for the new dialog result
            var resultObservable;
            // remember if there was an active dialog when we started
            var existingActiveDialog = !!oldDialog;
            if (existingActiveDialog) {
                if (oldDialog.keepOpen) {
                    // If the currently active dialog wants to stay open, then keep it open and show the new dialog on top
                    _this.activeDialogsStack.push(newDialog);
                    _this.overlayOpen(true, newDialog.id);
                    // we set the dilaog level as the length of the active dialogs stack
                    newDialog.setLevel(_this.activeDialogsStack.length);
                    _this.activeDialogResult = newDialog.show(options).map(function (result) {
                        _this.overlayOpen(false, newDialog.id);
                        _this.activeDialogsStack.pop();
                        if (oldDialog) {
                            oldDialog.autoFocus();
                        }
                        return result;
                    });
                    resultObservable = _this.activeDialogResult;
                }
                else {
                    // if there is an active dialog, wait for it to complete, then show a the new one
                    resultObservable = _this.activeDialogResult
                        .takeLast(1)
                        .flatMap(function () {
                        return _this.show(id, options);
                    });
                }
            }
            else {
                // if there is no active dialog, then just show the new one      
                _this.activeDialogsStack.push(newDialog);
                _this.overlayOpen(true, newDialog.id);
                _this.activeDialogResult = newDialog.show(options).map(function (result) {
                    _this.overlayOpen(false, newDialog.id);
                    if (oldDialog) {
                        oldDialog.autoFocus();
                    }
                    _this.activeDialogsStack.pop();
                    return result;
                });
                resultObservable = _this.activeDialogResult;
            }
            // if we had an active dialog, request the previous dialog to close unless it wants to stay open
            if (existingActiveDialog && !oldDialog.keepOpen) {
                oldDialog.closeRequested(DialogCloseReason.CompetingDialog);
            }
            return resultObservable;
        });
    };
    /**
     * Shows a message dialog with the given options
     *
     * @param options The dialog options.
     * @returns A subject that will be published one time with the dialog result
     */
    DialogService.prototype.showMessage = function (options) {
        // if running from shell, manually launch dialog
        if (this.appContext.rpc.isShell) {
            return this.show(this.commonIds.message, options);
        }
        else {
            // otherwise ask the shell to do it for us.
            return this.appContext.frame.showDialogMessage({
                buttonText: options.buttonText,
                checkboxText: options.checkboxText,
                externalLink: options.externalLink,
                message: options.message,
                title: options.title
            });
        }
    };
    /**
     * Hide a message dialog.
     */
    DialogService.prototype.hideMessage = function () {
        this.hide(this.commonIds.message);
    };
    /**
     * Shows a confirmation dialog with the given options
     *
     * @param options The dialog options.
     * @returns A subject that will be published one time with the dialog result
     */
    DialogService.prototype.showConfirmation = function (options) {
        // if running from shell, manually launch dialog
        if (this.appContext.rpc.isShell) {
            return this.show(this.commonIds.confirmation, options);
        }
        else {
            // otherwise ask the shell to do it for us.
            return this.appContext.frame.showDialogConfirmation({
                cancelButtonText: options.cancelButtonText,
                checkboxText: options.checkboxText,
                confirmButtonText: options.confirmButtonText,
                doubleCheckText: options.doubleCheckText,
                message: options.message,
                title: options.title
            });
        }
    };
    /**
     * Hide a confirmation dialog.
     */
    DialogService.prototype.hideConfirmation = function () {
        this.hide(this.commonIds.confirmation);
    };
    /**
     * Shows a confirmation list dialog with the given options
     *
     * @param options The dialog options.
     * @returns A subject that will be published one time with the dialog result
     */
    DialogService.prototype.showConfirmationList = function (options) {
        return this.show(this.commonIds.confirmationList, options);
        // TODO: Cannot default confirmation list to rpc dialog because 'list' property has diverged 
        // from ConfirmationListDialogOptions and RpcConfirmationListDialogOptions
        // if (this.appContext.rpc.isShell) {
        //     return this.show(this.commonIds.confirmationList, options);
        // } else {            
        //     return this.appContext.frame.showDialogConfirmationList({
        //         cancelButtonText: options.cancelButtonText,
        //         checkboxText: options.checkboxText,
        //         confirmButtonText: options.confirmButtonText,
        //         list: options.listDataSource,
        //         listFooterText: options.listFooterText,
        //         listHeaderText: options.listHeaderText,
        //         title: options.title
        //     });
        // }
    };
    /**
     * Hide a confirmation list  dialog.
     */
    DialogService.prototype.hideConfirmationList = function () {
        this.hide(this.commonIds.confirmationList);
    };
    /**
     * Hides the dialog.
     *
     * @type TResult The type of the dialog result.
     * @param id The unique identifier of the dialog.
     * @param result The result of the dialog.
     */
    DialogService.prototype.hide = function (id, result) {
        if (!id) {
            throw new Error('DialogService.hide: ID is required to hide a dialog.');
        }
        if (!this.componentMap[id]) {
            throw new Error("DialogService.hide: No dialog associated with provided ID '" + id + "'.");
        }
        this.componentMap[id].hide(result);
    };
    /**
     * Send Rpc request to shell to add/remove overlay
     * @param overlay true: add, false: remove
     * @param id id of the dialog
     */
    DialogService.prototype.overlayOpen = function (overlay, id) {
        var _this = this;
        if (!this.appContext.rpc.isShell) {
            // there could be multiple dialog service instances for some reason
            this.appContext.registerDialogService(this, id);
            this.appContext.frame.overlayOpen(overlay, id).catch(function (error) {
                _this.appContext.notification.alert('', NotificationState.Error, Net.getErrorMessage(error));
                return Observable.empty();
            });
        }
    };
    /**
     * Handle clicking on dialog background in shell
     * @param dialogId id of dialog whose background was clicked
     */
    DialogService.prototype.overlayClicked = function (dialogId) {
        var lastDialog = MsftSme.last(this.activeDialogsStack);
        if (lastDialog && lastDialog.id === dialogId) {
            lastDialog.onBackgroundClicked();
            return true;
        }
        return false;
    };
    /**
     * Resume focus back to the original element that shows the dialog.
     * @param id The id of dialog
     * @param delay If provided, delays resuming focus for a period of time in ms
     */
    DialogService.prototype.resumeFocus = function (id, delay) {
        var _this = this;
        if (delay === void 0) { delay = 0; }
        // check to see if there is a dialog stack currently.
        var wasInDialogStack = this.activeDialogsStack && this.activeDialogsStack.length > 0;
        if (this.dialogOrigins[id]) {
            setTimeout(function () {
                var isInDialogStack = _this.activeDialogsStack && _this.activeDialogsStack.length > 0;
                if (!wasInDialogStack && isInDialogStack) {
                    // a dialog was opened during the setTimeout. 
                    // This means that the new dialog will resume focus to the wrong element and the new dialog will open unfocused.
                    _this.dialogOrigins[_this.activeDialogsStack[0].id] = _this.dialogOrigins[id];
                    delete _this.dialogOrigins[id];
                }
                else if (_this.appContext.frame.activeRpcDialogsOrigins.size > 0) {
                    // an rpc dialog was opened during the setTimeout. So just wait a little longer and then refocus
                    _this.resumeFocus(id, 100);
                }
                else {
                    _this.dialogOrigins[id].focus();
                    delete _this.dialogOrigins[id];
                }
            }, delay);
        }
    };
    DialogService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    DialogService.ctorParameters = function () { return [
        { type: AppContextService, },
    ]; };
    __decorate([
        Deprecated({
            deprecatedSince: '02/20/18',
            alternateSignature: 'AppContextService.frame.showDialogMessage',
            suppressForShell: true
        }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", Observable)
    ], DialogService.prototype, "showMessage", null);
    __decorate([
        Deprecated({
            deprecatedSince: '02/20/18',
            alternateSignature: 'AppContextService.frame.showDialogConfirmation',
            suppressForShell: true
        }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", Observable)
    ], DialogService.prototype, "showConfirmation", null);
    return DialogService;
}());
export { DialogService };
//# sourceMappingURL=data:application/json;base64,
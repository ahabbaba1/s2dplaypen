import { Component, ContentChild, ElementRef, EventEmitter, forwardRef, HostBinding, HostListener, Input, Output, ViewChild } from '@angular/core';
import { Logging, LogLevel } from '../../../core';
/**
 * The component definition of the split view content.
 */
var SplitViewContentComponent = /** @class */ (function () {
    function SplitViewContentComponent() {
    }
    SplitViewContentComponent.decorators = [
        { type: Component, args: [{
                    selector: 'sme-split-view-content',
                    template: '<ng-content></ng-content>'
                },] },
    ];
    /** @nocollapse */
    SplitViewContentComponent.ctorParameters = function () { return []; };
    return SplitViewContentComponent;
}());
export { SplitViewContentComponent };
/**
 * The component definition of the split view pane.
 */
var SplitViewPaneComponent = /** @class */ (function () {
    function SplitViewPaneComponent() {
    }
    SplitViewPaneComponent.decorators = [
        { type: Component, args: [{
                    selector: 'sme-split-view-pane',
                    template: '<ng-content></ng-content>'
                },] },
    ];
    /** @nocollapse */
    SplitViewPaneComponent.ctorParameters = function () { return []; };
    return SplitViewPaneComponent;
}());
export { SplitViewPaneComponent };
/**
 * The component definition of the split view.
 */
var SplitViewComponent = /** @class */ (function () {
    function SplitViewComponent(elementReference) {
        this.elementReference = elementReference;
        this.internalIsExpanded = false;
        this.isComponentInitialized = false;
        /**
         * It implements the ILayout interface. It's triggered when the layout is changed.
         * It's used to tell the child components to coordate with the layout change.
         */
        this.layoutChanged = new EventEmitter();
        /**
         * It indicates whether to show the scrollbar when it's needed.
         */
        this.showScrollbar = false;
        /**
         * It indicates whether to show the border for the splitter.
         */
        this.showSplitterBorder = true;
        /**
         * It indicates the min value of the pane size.
         */
        this.resizeLowerMargin = 100;
        /**
         * It indicates the min value of the content size.
         */
        this.resizeUpperMargin = 100;
        /**
         * The orientation of the pane.
         */
        this.orientation = 'bottom';
        /**
         * The event fired when the pane's expanded state is being toggled.
         */
        this.paneToggling = new EventEmitter();
        /**
         * The event fired when the pane's expanded state has been toggled.
         */
        this.paneToggled = new EventEmitter();
    }
    Object.defineProperty(SplitViewComponent.prototype, "hostClass", {
        /**
         * Gets the CSS classes of the component.
         *
         * TODO: setting the class this way prevent any custom class from being applied.
         * Change to setting class in the constructor using Renderer2 and ElementRef
         */
        get: function () {
            return 'sme-layout-absolute sme-position-inset-none sme-arrange-stack-v sme-arrange-overflow-hide';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SplitViewComponent.prototype, "flexDirection", {
        /**
         * Gets the flex direction of the component.
         */
        get: function () {
            switch (this.orientation) {
                case 'left':
                    return 'row';
                case 'top':
                    return 'column';
                case 'right':
                    return 'row';
                case 'bottom':
                default:
                    return 'column';
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SplitViewComponent.prototype, "isExpanded", {
        /**
         * Whether the pane is expanded.
         */
        get: function () {
            return this.internalIsExpanded;
        },
        set: function (value) {
            var _this = this;
            this.internalIsExpanded = value;
            this.paneToggling.emit({
                isExpanded: this.internalIsExpanded
            });
            setTimeout(function () {
                _this.paneToggled.emit({
                    isExpanded: _this.internalIsExpanded
                });
                _this.layoutChanged.emit();
            });
            this.refreshUI();
        },
        enumerable: true,
        configurable: true
    });
    SplitViewComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.isComponentInitialized = true;
        setTimeout(function () {
            _this.refreshUI();
        });
    };
    /**
     * The method called after content is initialized.
     */
    SplitViewComponent.prototype.ngAfterContentInit = function () {
        if (this.content == null) {
            Logging.log({
                level: LogLevel.Error,
                message: "The value of 'content' is either null or undefined.",
                params: {
                    content: this.content
                },
                source: 'SplitViewComponent.ngAfterContentInit'
            });
        }
        if (this.pane == null) {
            Logging.log({
                level: LogLevel.Error,
                message: "The value of 'pane' is either null or undefined.",
                params: {
                    pane: this.pane
                },
                source: 'SplitViewComponent.ngAfterContentInit'
            });
        }
    };
    SplitViewComponent.prototype.onWindowResized = function () {
        if (this.orientation === 'bottom') {
            this.paneDistance = Math.min(this.paneDistance, this.elementReference.nativeElement.offsetHeight - this.resizeUpperMargin);
            this.paneDistance = Math.max(this.paneDistance, this.resizeLowerMargin);
            this.paneContainerElement.nativeElement.style.height = this.isExpanded ? (this.paneDistance + 'px') : '';
        }
        else if (this.orientation === 'top') {
            this.paneDistance = Math.min(this.paneDistance, this.elementReference.nativeElement.offsetHeight - this.resizeUpperMargin);
            this.paneDistance = Math.max(this.paneDistance, this.resizeLowerMargin);
            this.paneContainerElement.nativeElement.style.height = this.isExpanded ? (this.paneDistance + 'px') : '';
        }
        else if (this.orientation === 'left') {
            this.paneDistance = Math.min(this.paneDistance, this.elementReference.nativeElement.offsetWidth - this.resizeUpperMargin);
            this.paneDistance = Math.max(this.paneDistance, this.resizeLowerMargin);
            this.paneContainerElement.nativeElement.style.width = this.isExpanded ? (this.paneDistance + 'px') : '';
        }
        else if (this.orientation === 'right') {
            this.paneDistance = Math.min(this.paneDistance, this.elementReference.nativeElement.offsetWidth - this.resizeUpperMargin);
            this.paneDistance = Math.max(this.paneDistance, this.resizeLowerMargin);
            this.paneContainerElement.nativeElement.style.width = this.isExpanded ? (this.paneDistance + 'px') : '';
        }
        this.layoutChanged.emit();
    };
    /**
     * Toggles the expanded state of the pane.
     */
    SplitViewComponent.prototype.togglePane = function () {
        this.isExpanded = !this.isExpanded;
    };
    SplitViewComponent.prototype.onResized = function ($event) {
        if (this.orientation === 'bottom') {
            this.paneDistance = Math.max(this.paneContainerElement.nativeElement.offsetHeight - $event.y, this.resizeLowerMargin);
            this.paneDistance = Math.min(this.paneDistance, this.elementReference.nativeElement.offsetHeight - this.resizeUpperMargin);
            this.paneContainerElement.nativeElement.style.height = this.paneDistance + 'px';
        }
        else if (this.orientation === 'top') {
            this.paneDistance = Math.max(this.paneContainerElement.nativeElement.offsetHeight + $event.y, this.resizeLowerMargin);
            this.paneDistance = Math.min(this.paneDistance, this.elementReference.nativeElement.offsetHeight - this.resizeUpperMargin);
            this.paneContainerElement.nativeElement.style.height = this.paneDistance + 'px';
        }
        else if (this.orientation === 'left') {
            this.paneDistance = Math.max(this.paneContainerElement.nativeElement.offsetWidth + $event.x, this.resizeLowerMargin);
            this.paneDistance = Math.min(this.paneDistance, this.elementReference.nativeElement.offsetWidth - this.resizeUpperMargin);
            this.paneContainerElement.nativeElement.style.width = this.paneDistance + 'px';
        }
        else if (this.orientation === 'right') {
            this.paneDistance = Math.max(this.paneContainerElement.nativeElement.offsetWidth - $event.x, this.resizeLowerMargin);
            this.paneDistance = Math.min(this.paneDistance, this.elementReference.nativeElement.offsetWidth - this.resizeUpperMargin);
            this.paneContainerElement.nativeElement.style.width = this.paneDistance + 'px';
        }
        this.layoutChanged.emit();
    };
    SplitViewComponent.prototype.getAriaValueNow = function () {
        return this.isExpanded ? Math.round(this.paneDistance) : null;
    };
    SplitViewComponent.prototype.refreshUI = function () {
        var _this = this;
        if (this.isComponentInitialized && this.paneContainerElement && this.paneContainerElement.nativeElement) {
            if (this.internalIsExpanded) {
                if (this.paneDistance) {
                    if (this.orientation === 'top' || this.orientation === 'bottom') {
                        this.paneContainerElement.nativeElement.style.height = this.paneDistance + 'px';
                    }
                    else if (this.orientation === 'left' || this.orientation === 'right') {
                        this.paneContainerElement.nativeElement.style.width = this.paneDistance + 'px';
                    }
                }
            }
            else {
                if (this.orientation === 'top' || this.orientation === 'bottom') {
                    this.paneContainerElement.nativeElement.style.height = '';
                }
                else if (this.orientation === 'left' || this.orientation === 'right') {
                    this.paneContainerElement.nativeElement.style.width = '';
                }
            }
            setTimeout(function () {
                if (_this.paneContainerElement && _this.paneContainerElement.nativeElement) {
                    if (_this.orientation === 'top' || _this.orientation === 'bottom') {
                        if (_this.internalIsExpanded) {
                            _this.paneDistance = _this.paneContainerElement.nativeElement.offsetHeight;
                        }
                    }
                    else if (_this.orientation === 'left' || _this.orientation === 'right') {
                        if (_this.internalIsExpanded) {
                            _this.paneDistance = _this.paneContainerElement.nativeElement.offsetWidth;
                        }
                    }
                }
            });
        }
    };
    SplitViewComponent.decorators = [
        { type: Component, args: [{
                    selector: 'sme-split-view',
                    template: "\n      <ng-container *ngIf=\"orientation==='bottom' || orientation==='right'\">\n          <section class=\"sme-layout-relative sme-position-flex-auto sme-background-color-base\" [class.sme-arrange-overflow-auto]=\"showScrollbar\">\n              <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n          </section>\n          <section #paneContainer class=\"sme-layout-relative sme-position-flex-none sme-border-color-base-80 sme-background-color-base\"\n              [class.sme-border-left-sm]=\"showSplitterBorder && orientation === 'right'\" [class.sme-border-top-sm]=\"showSplitterBorder && orientation === 'bottom'\"\n              [class.sme-arrange-overflow-auto]=\"showScrollbar\">\n              <sme-resizer *ngIf=\"isExpanded\" [tabindex]=\"[isExpanded?0:null]\" [class.sme-focus-zone]=\"isExpanded\" resizerHostSelector=\"sme-split-view\" (resized)=\"onResized($event)\"\n                  [orientation]=\"orientation\">\n              </sme-resizer>\n              <ng-container *ngTemplateOutlet=\"pane\"></ng-container>\n          </section>\n      </ng-container>\n      <ng-container *ngIf=\"orientation==='top' || orientation==='left'\">\n          <section #paneContainer class=\"sme-layout-relative sme-position-flex-none sme-border-color-base-80 sme-background-color-base\"\n              [class.sme-border-right-sm]=\"showSplitterBorder && orientation === 'left'\" [class.sme-border-bottom-sm]=\"showSplitterBorder && orientation === 'top'\"\n              [class.sme-arrange-overflow-auto]=\"showScrollbar\">\n              <ng-container *ngTemplateOutlet=\"pane\"></ng-container>\n              <sme-resizer *ngIf=\"isExpanded\" [tabindex]=\"[isExpanded?0:null]\" [class.sme-focus-zone]=\"isExpanded\" resizerHostSelector=\"sme-split-view\" (resized)=\"onResized($event)\"\n                  [orientation]=\"orientation\" [attr.aria-valuenow]=\"getAriaValueNow()\">\n              </sme-resizer>\n          </section>\n          <section class=\"sme-layout-relative sme-position-flex-auto sme-background-color-base\" [class.sme-arrange-overflow-auto]=\"showScrollbar\">\n              <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n          </section>\n      </ng-container>\n      <ng-template #content>\n          <ng-content select=\"sme-split-view-content\"></ng-content>\n      </ng-template>\n      <ng-template #pane>\n          <ng-content select=\"sme-split-view-pane\"></ng-content>\n      </ng-template>\n      <!-- The reason to use ng-tempalte to wrap the ng-content element instead of directly to use ng-content in both two ng-containers above is:\n      If we use ng-content elements directly in both 2 ng-containers, there will be 2 ng-content elements with the same selector. But Angular will only \n      resolve the first ng-content in multiple ng-content elements with same selector even the first one is in a ngIf false block.\n      So when the orientation is \"top\" or \"left\", no ng-content element will be resolved then nothing would render.\n      In order to solve this problem, we have to use ng-template to wrap the ng-content to make sure one selector maps to one ng-content.\n      Then we use ng-container and ngTemplateOutlet to call the ng-template. \n      Thx for reading till here...... -->\n    ",
                    providers: [
                        { provide: 'layout', useExisting: forwardRef(function () { return SplitViewComponent; }) }
                    ]
                },] },
    ];
    /** @nocollapse */
    SplitViewComponent.ctorParameters = function () { return [
        { type: ElementRef, },
    ]; };
    SplitViewComponent.propDecorators = {
        'content': [{ type: ContentChild, args: [SplitViewContentComponent,] },],
        'pane': [{ type: ContentChild, args: [SplitViewPaneComponent,] },],
        'paneContainerElement': [{ type: ViewChild, args: ['paneContainer',] },],
        'showScrollbar': [{ type: Input },],
        'showSplitterBorder': [{ type: Input },],
        'paneDistance': [{ type: Input },],
        'resizeLowerMargin': [{ type: Input },],
        'resizeUpperMargin': [{ type: Input },],
        'orientation': [{ type: Input },],
        'paneToggling': [{ type: Output },],
        'paneToggled': [{ type: Output },],
        'hostClass': [{ type: HostBinding, args: ['class',] },],
        'flexDirection': [{ type: HostBinding, args: ['style.flex-direction',] },],
        'isExpanded': [{ type: Input },],
        'onWindowResized': [{ type: HostListener, args: ['window:resize',] },],
    };
    return SplitViewComponent;
}());
export { SplitViewComponent };
//# sourceMappingURL=data:application/json;base64,
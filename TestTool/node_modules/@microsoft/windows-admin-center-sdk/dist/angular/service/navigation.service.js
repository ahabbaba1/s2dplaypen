import { Injectable } from '@angular/core';
import { ActivatedRoute, NavigationEnd, Router } from '@angular/router';
import { Observable } from 'rxjs';
import { NativeQ, Net, RpcDeactivateState, RpcOpenState, RpcOutboundCommands } from '../../core';
import { AppContextService } from './app-context.service';
import { Navigation } from './navigation';
;
/**
 * Once initialize this class uses the underlying RPC channel
 * to communicate with the remote RPC service.
 */
var NavigationService = /** @class */ (function () {
    /**
     * Creates a new instance of this service
     */
    function NavigationService(appContextService, router, activatedRoute) {
        this.appContextService = appContextService;
        this.router = router;
        this.activatedRoute = activatedRoute;
        this.navigationOptions = { skipLocationChange: true };
        this.dialogServiceMap = {};
        this.openContext = {
            state: null,
            requestedTime: 0,
            timer: null,
            deferred: null,
            error: null
        };
        this.deactivateContext = {
            state: null,
            requestedTime: 0,
            timer: null,
            deferred: null
        };
    }
    /**
     * Initialize navigation communication from/to the shell.
     *
     *  Registers the methods with the remote RPC defined in the manifest
     *  Subscribes to the router events and reports the breadcrumb items
     *  back to the rpc remote
     *
     * @param options The options to override the default behavior
     */
    NavigationService.prototype.initialize = function (options) {
        var _this = this;
        this.active = true;
        this.options = options ? options : { idleRoute: ['idle'] };
        // navigate to idle.
        this.router.navigate(this.options.idleRoute, this.navigationOptions);
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
        this.subscription = this.router.events
            .filter(function (event) { return event instanceof NavigationEnd; })
            .switchMap(function (event) { return Navigation.buildSelectablePathsForRoute(_this.appContextService, _this.activatedRoute.snapshot)
            .map(function (selectablePaths) { return ({ event: event, selectablePaths: selectablePaths }); }); })
            .subscribe(function (data) {
            // in the case of initial idle state, reporting url will cause rpc error. all other cases should be ok.
            if (_this.active && data.event.url !== ("/" + _this.options.idleRoute)) {
                _this.appContextService.rpc.report({
                    path: decodeURI(data.event.urlAfterRedirects),
                    beforeRedirectedPath: decodeURI(data.event.url),
                    selectablePath: data.selectablePaths
                });
            }
        });
        this.appContextService.rpc.register(RpcOutboundCommands.Init, this.onInit.bind(this));
        this.appContextService.rpc.register(RpcOutboundCommands.Open, this.onOpen.bind(this));
        this.appContextService.rpc.register(RpcOutboundCommands.Deactivate2, this.onDeactivate2.bind(this));
        this.appContextService.rpc.register(RpcOutboundCommands.Activate, this.onActivate.bind(this));
        this.appContextService.rpc.register(RpcOutboundCommands.Shutdown, this.onShutdown.bind(this));
        this.appContextService.rpc.register(RpcOutboundCommands.OverlayClose, this.onOverlayClose.bind(this));
    };
    /**
     * Shutdown the navigation communication from/to the shell.
     */
    NavigationService.prototype.shutdown = function () {
        this.active = false;
        if (this.subscription) {
            this.subscription.unsubscribe();
            this.subscription = null;
        }
    };
    /**
     * Map dialog service and dialog id so that correct dialog service instance can be found
     * @param dialogService dialog service to be registered
     * @param dialogId associated dialog id
     */
    NavigationService.prototype.registerDialogService = function (dialogService, dialogId) {
        this.dialogServiceMap[dialogId] = dialogService;
    };
    NavigationService.prototype.onInit = function (data) {
        this.active = true;
        return Promise.resolve();
    };
    /**
     * Call to dialog service to request close a dialog
     * @param data data object to close a dialog from shell
     */
    NavigationService.prototype.onOverlayClose = function (data) {
        var dialogService = this.dialogServiceMap[data.dialogId];
        var result = false;
        if (dialogService) {
            result = dialogService.overlayClicked(data.dialogId);
            delete this.dialogServiceMap[data.dialogId];
        }
        return Promise.resolve({ overlayClosed: result });
    };
    /**
     * Repeated open called until navigation is established or failed.
     *
     * @param data the RpcOpenData data.
     */
    NavigationService.prototype.onOpen = function (data) {
        var _this = this;
        var context = this.openContext;
        if (context.state != null) {
            var result = {
                waitedTime: Date.now() - context.requestedTime,
                state: this.openContext.state,
                error: context.error
            };
            if (context.state !== RpcOpenState.InProgress) {
                context.state = null;
                context.requestedTime = null;
            }
            return Promise.resolve(result);
        }
        context.requestedTime = Date.now();
        context.state = RpcOpenState.InProgress;
        context.deferred = NativeQ.defer();
        // set timeout to respond back status to shell.
        context.timer = setTimeout(function () {
            context.deferred.resolve({
                waitedTime: Date.now() - context.requestedTime,
                state: context.state
            });
            context.timer = null;
            context.deferred = null;
        }, NavigationService.initialWaitTime);
        this.appContextService.servicesReady
            .take(1)
            .flatMap(function () {
            var commands = [decodeURI(data.path)];
            if (data.parameters) {
                commands.push(data.parameters);
            }
            return _this.router.navigate(commands, _this.navigationOptions);
        })
            .map(function (success) {
            context.state = RpcOpenState.Opened;
            // if timer isn't fired yet, just complete with success navigation.
            if (context.timer) {
                clearTimeout(context.timer);
                context.deferred.resolve({
                    waitedTime: Date.now() - context.requestedTime,
                    state: context.state,
                    error: context.error
                });
                context.state = null;
                context.requestedTime = null;
                context.timer = null;
                context.deferred = null;
            }
        })
            .catch(function (error, caught) {
            context.state = RpcOpenState.Failed;
            var message = '';
            if (error && error.xhr) {
                message = Net.getErrorMessage(error);
            }
            else if (typeof error === 'string') {
                message = error;
            }
            else {
                if (error.stack) {
                    message = error.stack;
                }
                else if (error.message) {
                    message = error.message;
                }
            }
            context.error = message;
            // if timer isn't fired yet, just complete with error navigation.
            if (context.timer) {
                clearTimeout(context.timer);
                context.deferred.reject(context.error);
                context.state = null;
                context.requestedTime = null;
                context.timer = null;
                context.deferred = null;
            }
            return Observable.empty();
        })
            .subscribe();
        return context.deferred.promise;
    };
    /**
     * Repeated called until Guard is continued or cancelled.
     *
     * @param data the void data.
     */
    NavigationService.prototype.onDeactivate2 = function (data) {
        var _this = this;
        var context = this.deactivateContext;
        if (context.state != null) {
            var result = {
                waitedTime: Date.now() - context.requestedTime,
                state: context.state
            };
            if (context.state !== RpcDeactivateState.InProgress) {
                context.state = null;
                context.requestedTime = null;
            }
            return Promise.resolve(result);
        }
        // it's already inactive.
        if (!this.active) {
            return Promise.resolve({
                waitedTime: 0,
                state: RpcDeactivateState.Deactivated
            });
        }
        this.active = false;
        var current = decodeURI(this.router.url);
        context.requestedTime = Date.now();
        context.state = RpcDeactivateState.InProgress;
        context.deferred = NativeQ.defer();
        // set timeout to respond back status to shell.
        context.timer = setTimeout(function () {
            context.deferred.resolve({
                waitedTime: Date.now() - context.requestedTime,
                state: context.state
            });
            context.timer = null;
            context.deferred = null;
            // if it isn't in progress, reset the state.
            if (context.state !== RpcDeactivateState.InProgress) {
                context.state = null;
                context.requestedTime = null;
            }
        }, NavigationService.initialWaitTime);
        // try navigate to idle.
        this.router.navigate(this.options.idleRoute, this.navigationOptions)
            .then(function (success) {
            if (success) {
                // navigate away so inactive mode.
                _this.lastRoute = [current];
                context.state = RpcDeactivateState.Deactivated;
            }
            else {
                // navigate cancel so active mode.
                _this.active = true;
                context.state = RpcDeactivateState.Cancelled;
            }
            // if timer isn't fired yet, just complete with success navigation.
            if (context.timer) {
                clearTimeout(context.timer);
                context.deferred.resolve({
                    waitedTime: Date.now() - context.requestedTime,
                    state: context.state
                });
                context.timer = null;
                context.deferred = null;
                context.state = null;
                context.requestedTime = null;
            }
        });
        return context.deferred.promise;
    };
    NavigationService.prototype.onActivate = function (data) {
        var newRoute = this.lastRoute || [''];
        this.active = true;
        return this.router.navigate(newRoute, this.navigationOptions);
    };
    NavigationService.prototype.onShutdown = function (data) {
        return this.router.navigate(this.options.idleRoute, this.navigationOptions)
            .then(function (result) { return { canShutdown: result }; });
    };
    NavigationService.initialWaitTime = 2000;
    NavigationService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    NavigationService.ctorParameters = function () { return [
        { type: AppContextService, },
        { type: Router, },
        { type: ActivatedRoute, },
    ]; };
    return NavigationService;
}());
export { NavigationService };
//# sourceMappingURL=data:application/json;base64,